[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "\u003d RestOrRant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w09-3/main[image:https://travis-ci.org/cs2103-ay1819s2-w09-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "https://ci.appveyor.com/project/whyjayxp/main[image:https://ci.appveyor.com/api/projects/status/055nwifdddjl5ii5?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w09-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w09-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "\u003d\u003d What Is This?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "This is a simple restaurant management application intended to ease the management of restaurants for those who work in restaurants."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "This is a desktop application that has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "Hence, our target users are restaurant waiters and managers who can type fast and prefer typing over clicking on GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "\u003d\u003d What Can It Do?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "It can..."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "* Display the current status of the restaurant at any time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Manage the use of tableList in the restaurant."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Track all orders for all tableList in the restaurant."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "* Consolidate statistics of the restaurant."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "** Total revenue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "** Total number of customers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "** Order frequency of menu items"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "* The original source code of this application is from the AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU initiative]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Qing-Yuan": 20,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u0027site-name\u0027: \u0027RestOrRant\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w09-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 234
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d RestOrRant - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w09-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "By: `Team w09-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#updateRestOrRant()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#updateRestOrRant()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#updateRestOrRant()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "If a command fails its execution, it will not call `Model#updateRestOrRant()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#updateRestOrRant()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#updateRestOrRant()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonAddressBookStorage.java[`JsonAddressBookStorage`] class."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/addressbook.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedPerson` class"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedPerson.java[`JsonAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.json`, `typicalPersonsAddressBook.json`, `validAddressBook.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |waiter |view the status of the tableList |know which tableList are free/occupied and which tableList are waiting for orders/has received their orders"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |waiter |change status of tableList |update the availability of tableList"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* * *` |waiter |add orders to a table |know which orders to serve to each table"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* * *` |waiter |delete orders from a table |update changes to the orders of each table"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* * *` |waiter |update wrong orders |conveniently assist to customers demands without keying in wrong/changed orders"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* * *` |cashier |retrieve the bill for each table |easily process their bill when they\u0027re done eating"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* *` |waiter |add special requests to the order |inform the chef of the customers\u0027 specific preferences"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* *` |waiter |view popular dishes via statistics |suggest the best dishes to the customer"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "bava98"
        },
        "content": "|`* *` |chef |review the statistics of the dishes\u0027 popularity |determine how much ingredients to allocate to the popular dishes"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |waiter |reserve tableList |see which tableList can be provided to other subsequent customers"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "bava98"
        },
        "content": "(For all use cases below, the *System* is `RestOrRant` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Switching to Restaurant Mode"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "1. User enters command to change to Restaurant Mode."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "2. RestOrRant programs changes mode and indicates the mode it has changed to."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The program is already in Restaurant Mode."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. RestOrRant Program returns an error message that it is already in Restaurant Mode."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "bava98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d\u003d\u003d Use case: Switching to Menu Mode"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "bava98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "bava98"
        },
        "content": "1. User enters the menuMode command to switch mode to menu mode"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "bava98"
        },
        "content": "2. RestOrRant Program changes the UI to show the menu in the list panel, and allows addToMenu command."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "bava98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1a. The program mode is already in Menu Mode."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1a1. RestOrRant Program returns an message that program is already in menu mode."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Adding tables to the RestOrRant Program"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "1. User enters command to add a table to the restaurant"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "2. RestOrRant Program returns success message that the table is added, providing the table number and table status."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Checking for available tableList"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User enters command to list all tableList in the restaurant."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "2.  RestOrRant Program returns the status (number of customers at the table/number of seats at the table) of all tableList in the restaurant."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "** 2a1. RestOrRant Program returns an error message that there are no tableList in the restaurant."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "bava98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d\u003d\u003d Use case: Taking an order"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "bava98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "bava98"
        },
        "content": "1.  User enters the table number, along with item codes and quantities of the menu items."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "bava98"
        },
        "content": "2.  RestOrRant Program updates the specified table\u0027s order with the menu items and displays the new order list."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "bava98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1a. The item code(s) is/are invalid."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1a1. RestOrRant Program displays the item codes that are invalid and remove them from the list of item codes to add to the order."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "bava98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d\u003d\u003d Use case: Adding Items to Menu"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "bava98"
        },
        "content": "*Preconditions:* Program mode should be in Menu Mode. Item to be added cannot exist in the menu."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "bava98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "bava98"
        },
        "content": "1.  User enters the addToMenu command along with the item\u0027s code, name and price."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "bava98"
        },
        "content": "2.  RestOrRant Program updates the menu to include the added menu item."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "bava98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1a. The menu already contains the item to be added."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1a1. RestOrRant Program prints out \"Invalid arguments, item already exists in the menu!\"."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1b. The item code already exists in the menu."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1b1. RestOrRant Program prints out \"Invalid arguments, item code exists in the menu!\"."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1c. The item code does not follow the standard alphanumeric format."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1c1. RestOrRant Program prints out \"Invalid code. Please use an alphanumeric code. Example: W09\"."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "bava98"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d\u003d\u003d Use case: Check Statistics"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "bava98"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "bava98"
        },
        "content": "1.  User enters the statistic command with specific optional arguements (year, month and date)."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "bava98"
        },
        "content": "2.  RestOrRant Program collates data from the stated period, calculates all the statistics and prints out the calculated data in a neat presentation for the user to refer to."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "bava98"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 1a. The arguments are invalid."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 1a1. RestOrRant Program prints out \"Invalid arguments. All arguments should be a numercial number. Format: getStatistics [Year] [Month] [Date]\"."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 2a. There is no data recorded, list is empty."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "bava98"
        },
        "content": "** 2a1. RestOrRant Program prints out \"No available data recorded.\""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 2b. Not all arguments were keyed in."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "bava98"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "bava98"
        },
        "content": "* 2b1. RestOrRant Program returns the statistical data based on the year if only 1 argument was specified; and the month if only 2 arguments were specified."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "bava98"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "bava98"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "bava98"
        },
        "content": "[[order]] Order::"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "bava98"
        },
        "content": "The list of menu items ordered by dining customers ata table"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "bava98"
        },
        "content": "[[menu]] Menu::"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "bava98"
        },
        "content": "The list of items available to be ordered by dining customers at the restaurant"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "bava98"
        },
        "content": "[[bill]] Bill::"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "bava98"
        },
        "content": "The amount of money that dining customers have to pay based on their order"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "bava98"
        },
        "content": "[[statistics]] Statistics::"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "bava98"
        },
        "content": "The record of the revenue earned, number of customers and number of menu items purchased"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "bava98": 136,
      "whyjayxp": 6,
      "-": 964
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d RestOrRant - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W09-3`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "RestOrRant (ROR) is for those who *prefer to use a desktop app for managing contacts*. More importantly, ROR is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, ROR can get your restaurant management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `RestOrRant.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your RestOrRant application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ".  The application has three modes: Restaurant Mode, Table Mode and Menu Mode. RestOrRant starts in Restaurant Mode by default. You can switch between the modes using the *`xxxMode` commands. Each mode comes with a set of commands to perform mode-specific operations."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* *`addTables 2 1 4`* (in Restaurant Mode): adds 3 tables to the restaurant with 2, 1 and 4 seats respectively."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* *`menuMode`: switches RestOrRant to Menu Mode and displays the list of menu items for the restaurant."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* *`addToMenu c/W09 n/Chicken Wings p/12.50`* (in Menu Mode): adds a new item \"W09 Chicken Wings - $12.50\" to the menu."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* *`tableMode 2`*: switches RestOrRant to Table Mode for the table with table number 2 and displays the list of order items for table 2."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* *`addToOrder W09 1`* (in Table Mode): adds an order of 1x W09 to table 2."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addTables NUMBER_OF_SEATS`, `NUMBER_OF_SEATS` is a parameter which can be used as `addTables 4`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `ITEM_CODE QUANTITY [ITEM_CODE QUANTITY]` can be used as `W09 3 A02 4` or as `W09 3`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[ITEM_CODE QUANTITY]...` can be used as `{nbsp}` (i.e. 0 times), `W09 3`, `W09 3 A02 4` etc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Switching to Restaurant Mode : `restaurantMode`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Changes RestOrRant to Restaurant Mode which allows the user to add tables and update the tables\u0027 statuses."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `restaurantMode`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* The RestOrRant application\u0027s default mode is Restaurant Mode. At start up, the application is already in Restaurant Mode."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* `restaurantMode`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003d\u003d\u003d Switching to Table Mode : `tableMode`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Changes RestOrRant to Table Mode for the table given by the specified table number and displays the list of order items from that table."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Format: `tableMode TABLE_NUMBER`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "****"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* The table with the specified table number must already exist in the restaurant (can be created in Restaurant Mode)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "****"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* `tableMode` 2 +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Switches to Table Mode for table 2 and displays the list of order items from table 2."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003d\u003d\u003d Switching to Menu Mode : `menuMode`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "Changes RestOrRant to Menu Mode in order to edit the menu."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "Format: `menuMode`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "* RestOrRant should not already be in Menu Mode."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding tableList : `addTables`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Adds tableList to the restaurant. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addTables NUMBER_OF_SEATS [NUMBER_OF_SEATS]...`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Command can only be used in Restaurant Mode."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Table number increases from the last added table number."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* There is no limit to the number of tables that can be added."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* `addTables 4`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* `addTables 4 2 4`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all tableList in the restaurant : `listTables`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all tableList in the restaurant as well as their current occupancy. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listTables`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* Command can only be used in Restaurant Mode."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating the table: `updateTable`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the status of the table. +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `updateTable TABLE_NUMBER NEW_OCCUPANCY`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Command can only be used in Restaurant Mode."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks if the specified table exists before updating."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks if the specified `NEW_OCCUPANCY` is greater than 0 and not more than the capacity of the table."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* `updateTable 2 0`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* `updateTable 1 4`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Removing a table : `removeTable`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Removes an existing table in the restaurant. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `removeTable TABLE_NUMBER`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Command can only be used in Restaurant Mode."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks that the table exists."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks that the table is not occupied."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `removeTable 3`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003d\u003d\u003d Adding item(s) to an order: `addToOrder`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Adds the specified item(s) to the order of the current selected table and displays the new list of order items. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "Format: `addToOrder ITEM_CODE QUANTITY [ITEM_CODE QUANTITY]…`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* RestOrRant has to be in Table Mode to use this command (can switch using `tableMode`)."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* Item has to exist in the menu, i.e. item code has to be valid (can be created in Menu Mode)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* If the item is already in the order, the quantity for that item is increased."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* There is no limit to the number of items added."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* `addToOrder W09 2`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "* `addToOrder W09 1 N01 1 C04 2`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a note to an item in an order: `addNote`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a note to an item in the order of the specified table. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addNote TABLE_NUMBER ITEM_CODE NOTE`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Item has to exist both in the menu (i.e. item code has to be valid) and order before the note is added."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* `addNote 1 W09 Less spicy`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting an item from an order: `deleteFromOrder`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes a specified item from the order of the specified table. +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteFromOrder TABLE_NUMBER ITEM_CODE [QUANTITY]`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Item has to exist both in the menu (i.e. item code has to be valid) and order before it is deleted from the order."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* If no quantity is specified, all quantities of the item will be deleted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteFromOrder 1 W09` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes all W09 Chicken Wings from table 1’s order."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteFromOrder 1 W09 1` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Reduces the quantity of W09 Chicken Wings by 1 in table 1’s order."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all the items in an order: `clearOrder`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes all the items ordered by the specified table. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clearOrder TABLE_NUMBER`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* `clearOrder 1`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Marking an item in an order as served: `serve`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Marks the specified item as served for the specified table. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `serve TABLE_NUMBER ITEM_CODE [QUANTITY]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* Item has to exist in both the menu (i.e. item code has to be valid) and order before it is marked as served."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* The quantity served cannot be greater than the ordered quantity of the item."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* If quantity is not specified, the default quantity is 1."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* `serve 1 W09` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the status of table 1’s order with 1 W09 Chicken Wings served."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `serve 5 C04 2` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the status of table 5’s order with 2 C04 Shrimp Fried Rice served."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Checking if table is served : `isTableServed`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Checks if all menu items on the order has been served. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `isTableServed`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* Command can only be used in Table Mode."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks if the table exists."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* `isTableServed` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `Table is fully served`, `Table is not fully served` or `Table is empty`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all items in menu : `printMenu`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the items in the menu currently. +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `printMenu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* “Menu is empty” is printed if there is no item in current menu."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding menu items to the menu : `addToMenu`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Adds the specified item to the menu. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addToMenu ITEM_CODE ITEM_NAME ITEM_PRICE`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bava98"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bava98"
        },
        "content": "* RestOrRant has to be in Mable Mode to use this command (can switch using `menuMode`)."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bava98"
        },
        "content": "* Item code, name and price must be valid (follow the format specified)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bava98"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `addToMenu c/A02 n/French Fries p/2.00` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Adds French Fries with item code A02 and price $2.00 to the menu."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Removing menu items from the menu : `removeFromMenu`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the specified item from the menu. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `removeFromMenu ITEM_CODE ITEM_NAME`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `removeFromMenu c/A02 n/French Fries` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Removes French Fries with item code A02 from the menu."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Checking if item exists in the menu : `itemExists`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Checks if item with the specified item code exists in the menu. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `itemExists ITEM_CODE`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* `itemExists A02` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Checks if item with code A02 exists in the menu."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Calculating the bill of an order : `bill`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Calculates the bill of an order from the specified table. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "Format: `bill TABLE_NUMBER YEAR MONTH DAY`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* Only works in TableMode."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `YEAR`, `MONTH`, `DAY` has to be valid."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "****"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `bill tn/1 y/2019 m/12 d/30` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total price of the order from table 1."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting the most popular item ordered: `getMostPopularItem`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the item on the menu that has the most orders. +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `getMostPopularItem`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `getMostPopularItem` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the most popular item `W09 Chicken Wings`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting the total number of customers : `getTotalCustomers`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total number of customer for the stated day, month or year. +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `getTotalCustomers [YEAR] [MONTH] [DAY]`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* `YEAR`, `MONTH`, `DAY` has to be valid."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* If the stated period has no records, it will inform the user that there is no record."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "* If *no arguments* are included, by default it returns the total number of customers for the *current day*."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* `getTotalCustomers` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total number of customers of the current day `21`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019 m/01 d/01` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total number of customers on the specific day 01/01/2019 `21`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019 m/02` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total number of customers of the month February 2019 `600`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total number of customers of the year 2019 `1200`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting the total revenue : `getTotalRevenue`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total revenue earned by the restaurant by the stated year, month or day. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `getTotalRevenue [YEAR] [MONTH] [DAY]`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `YEAR`, `MONTH`, `DAY` has to be valid."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* If the stated period has no records, it will inform the user that there is no record."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* If *no arguments* are included, by default it returns the total revenue for the *current day*."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `getTotalRevenue` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total revenue of the current day `$45`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019 m/01 d/01` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total revenue on the specific day 01/01/2019 `$45`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019 m/02` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total revenue of the month February 2019 `$7000`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "* `getTotalCustomers y/2019` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Returns the total revenue of the year 2019 `15000`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting all the statistics : `getStatistics`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "Returns all the calculated statistics. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `getStatistics`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* It internally executes all the necessary calculations like:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "E.g. Most popular item, Yearly revenue, Monthly revenue, Recent average revenue."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "* Prints out all the statistics it has been computed."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* `getStatistics` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Returns All the statistics it has computed."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "`WELCOME TO RestOrRant STATISTIC CHART!` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "`Total Revenue` +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "`Year 2018: $10540` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "`Year 2019: $1700` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "  `Jan: $800` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "  `Feb: $900` +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "`Average Monthly Revenue: $850` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "`Total Number of Customers` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "`Year 2018: 20000` +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "`Year 2019: 50` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "  `Jan: 30` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "  `Feb: 20` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "`Average no. of Monthly Customers: 25` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "`Top 3 most popular dish item` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "`-----------------------------------------------------------------` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "  `1. W09 Chicken Wings` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "  `2. W12 Pork Chop Rice` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "  `3. A01 Dumpling Noodles` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "RestOrRant data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous RestOrRant folder."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "* *Changing to RestaurantMode* : `restaurantMode`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add tableList* : `addTable NUMBER_OF_SEATS [NUMBER_OF_SEATS] ...` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addTables 2 4 6 8`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* *Remove table* : `removeTable TABLE_NUMBER` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `removeTable 3`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *Update table* : `updateTable TABLE_NUMBER NEW_OCCUPANCY` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `updateTable 3 2`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* *List tableList* : `listTables`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add items to order* : `addToOrder TABLE_NUMBER ITEM_CODE QUANTITY [ITEM_CODE QUANTITY] …` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addToOrder 5 W09 1 N01 1 C04 2`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add note to order* : `addNote TABLE_NUMBER ITEM_CODE NOTE` +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addNote 1 W09 Less spicy`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete item from order* : `deleteFromOrder TABLE_NUMBER ITEM_CODE [QUANTITY]` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleteFromOrder 1 W09 1`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *View order* : `viewOrder TABLE_NUMBER` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `viewOrder 1`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear order* : `clearOrder TABLE_NUMBER` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `clearOrder 1`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "* *Update item served status* : `serve TABLE_NUMBER ITEM_CODE [QUANTITY]` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `serve 5 C04 2`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* *Table serve status* : `isTableServed`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* *List items in menu* : `printMenu` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add item to Menu* : `addToMenu` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addToMenu c/A02 n/French Fries p/2.00`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* *Remove item from menu* : `removeFromMenu` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `removeFromMenu c/A02 n/French Fries`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* *Check if item exists in the menu* : `itemExists` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `itemExists ITEM_CODE`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "* *Calculate bill of an order* : `bill` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `bill TABLE_NUMBER`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "* *Get most popular item* : `getMostPopularItem` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `getMostPopularItem`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "* *Get total number of customers* : `getTotalCustomers` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `getTotalCustomers [YEAR] [MONTH] [DAY]`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* *Get total revenue* : `getTotalRevenue` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `getTotalRevenue [YEAR] [MONTH] [DAY]`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "* *Get all statistics* : `getStatistics` +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `getStatistics`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 13,
      "bava98": 13,
      "whyjayxp": 26,
      "-": 403
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.storage.JsonMenuStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonOrdersStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonTablesStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.storage.MenuStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.OrdersStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.StatisticsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.TablesStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 1, 0, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing RestOrRant ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrdersStorage ordersStorage \u003d new JsonOrdersStorage(userPrefs.getOrdersFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuStorage menuStorage \u003d new JsonMenuStorage(userPrefs.getMenuFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        StatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        TablesStorage tablesStorage \u003d new JsonTablesStorage(userPrefs.getTablesFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, ordersStorage, menuStorage, statisticsStorage, tablesStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s RestOrRant and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sample data will be used instead if any {@code storage} data file is not found,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * or an empty RestOrRant will be used instead if errors occur when reading from any {@code storage} data file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * TODO: Write the sample RestOrRant files."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cReadOnlyOrders\u003e ordersOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Optional\u003cReadOnlyMenu\u003e menuOptional;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyTables\u003e tablesOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cReadOnlyStatistics\u003e statisticsOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant initialData;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            // addressBookOptional \u003d storage.readRestOrRant();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            ordersOptional \u003d storage.readOrders();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuOptional \u003d storage.readMenu();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            tablesOptional \u003d storage.readTables();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            statisticsOptional \u003d storage.readStatistics();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (!ordersOptional.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "                logger.info(\"Orders data file not found. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": "                initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "            } else if (!menuOptional.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "                logger.info(\"Menu data file not found. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": "                initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (!tablesOptional.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                logger.info(\"Tables data file not found. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            } else if (!statisticsOptional.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                logger.info(\"Statistics data file not found. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                initialData \u003d new RestOrRant(ordersOptional.get(), menuOptional.get(), tablesOptional.get(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        statisticsOptional.get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            // initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            initialData \u003d new RestOrRant();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RestOrRant\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        logger.info(\"Starting RestOrRant \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping RestOrRant ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 13,
      "whyjayxp": 43,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel) \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth \u0026\u0026 windowHeight \u003d\u003d o.windowHeight \u0026\u0026 Objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_MODE \u003d \"Invalid command in current mode!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_MODE_CHANGE \u003d \"Already in the mode!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_TABLE_NUMBER \u003d \"The table number provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)), Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)), versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 18,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 9,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY).registerModule("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    new SimpleModule(\"SimpleModule\").addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 9,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d FXCollections"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            .unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the RestOrRant."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see seedu.address.model.Model#getRestOrRant()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ReadOnlyRestOrRant getRestOrRant();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of menu items"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ObservableList\u003cMenuItem\u003e getFilteredMenuItemList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of order items"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getFilteredOrderItemList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tables"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTable\u003e getFilteredTableList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of daily revenues"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user pref\u0027s RestOrRant menu file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user prefs\u0027 RestOrRant orders file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getOrdersFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user prefs\u0027 RestOrRant tables file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTablesFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the user prefs\u0027 RestOrRant statistics file path."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Selected menu item in the filtered menu item list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no menu item is selected."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @see Model#selectedMenuItemProperty()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Selected order item in the filtered order item list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * null if no order item is selected."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see seedu.address.model.Model#selectedOrderItemProperty()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected table in the filtered table list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no table is selected."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#selectedTableProperty()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cTable\u003e selectedTableProperty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Selected daily revenue in the filtered daily revenue list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * null if no daily revenue is selected."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#selectedDailyRevenueProperty()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Recent bill."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * null if no bill is selected."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#recentBillProperty()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ReadOnlyProperty\u003cBill\u003e recentBillProperty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the selected menu item in the filtered menu item list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedMenuItem(MenuItem)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setSelectedMenuItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the selected order item in the filtered order item list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedOrderItem(OrderItem)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setSelectedOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected table in the filtered table list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedTable(Table)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedTable(Table table);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the selected daily revenue in the filtered daily revenue list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedDailyRevenue(DailyRevenue)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setSelectedDailyRevenue(DailyRevenue dailyRevenue);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the selected bill to be the recent bill."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#setRecentBill(Bill)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setRecentBill(Bill bill);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the recent bill."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see seedu.address.model.Model#getRecentBill()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Bill getRecentBill();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Changes current mode of RestOrRant."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void changeMode(Mode mode);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 52,
      "bava98": 14,
      "whyjayxp": 28,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.parser.RestOrRantParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final RestOrRantParser restOrRantParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    private boolean modeModified;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private boolean menuModified;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private boolean ordersModified;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean tablesModified;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private boolean statisticsModified;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRantParser \u003d new RestOrRantParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        mode \u003d Mode.RESTAURANT_MODE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        // Set modeModified to true whenever the models\u0027 mode is modified."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        model.getRestOrRant().addListener(observable -\u003e modeModified \u003d true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set menuModified to true whenever the models\u0027 RestOrRant\u0027s menu is modified."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        model.getRestOrRant().getMenu().addListener(observable -\u003e menuModified \u003d true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Set ordersModified to true whenever the models\u0027 RestOrRant\u0027s orders is modified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.getRestOrRant().getOrders().addListener(observable -\u003e ordersModified \u003d true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set tablesModified to true whenever the models\u0027 RestOrRant\u0027s tables is modified."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.getRestOrRant().getTables().addListener(observable -\u003e tablesModified \u003d true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // Set billsModified to true whenever the models\u0027 RestOrRant\u0027s bills is modified."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model.getRestOrRant().getStatistics().addListener(observable -\u003e statisticsModified \u003d true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        modeModified \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuModified \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ordersModified \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        tablesModified \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsModified \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            Command command \u003d restOrRantParser.parseCommand(mode, commandText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            commandResult \u003d command.execute(mode, model, history);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (modeModified) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.info(\"Application mode modified, changing UI\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            changeMode(commandResult.newModeStatus());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (menuModified) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Menu modified, saving to file.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "                storage.saveMenu(model.getRestOrRant().getMenu());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (ordersModified) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Orders modified, saving to file.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveOrders(model.getRestOrRant().getOrders());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tablesModified) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Tables modified, saving to file.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveTables(model.getRestOrRant().getTables());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (statisticsModified) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            logger.info(\"Statistics modified, saving to file.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                storage.saveStatistics(model.getRestOrRant().getStatistics());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public void changeMode(Mode mode) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getRestOrRant();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ObservableList\u003cMenuItem\u003e getFilteredMenuItemList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return model.getFilteredMenuItemList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getFilteredOrderItemList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTable\u003e getFilteredTableList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredTableList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.getFilteredDailyRevenueList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return model.getMenuFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getOrdersFilePath();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getTablesFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.getStatisticsFilePath();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return model.selectedMenuItemProperty();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setSelectedMenuItem(MenuItem item) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bava98"
        },
        "content": "        model.setSelectedMenuItem(item);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.selectedOrderItemProperty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedOrderItem(orderItem);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cTable\u003e selectedTableProperty() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.selectedTableProperty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedTable(Table table) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedTable(table);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ReadOnlyProperty\u003cBill\u003e recentBillProperty() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.recentBillProperty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setRecentBill(Bill bill) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model.setRecentBill(bill);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill getRecentBill() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.getRecentBill();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.selectedDailyRevenueProperty();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setSelectedDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model.setSelectedDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 44,
      "bava98": 19,
      "whyjayxp": 28,
      "Qing-Yuan": 10,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Mode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": " * Enum to define current Mode of the Application"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    RESTAURANT_MODE, TABLE_MODE, MENU_MODE, BILL_MODE, STATISTICS_MODE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1,
      "Qing-Yuan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a table to Tables."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTableCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addTable\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds table(s) to the RestOrRant application.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \"Parameters: NUMBER_OF_SEATS [NUMBER_OF_SEATS]...\\n\" + \"Example: \" + COMMAND_WORD + \" 2 1 4\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New table added:\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TABLE_ADDED \u003d \"\\nTable %1$s: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cTableStatus\u003e tableStatusList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddTableCommand to add table specified by the number of seats."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddTableCommand(List\u003cTableStatus\u003e tableStatuses) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tableStatuses);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tableStatusList \u003d tableStatuses;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        TableNumber addedTableNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sbFinalOutput \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (TableStatus tableStatus : tableStatusList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            addedTableNumber \u003d model.addTable(tableStatus);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(addedTableNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sbFinalOutput.append(String.format(MESSAGE_TABLE_ADDED, addedTableNumber.toString(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    tableStatus.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(sbFinalOutput.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof AddTableCommand \u0026\u0026 tableStatusList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(((AddTableCommand) other).tableStatusList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToMenuCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Adds a menu item to the Menu."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class AddToMenuCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addToMenu\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \" + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + PREFIX_CODE + \"CODE \" + PREFIX_NAME + \"NAME \" + PREFIX_PRICE + \"PRICE \" + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + PREFIX_CODE + \"A02 \" + PREFIX_NAME + \"French Fries \" + PREFIX_PRICE + \"2.00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New menu item added: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MENU_ITEM \u003d \"This item already exists in the menu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MODE \u003d \"Incorrect Mode, unable to execute command. Enter menuMode\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final MenuItem toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public AddToMenuCommand(MenuItem item) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(mode, model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!mode.equals(Mode.MENU_MODE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new CommandException(MESSAGE_INCORRECT_MODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (model.hasMenuItem(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MENU_ITEM);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        model.addMenuItem(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //model.updateMode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "                || (other instanceof AddToMenuCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddToMenuCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 50,
      "whyjayxp": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddToOrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Adds an order to Orders."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class AddToOrderCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addToOrder\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds order item(s) to the selected table\u0027s order. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \"Parameters: ITEM_CODE QUANTITY [ITEM_CODE QUANTITY]...\\n\" + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \" W09 2 C18 1 C02 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order items added:\\n%1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER_ITEM \u003d \"Item [%1$s] already exists in table %2$s\u0027s order\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_CODE \u003d \"The item code [%1$s] is invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final List\u003cCode\u003e itemCodes;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final List\u003cInteger\u003e itemQuantities;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Creates an AddToOrderCommand to add order items specified by the item codes and quantities."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public AddToOrderCommand(List\u003cCode\u003e itemCodes, List\u003cInteger\u003e itemQuantities) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(itemCodes, itemQuantities);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.itemCodes \u003d itemCodes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.itemQuantities \u003d itemQuantities;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableNumber tableNumber \u003d model.getSelectedTable().getTableNumber();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 0; i \u003c itemCodes.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            Optional\u003cMenuItem\u003e itemOptional \u003d model.getRestOrRant().getMenu().getItemFromCode(itemCodes.get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (!itemOptional.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_ITEM_CODE, itemCodes.get(i)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            OrderItem orderItem \u003d new OrderItem(tableNumber, itemCodes.get(i), itemQuantities.get(i));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (model.hasOrderItem(orderItem)) { // add order items until encountering a duplicate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                throw new CommandException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        String.format(MESSAGE_DUPLICATE_ORDER_ITEM, itemCodes.get(i), tableNumber.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            model.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            orderItems.add(orderItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredOrderItemList(orderItem -\u003e orderItem.getTableNumber().equals(tableNumber));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateOrders();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, orderItems));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof AddToOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 itemCodes.equals(((AddToOrderCommand) other).itemCodes) \u0026\u0026 itemQuantities"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(((AddToOrderCommand) other).itemQuantities));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 3,
      "whyjayxp": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BillCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Retrieves the Bill for a Table."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bill\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"b\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Retrieves the Bill for a Table. \" + \"No Parameters. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"or \" + COMMAND_ALIAS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_TABLE_DOES_NOT_EXIST \u003d \"This table does not exist.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_TABLE_MISMATCH \u003d \"TableNumber is different from the received table.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_MENUITEM_NOT_PRESENT \u003d \"MenuItem is not received.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MODE \u003d \"Incorrect Mode, unable to execute command. Enter tableMode \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            + \"[TABLE_NUMBER]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static Bill bill;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Table tableToBill;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private float totalBill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Creates a BillCommand to find the total bill of the specified {@code Table}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public BillCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Creates a BillCommand to find the total bill of the specified {@code Table}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public BillCommand(Bill bill) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.bill \u003d bill;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!mode.equals(Mode.TABLE_MODE)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new CommandException(MESSAGE_INCORRECT_MODE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableToBill \u003d model.getSelectedTable();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!model.hasTable(tableToBill)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new CommandException(MESSAGE_TABLE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        ObservableList\u003cOrderItem\u003e orderItemList \u003d model.getFilteredOrderItemList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        bill \u003d calculateBill(orderItemList, model.getRestOrRant().getMenu());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model.setRecentBill(bill);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue dailyRevenue \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                new DailyRevenue(bill.getDay(), bill.getMonth(), bill.getYear(), bill.getTotalBill());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (model.hasDailyRevenue(dailyRevenue)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            updateDailyRevenue(model, bill);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            model.addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        updateStatusOfTable(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateMode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, bill), false, false, Mode.BILL_MODE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Calculates the total bill from the order item list;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates the popularity of a menu item;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates the status of the table;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns a new Bill with a receipt."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Bill calculateBill(ObservableList\u003cOrderItem\u003e orderItemList, ReadOnlyMenu menu) throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        MenuItem menuItem;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Optional\u003cMenuItem\u003e opt;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final StringBuilder receipt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.append(\"Table \").append(tableToBill.getTableNumber()).append(\"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        for (OrderItem orderItem : orderItemList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (!tableToBill.getTableNumber().equals(orderItem.getTableNumber())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new CommandException(MESSAGE_TABLE_MISMATCH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            opt \u003d menu.getItemFromCode(orderItem.getMenuItemCode());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (!opt.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new CommandException(MESSAGE_MENUITEM_NOT_PRESENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            menuItem \u003d opt.get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            //TODO: Update the quantity of the menu item for its popularity"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            //menu.updateMenuItemQuantity(orderItem.getMenuItemCode(), orderItem.getQuantity());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            receipt.append(menuItem.getCode().itemCode)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(\"  \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(menuItem.getName().itemName)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(\"\\n $\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(menuItem.getPrice().itemPrice)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(\"   x \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(orderItem.getQuantity())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            totalBill +\u003d Float.parseFloat(menuItem.getPrice().toString()) * orderItem.getQuantity();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.append(\"Total Bill: $ \").append(totalBill).append(\"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Bill(tableToBill.getTableNumber(), totalBill, receipt.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates the daily revenue."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private void updateDailyRevenue(Model model, Bill bill) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        ObservableList\u003cDailyRevenue\u003e dailyRevenuesList \u003d model.getFilteredDailyRevenueList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        for (DailyRevenue dailyRevenue : dailyRevenuesList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (dailyRevenue.getYear().equals(bill.getYear())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    \u0026\u0026 dailyRevenue.getMonth().equals(bill.getMonth())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    \u0026\u0026 dailyRevenue.getDay().equals(bill.getDay())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                dailyRevenue.addToRevenue(bill);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates the status of table."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateStatusOfTable(Model model) throws CommandException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        TableStatus updatedTableStatus \u003d tableToBill.getTableStatus();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        updatedTableStatus.changeOccupancy(\"0\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Table updatedTable \u003d new Table(tableToBill.getTableNumber(), updatedTableStatus);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model.setTable(tableToBill, updatedTable);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof BillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 tableToBill.equals(((BillCommand) other).tableToBill));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 149,
      "whyjayxp": 6,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ChangeModeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    // TODO: include and update in individual classes, remove once all change mode classes done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode changed to ___________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @param mode    {@code Mode} current mode of the RestOrRant."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        if (isSameMode(mode)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODE_CHANGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateMode();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return generateCommandResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * Checks if mode to change to is same as the current mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @param mode mode to change to."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @return true if mode is same as current mode, otherwise false."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    abstract boolean isSameMode(Mode mode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generate CommandResult specific to each changeModeCommand."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    abstract CommandResult generateCommandResult(); // TODO: for each mode change command insert here"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "Qing-Yuan": 48,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setRestOrRant(new RestOrRant());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateMode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "Qing-Yuan": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "     * @param mode"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model   {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public abstract CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Qing-Yuan": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The application should change mode if not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Mode toMode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toMode \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields including toMode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Mode mode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.toMode \u003d mode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Mode newModeStatus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return toMode;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser) \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toMode \u003d\u003d otherCommandResult.toMode;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, toMode);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 10,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ex\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting RestOrRant as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Qing-Yuan": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "Qing-Yuan": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"hist\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Qing-Yuan": 3,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MenuModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Change the RestOrRant\u0027s mode to {@code Mode.MENU_MODE}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Used to adding, deleting, editing menu items from menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuModeCommand extends ChangeModeCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"menuMode\"; // change to standardize with other modes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"MM\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change to Menu Mode.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode changed to Menu Mode\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public CommandResult generateCommandResult() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, Mode.MENU_MODE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    boolean isSameMode(Mode mode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return mode.equals(Mode.MENU_MODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 23,
      "whyjayxp": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RestaurantModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Change the RestOrRant\u0027s mode to {@code Mode.RESTAURANT_MODE}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Used to add and delete tables from the RestOrRant."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RestaurantModeCommand extends ChangeModeCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restaurantMode\"; // change to standardize with other modes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"RM\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change to Restaurant Mode.\\n\" + \"Example: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode changed to Restaurant Mode\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (isSameMode(mode)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODE_CHANGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setSelectedTable(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredTableList(Model.PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredOrderItemList(Model.PREDICATE_SHOW_ALL_ORDER_ITEMS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateMode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return generateCommandResult();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult generateCommandResult() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, Mode.RESTAURANT_MODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isSameMode(Mode mode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mode.equals(Mode.RESTAURANT_MODE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 26,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TableModeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TABLE_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Change the RestOrRant\u0027s mode to {@code Mode.TABLE_MODE}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Used to add, delete and edit order items for the table and call for bill."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TableModeCommand extends ChangeModeCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tableMode\"; // change to standardize with other modes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"TM\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change to Table Mode for the specified table. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \"Parameters: TABLE_NUMBER\\n\" + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode changed to Table Mode!\\nCurrently on Table %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final TableNumber tableNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Creates a TableModeCommand that changes mode to Table Mode for the table with {@code TableNumber}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableModeCommand(TableNumber tableNumber) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(tableNumber);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (isSameMode(mode) \u0026\u0026 model.getSelectedTable().getTableNumber().equals(tableNumber)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MODE_CHANGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cTable\u003e tableOptional \u003d model.getRestOrRant().getTables().getTableFromNumber(tableNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!tableOptional.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredTableList(Model.PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable(tableOptional.get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredOrderItemList(orderItem -\u003e orderItem.getTableNumber().equals(tableNumber));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateMode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return generateCommandResult();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult generateCommandResult() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tableNumber), false, false, Mode.TABLE_MODE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isSameMode(Mode mode) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return mode.equals(Mode.TABLE_MODE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof TableModeCommand \u0026\u0026 tableNumber"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(((TableModeCommand) other).tableNumber));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 54,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateTableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Updates the status of the table."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateTableCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"updateTable\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the status of the table.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            + \"Parameters: TABLE_NUMBER NEW_OCCUPANCY\\n\" + \"Example: \" + COMMAND_WORD + \" 2 0\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Table status updated: \\nTable%1$s: %2$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TABLE_NUMBER \u003d \"Table %1$s does not exist\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String[] newTableStatus;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an UpdateTableCommand to update the status of the table specified by the table number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateTableCommand(String[] newTableStatusInString) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newTableStatus \u003d newTableStatusInString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Mode mode, Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        TableNumber tableNumber \u003d new TableNumber(newTableStatus[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cTable\u003e optionalTable \u003d model.getRestOrRant().getTables().getTableFromNumber(tableNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!optionalTable.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_TABLE_NUMBER, tableNumber));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        TableStatus updatedTableStatus \u003d optionalTable.get().getTableStatus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        updatedTableStatus.changeOccupancy(newTableStatus[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Table updatedTable \u003d new Table(tableNumber, updatedTableStatus);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setTable(optionalTable.get(), updatedTable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                String.format(MESSAGE_SUCCESS, updatedTable.getTableNumber(), optionalTable.get().getTableStatus()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this || (other instanceof UpdateTableCommand \u0026\u0026 newTableStatus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(((UpdateTableCommand) other).newTableStatus));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 6,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTableCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddTableCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddTableCommandParser implements Parser\u003cAddTableCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code args} of arguments in the context of the AddTableCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddTableCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddTableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] numberOfSeatsInString \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty() || numberOfSeatsInString.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTableStatus\u003e numberOfSeatsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfSeatsInString.length; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!TableStatus.isValidNumberOfSeats(numberOfSeatsInString[i])) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            numberOfSeatsList.add(new TableStatus(\"0/\" + numberOfSeatsInString[i]));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddTableCommand(numberOfSeatsList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToMenuCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.commands.AddToMenuCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Parses input arguments and creates a new AddItemToMenuCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class AddToMenuCommandParser implements Parser\u003cAddToMenuCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemToMenuCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * and returns an AddItemToMenuCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public AddToMenuCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CODE, PREFIX_NAME, PREFIX_PRICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CODE, PREFIX_NAME, PREFIX_PRICE) || !argMultimap.getPreamble()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToMenuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Code code \u003d ParserUtil.parseCode(argMultimap.getValue(PREFIX_CODE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem menuItem \u003d new MenuItem(name, code, price);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new AddToMenuCommand(menuItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 33,
      "whyjayxp": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToOrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.AddToOrderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Parses input arguments and creates a new AddToOrderCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class AddToOrderCommandParser implements Parser\u003cAddToOrderCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddToOrderCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * and returns an AddToOrderCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public AddToOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String[] itemDetails \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (trimmedArgs.isEmpty() || itemDetails.length % 2 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 0; i \u003c itemDetails.length - 1; i +\u003d 2) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            itemCodes.add(ParserUtil.parseCode(itemDetails[i]));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            itemQuantities.add(ParserUtil.parseQuantity(itemDetails[i + 1]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new AddToOrderCommand(itemCodes, itemQuantities);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Arrays.stream(prefixes).flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static String extractArgumentValue(String argsString, PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 5,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Prefix PREFIX_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Prefix PREFIX_TABLENUMBER \u003d new Prefix(\"tn/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 4,
      "bava98": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    T parse(String userInput) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 2,
      "whyjayxp": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_QUANTITY \u003d \"Quantity is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Parses {@code quantity} into an integer and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws ParseException if the specified quantity is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static int parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedQuantity)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Parses a {@code String code} into a {@code Code}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static Code parseCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!Code.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new ParseException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new Code(trimmedCode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Parses a {@code String day} into a {@code Day}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Day.isValidDay(trimmedDay)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Day(trimmedDay);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new ParseException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Month(trimmedMonth);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new ParseException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Parses a {@code String tableNumber} into a {@code TableNumber}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws ParseException if the given {@code tableNumber} is invalid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static TableNumber parseTableNumber(String tableNumber) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(tableNumber);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String trimmedTableNumber \u003d tableNumber.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!TableNumber.isValidTableNumber(trimmedTableNumber)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new ParseException(TableNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new TableNumber(trimmedTableNumber);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 27,
      "bava98": 18,
      "whyjayxp": 29,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RestOrRantParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.AddTableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.commands.AddToMenuCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.AddToOrderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.BillCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.MenuModeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.RestaurantModeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.TableModeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.UpdateTableCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class RestOrRantParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Command parseCommand(Mode mode, String userInput) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // General commands that work in all modes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case RestaurantModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RestaurantModeCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case RestaurantModeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RestaurantModeCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case MenuModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new MenuModeCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case MenuModeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new MenuModeCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case TableModeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new TableModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case TableModeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TableModeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Commands that work in Restaurant Mode"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (mode !\u003d Mode.RESTAURANT_MODE) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddTableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case UpdateTableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (mode !\u003d Mode.RESTAURANT_MODE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UpdateTableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Commands that work in Menu Mode"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case AddToMenuCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (mode !\u003d Mode.MENU_MODE) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new AddToMenuCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Commands that work in Table Mode"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        case AddToOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (mode !\u003d Mode.TABLE_MODE) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new AddToOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        case BillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (mode !\u003d Mode.TABLE_MODE) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return new BillCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        case BillCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (mode !\u003d Mode.TABLE_MODE) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_MODE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return new BillCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 17,
      "bava98": 19,
      "whyjayxp": 16,
      "Qing-Yuan": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TableModeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.TableModeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Parses input arguments and creates a new TableModeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class TableModeCommandParser implements Parser\u003cTableModeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TableModeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * and returns an TableModeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableModeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            TableNumber tableNumber \u003d ParserUtil.parseTableNumber(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new TableModeCommand(tableNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TableModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateTableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UpdateTableCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new UpdateTableCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UpdateTableCommandParser implements Parser\u003cUpdateTableCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateTableCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an UpdateTableCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UpdateTableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] splitArgs \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty() || splitArgs.length !\u003d 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateTableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new UpdateTableCommand(splitArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Predicate\u003cMenuItem\u003e PREDICATE_SHOW_ALL_MENU_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Predicate\u003cOrderItem\u003e PREDICATE_SHOW_ALL_ORDER_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cTable\u003e PREDICATE_SHOW_ALL_TABLES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Predicate\u003cDailyRevenue\u003e PREDICATE_SHOW_ALL_DAILY_REVENUE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user prefs\u0027 Orders file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getOrdersFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the user prefs\u0027 Orders file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setOrdersFilePath(Path ordersFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user pref\u0027s Menu file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the user pref\u0027s Menu file path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setMenuFilePath(Path menuFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user prefs\u0027 Tables file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getTablesFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the user pref\u0027s Tables file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setTablesFilePath(Path tablesFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the user prefs\u0027 statistics file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the user pref\u0027s statistics file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setStatisticsFilePath(Path statisticsFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the RestOrRant"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ReadOnlyRestOrRant getRestOrRant();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces RestOrRant data with the data in {@code restOrRant}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setRestOrRant(ReadOnlyRestOrRant restOrRant);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Notifies the listeners that the RestOrRant (mode) has been modified."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void updateMode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a table with the same identity as {@code table} exists in the RestOrRant\u0027s Tables."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasTable(Table table);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given table from Tables."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table must  exist in the Tables."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTable(Table table);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given table to Tables."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code table} must not already exist in Tables."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTable(Table table);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the table with given TableNumber to Tables."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code table} must not already exist in Tables"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns TableNumber of table added."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    TableNumber addTable(TableStatus tableStatus);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given table {@code target} with {@code editedTable}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exisdt in the RestOrRant\u0027s Tables."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table identity og {@code editedTable} must not be the same as  another existing table in Tables."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void setTable(Table target, Table editedTable);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the filtered table list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTable\u003e getFilteredTableList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered table list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null/"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredTableList(Predicate\u003cTable\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selected person in the filtered table list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no table is selected."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyProperty\u003cTable\u003e selectedTableProperty();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the selected table in the filtered table list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no table is selected."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    Table getSelectedTable();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected table in the filtered table list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param table"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void setSelectedTable(Table table);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies the listeners that the RestOrRant\u0027s tables has been modified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateTables();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if an order item with the same identity as {@code orderItem} exists in the RestOrRant\u0027s Orders."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    boolean hasOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Deletes the given order item from Orders."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item must exist in the RestOrRant\u0027s Orders."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void deleteOrderItem(OrderItem target);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds the given order item to Orders."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code orderItem} must not already exist in the RestOrRant\u0027s Orders."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void addOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces the given order item {@code target} with {@code editedOrderItem}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code target} must exist in the RestOrRant\u0027s orders."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item identity of {@code editedOrderItem} must not be the same as another existing order item in Orders."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setOrderItem(OrderItem target, OrderItem editedOrderItem);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the filtered order item list"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getFilteredOrderItemList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Updates the filter of the filtered order item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void updateFilteredOrderItemList(Predicate\u003cOrderItem\u003e predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Selected person in the filtered order item list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * null if no order item is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the selected order item in the filtered order item list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * null if no order item is selected."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    OrderItem getSelectedOrderItem();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the selected order item in the filtered order item list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void setSelectedOrderItem(OrderItem orderItem);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Notifies the listeners that the RestOrRant orders has been modified to update the storage."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void updateOrders();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if a daily revenue with the same identity as {@code dailyRevenue} exists in the statistics."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    boolean hasDailyRevenue(DailyRevenue dailyRevenue);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Deletes the given daily revenue item from Statistics."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The daily revenue must exist in the RestOrRant\u0027s Statistics."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void deleteDailyRevenue(DailyRevenue target);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Adds the given daily revenue to the daily revenue list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void addDailyRevenue(DailyRevenue dailyRevenue);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the given daily revenue {@code target} with {@code editedDailyRevenue}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * {@code target} must exist in the daily revenue list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setDailyRevenue(DailyRevenue target, DailyRevenue editedDailyRevenue);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns an unmodifiable view of the filtered daily revenue list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates the filter of the filtered daily revenue list to filter by the given {@code predicate}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void updateFilteredDailyRevenueList(Predicate\u003cDailyRevenue\u003e predicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Selected daily revenue in the daily revenue list."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * null if no daily revenue is selected."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the selected daily revenue in the filtered daily revenue list."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * null if no DailyRevenue is selected."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    DailyRevenue getSelectedDailyRevenue();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the selected dailyRevenue in the filtered daily revenue list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setSelectedDailyRevenue(DailyRevenue dailyRevenue);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Get the DailyRevenue list"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ObservableList\u003cDailyRevenue\u003e getDailyRevenueList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Recent bill."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * null if no bill is selected."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ReadOnlyProperty\u003cBill\u003e recentBillProperty();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the recent Bill."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Bill getRecentBill();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the selected Bill to be the recent bill."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void setRecentBill(Bill bill);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Notifies the listeners that the RestOrRant statistics has been modified to update the storage."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void updateStatistics();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if a menu item with the same identity as {@code menuItem} exists in the menu."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bava98"
        },
        "content": "    boolean hasMenuItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Deletes the given menu item."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The menu item must exist in the menu."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void deleteMenuItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Adds the given menu item to the menu."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code menuItem} must not already exist in the menu."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void addMenuItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Replaces the given menu item {@code target} with {@code editedItem}."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code target} must exist in the menu."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing menu item in the menu."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void setMenuItem(MenuItem target, MenuItem editedItem);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns an unmodifiable view of the filtered menu item list"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ObservableList\u003cMenuItem\u003e getFilteredMenuItemList();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Updates the filter of the filtered menu item list to filter by the given {@code predicate}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void updateFilteredMenuItemList(Predicate\u003cMenuItem\u003e predicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Selected menu item in the menu item list."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * null if no menu item is selected."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns the selected menu item in the filtered menu item list."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * null if no person is selected."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bava98"
        },
        "content": "    MenuItem getSelectedMenuItem();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Sets the selected menu item in the filtered menu item list."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void setSelectedMenuItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Notifies the listeners that the RestOrRant menu has been modified to update the storage."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void updateMenu();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 59,
      "bava98": 65,
      "whyjayxp": 72,
      "Qing-Yuan": 1,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.exceptions.MenuItemNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.exception.BillNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.exception.DailyRevenueNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.exceptions.TableNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final RestOrRant restOrRant;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final FilteredList\u003cOrderItem\u003e filteredOrderItems;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final SimpleObjectProperty\u003cOrderItem\u003e selectedOrderItem \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final FilteredList\u003cMenuItem\u003e filteredMenuItems;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final SimpleObjectProperty\u003cMenuItem\u003e selectedMenuItem \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cTable\u003e filteredTableList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cTable\u003e selectedTable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final FilteredList\u003cDailyRevenue\u003e filteredDailyRevenueList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final SimpleObjectProperty\u003cDailyRevenue\u003e selectedDailyRevenue \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final SimpleObjectProperty\u003cBill\u003e recentBill \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Initializes a ModelManager with the given restOrRant and userPrefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ModelManager(ReadOnlyRestOrRant restOrRant, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(restOrRant, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        logger.fine(\"Initializing with Menu: \" + restOrRant + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.restOrRant \u003d new RestOrRant(restOrRant);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        filteredOrderItems \u003d new FilteredList\u003c\u003e(this.restOrRant.getOrders().getOrderItemList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        filteredOrderItems.addListener(this::ensureSelectedOrderItemIsValid);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        filteredMenuItems \u003d new FilteredList\u003c\u003e(this.restOrRant.getMenu().getMenuItemList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        filteredMenuItems.addListener(this::ensureSelectedMenuItemIsValid);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTableList \u003d new FilteredList\u003c\u003e(this.restOrRant.getTables().getTableList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTableList.addListener(this::ensureSelectedTableIsValid);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        filteredDailyRevenueList \u003d new FilteredList\u003c\u003e(this.restOrRant.getStatistics().getDailyRevenueList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        filteredDailyRevenueList.addListener(this::ensureSelectedDailyRevenueIsValid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this(new RestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return userPrefs.getOrdersFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrdersFilePath(Path ordersFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(ordersFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setOrdersFilePath(ordersFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return userPrefs.getMenuFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(menuFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setMenuFilePath(menuFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return userPrefs.getTablesFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setTablesFilePath(Path tablesFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(tablesFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setTablesFilePath(tablesFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return userPrefs.getStatisticsFilePath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setStatisticsFilePath(Path statsFilePath) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(statsFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        userPrefs.setStatisticsFilePath(statsFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RestOrRant \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return restOrRant;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setRestOrRant(ReadOnlyRestOrRant restOrRant) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.restOrRant.resetData(restOrRant.getOrders(), restOrRant.getMenu(), restOrRant.getTables(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                restOrRant.getStatistics());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateMode() { // change mode"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.indicateModified();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tables \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasTable(Table table) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(table);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return restOrRant.getTables().hasTable(table);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTable(Table table) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        restOrRant.getTables().removeTable(table);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTable(Table table) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        restOrRant.getTables().addTable(table);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredTableList(PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableNumber addTable(TableStatus tableStatus) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        TableNumber addedTableNumber \u003d restOrRant.getTables().addTable(tableStatus);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredTableList(PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return addedTableNumber;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTable(Table target, Table editedTable) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTable);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        restOrRant.getTables().setTable(target, editedTable);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateTables() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getTables().indicateModified();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Table List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Table} backed by the internal list of {@code Tables}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTable\u003e getFilteredTableList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredTableList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredTableList(Predicate\u003cTable\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTableList.setPredicate(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected table \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyProperty\u003cTable\u003e selectedTableProperty() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedTable;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public Table getSelectedTable() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectedTable.getValue();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedTable(Table table) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (table !\u003d null \u0026\u0026 !filteredTableList.contains(table)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TableNotFoundException();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedTable.setValue(table);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedTable} is a valid table in {@code filteredTable}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void ensureSelectedTableIsValid(ListChangeListener.Change\u003c? extends Table\u003e change) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedTable.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                //null is always a valid selected order item, so we do not need to check that it is valid anymore"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedTableReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedTable.getValue());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedTableReplaced) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                //Update selectedTable to its new value."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedTable.getValue());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedTable.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedTableRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    .anyMatch(removedTable -\u003e selectedTable.getValue().isSameTable(removedTable));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedTableRemoved) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                // Select the table that came before it in the list,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                // or clear the selection if there is no such table."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedTable.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(orderItem);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return restOrRant.getOrders().hasOrderItem(orderItem);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteOrderItem(OrderItem target) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getOrders().removeOrderItem(target);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getOrders().addOrderItem(orderItem);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        updateFilteredOrderItemList(PREDICATE_SHOW_ALL_ORDER_ITEMS);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(target, editedOrderItem);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getOrders().setOrderItem(target, editedOrderItem);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateOrders() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getOrders().indicateModified();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order Item List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code OrderItem} backed by the internal list of"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code Orders}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return filteredOrderItems;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateFilteredOrderItemList(Predicate\u003cOrderItem\u003e predicate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        filteredOrderItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected order item \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return selectedOrderItem;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItem getSelectedOrderItem() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return selectedOrderItem.getValue();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (orderItem !\u003d null \u0026\u0026 !filteredOrderItems.contains(orderItem)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        selectedOrderItem.setValue(orderItem);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(menuItem);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return restOrRant.getMenu().hasMenuItem(menuItem);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void deleteMenuItem(MenuItem target) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bava98"
        },
        "content": "        restOrRant.getMenu().removeMenuItem(target);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bava98"
        },
        "content": "        restOrRant.getMenu().addMenuItem(menuItem);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bava98"
        },
        "content": "        updateFilteredMenuItemList(PREDICATE_SHOW_ALL_MENU_ITEMS);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItem(MenuItem target, MenuItem editedItem) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bava98"
        },
        "content": "        restOrRant.getMenu().setMenuItem(target, editedItem);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateMenu() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getMenu().indicateModified();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered MenuItem List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code MenuItem} backed by the internal list of"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code restOrRant}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ObservableList\u003cMenuItem\u003e getFilteredMenuItemList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return filteredMenuItems;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void updateFilteredMenuItemList(Predicate\u003cMenuItem\u003e predicate) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bava98"
        },
        "content": "        filteredMenuItems.setPredicate(predicate);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected menu item \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return selectedMenuItem;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItem getSelectedMenuItem() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return selectedMenuItem.getValue();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setSelectedMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (menuItem !\u003d null \u0026\u0026 !filteredMenuItems.contains(menuItem)) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new MenuItemNotFoundException();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bava98"
        },
        "content": "        selectedMenuItem.setValue(menuItem);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures {@code selectedOrderItem} is a valid order item in {@code filteredOrderItems}."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private void ensureSelectedOrderItemIsValid(ListChangeListener.Change\u003c? extends OrderItem\u003e change) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (selectedOrderItem.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                // null is always a valid selected order item, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            boolean wasSelectedOrderItemReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    .getRemovedSize() \u0026\u0026 change.getRemoved().contains(selectedOrderItem.getValue());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (wasSelectedOrderItemReplaced) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                // Update selectedOrderItem to its new value."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedOrderItem.getValue());"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                selectedOrderItem.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            boolean wasSelectedOrderItemRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    .anyMatch(removedOrderItem -\u003e selectedOrderItem.getValue().isSameOrderItem(removedOrderItem));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (wasSelectedOrderItemRemoved) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                // Select the order item that came before it in the list,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                // or clear the selection if there is no such order item."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                selectedOrderItem.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Ensures {@code selectedMenuItem} is a valid menu item in {@code filteredMenuItems}."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private void ensureSelectedMenuItemIsValid(ListChangeListener.Change\u003c? extends MenuItem\u003e change) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (selectedMenuItem.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bava98"
        },
        "content": "                // null is always a valid selected menu item, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            boolean wasSelectedMenuItemReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    .getRemovedSize() \u0026\u0026 change.getRemoved().contains(selectedMenuItem.getValue());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (wasSelectedMenuItemReplaced) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bava98"
        },
        "content": "                // Update selectedMenuItem to its new value."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bava98"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedMenuItem.getValue());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bava98"
        },
        "content": "                selectedMenuItem.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "bava98"
        },
        "content": "            boolean wasSelectedMenuItemRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    .anyMatch(removedMenuItem -\u003e selectedMenuItem.getValue().isSameMenuItem(removedMenuItem));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (wasSelectedMenuItemRemoved) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bava98"
        },
        "content": "                // Select the menu item that came before it in the list,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "bava98"
        },
        "content": "                // or clear the selection if there is no such menu item."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "bava98"
        },
        "content": "                selectedMenuItem.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(dailyRevenue);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return restOrRant.getStatistics().hasDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void deleteDailyRevenue(DailyRevenue target) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        restOrRant.getStatistics().removeDailyRevenue(target);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        restOrRant.getStatistics().addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        updateFilteredDailyRevenueList(PREDICATE_SHOW_ALL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return restOrRant.getStatistics().getDailyRevenueList();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue(DailyRevenue target, DailyRevenue editedItem) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        restOrRant.getStatistics().setDailyRevenue(target, editedItem);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        restOrRant.getStatistics().indicateModified();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Daily revenue List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code DailyRevenue} backed by the internal list of {@code"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * DailyRevenueList}"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList() {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return filteredDailyRevenueList;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void updateFilteredDailyRevenueList(Predicate\u003cDailyRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        filteredDailyRevenueList.setPredicate(predicate);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected daily revenue \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return selectedDailyRevenue;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public DailyRevenue getSelectedDailyRevenue() {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return selectedDailyRevenue.getValue();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setSelectedDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (dailyRevenue !\u003d null \u0026\u0026 !filteredDailyRevenueList.contains(dailyRevenue)) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new DailyRevenueNotFoundException();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        selectedDailyRevenue.setValue(dailyRevenue);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Ensures {@code selectedDailyRevenue} is a valid daily revenue in {@code filteredDailyRevenue}."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private void ensureSelectedDailyRevenueIsValid(ListChangeListener.Change\u003c? extends DailyRevenue\u003e change) {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (selectedDailyRevenue.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                //null is always a valid selected daily revenue, so we do not need to check that it is valid anymore"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            boolean wasSelectedDailyRevenueReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedDailyRevenue.getValue());"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (wasSelectedDailyRevenueReplaced) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                //Update selectedDailyRevenue to its new value."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedDailyRevenue.getValue());"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                selectedDailyRevenue.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected bill \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ReadOnlyProperty\u003cBill\u003e recentBillProperty() {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return recentBill;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill getRecentBill() {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return recentBill.getValue();"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setRecentBill(Bill bill) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (bill \u003d\u003d null) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new BillNotFoundException();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        recentBill.setValue(bill);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return restOrRant.equals(other.restOrRant) \u0026\u0026 userPrefs.equals(other.userPrefs) \u0026\u0026 filteredOrderItems"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(other.filteredOrderItems) \u0026\u0026 Objects"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(selectedOrderItem.get(), other.selectedOrderItem.get()) \u0026\u0026 filteredMenuItems"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(other.filteredMenuItems) \u0026\u0026 Objects.equals(selectedMenuItem.get(), other.selectedMenuItem.get())"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 filteredTableList.equals(other.filteredTableList) \u0026\u0026 Objects"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .equals(selectedTable.get(), other.selectedTable.get()) \u0026\u0026 filteredDailyRevenueList"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .equals(other.filteredDailyRevenueList)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedDailyRevenue.get(), other.selectedDailyRevenue.get())"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 Objects.equals(recentBill.get(), other.recentBill.get());"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 121,
      "bava98": 71,
      "whyjayxp": 122,
      "-": 279
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyRestOrRant.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Unmodifiable view of RestOrRant"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public interface ReadOnlyRestOrRant extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ReadOnlyMenu getMenu();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ReadOnlyOrders getOrders();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ReadOnlyStatistics getStatistics();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the table list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyTables getTables();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 2,
      "bava98": 3,
      "whyjayxp": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getOrdersFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTablesFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1,
      "whyjayxp": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/RestOrRant.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Tables;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class RestOrRant implements ReadOnlyRestOrRant {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Menu menu;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Orders orders;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Tables tables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu \u003d new Menu();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders \u003d new Orders();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tables \u003d new Tables();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRant() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Creates an RestOrRant using the data in the {@code toBeCopied}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRant(ReadOnlyRestOrRant toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        resetData(toBeCopied.getOrders(), toBeCopied.getMenu(), toBeCopied.getTables(), toBeCopied.getStatistics());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Creates an RestOrRant using the data specified in {@code copyOrders, copyMenu, copyTables} // TODO: add more"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * parameters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRant(ReadOnlyOrders copyOrders, ReadOnlyMenu copyMenu, ReadOnlyTables copyTables,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                      ReadOnlyStatistics copyStatistics) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        resetData(copyOrders, copyMenu, copyTables, copyStatistics);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Resets the existing data of this {@code RestOrRant} with new data from {@code newOrders, newMenu, newTables}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * //TODO: add more parameters"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData(ReadOnlyOrders newOrders, ReadOnlyMenu newMenu, ReadOnlyTables newTables,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                          ReadOnlyStatistics newStatistics) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(newOrders, newMenu, newTables, newStatistics);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.setOrderItems(newOrders.getOrderItemList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.setMenuItems(newMenu.getMenuItemList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tables.setTables(newTables.getTableList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.setDailyRevenues(newStatistics.getDailyRevenueList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the RestOrRant has been modified."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orders.getOrderItemList().size() + \" order items\" + \"\\n\" + menu.getMenuItemList().size() + \" menu items\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                + \"\\n\" + statistics.getDailyRevenueList().size() + \" daily revenues recorded\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Orders getOrders() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Menu getMenu() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tables getTables() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return tables;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof RestOrRant // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 orders.equals(((RestOrRant) other).orders) \u0026\u0026 menu.equals(((RestOrRant) other).menu) \u0026\u0026 tables"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .equals(((RestOrRant) other).tables)); // TODO: Add statistics check here too."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return Objects.hash(orders, menu);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 12,
      "bava98": 15,
      "whyjayxp": 28,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Path menuFilePath \u003d Paths.get(\"data\", \"menu.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Path ordersFilePath \u003d Paths.get(\"data\", \"orders.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path tablesFilePath \u003d Paths.get(\"data\", \"tables.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Path statisticsFilePath \u003d Paths.get(\"data\", \"statistics.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setMenuFilePath(newUserPrefs.getMenuFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setOrdersFilePath(newUserPrefs.getOrdersFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setTablesFilePath(newUserPrefs.getTablesFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        setStatisticsFilePath(newUserPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(menuFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.menuFilePath \u003d menuFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return ordersFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrdersFilePath(Path ordersFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(ordersFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.ordersFilePath \u003d ordersFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tablesFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTablesFilePath(Path tablesFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tablesFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tablesFilePath \u003d tablesFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return statisticsFilePath;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setStatisticsFilePath(Path statsFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(statsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.statisticsFilePath \u003d statsFilePath;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return guiSettings.equals(o.guiSettings) \u0026\u0026 menuFilePath.equals(o.menuFilePath) \u0026\u0026 ordersFilePath"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(o.ordersFilePath) \u0026\u0026 tablesFilePath.equals(o.tablesFilePath) \u0026\u0026 statisticsFilePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(o.statisticsFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Objects.hash(guiSettings, menuFilePath, ordersFilePath, tablesFilePath, statisticsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        sb.append(\"\\nLocal data file location for menu : \" + menuFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        sb.append(\"\\nLocal data file location for orders: \" + ordersFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location for tables: \" + tablesFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(\"\\nLocal data file lovation for statistics: \" + statisticsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 6,
      "bava98": 7,
      "whyjayxp": 26,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/Code.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a Menu Item\u0027s code in the menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \"Item codes should be in the format \u003cuppercase alphabet\u003e\u003cdouble digit integer\u003e, and it should not be \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    + \"blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The first character of the item code must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[A-Z][0-9][0-9]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public final String itemCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Constructs a {@code Code}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param code A valid code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        itemCode \u003d code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static boolean isValidCode(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemCode;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "                || (other instanceof Code // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 itemCode.equals(((Code) other).itemCode)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemCode.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 58,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/Menu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "// methods"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class Menu implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final UniqueMenuItemList menuItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItems \u003d new UniqueMenuItemList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Menu() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Creates an RestOrRant using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Menu(ReadOnlyMenu toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Replaces the contents of the menu list with {@code menuItems}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code menuItems} must not contain duplicate persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItems(List\u003cMenuItem\u003e menuItems) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.menuItems.setMenuItems(menuItems);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Resets the existing data of this {@code RestOrRant} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void resetData(ReadOnlyMenu newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        setMenuItems(newData.getMenuItemList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //// menu item-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if a menu item with the same identity as {@code menuItem} exists in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(menuItem);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItems.contains(menuItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Adds a menu item to the menu."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The menu item must not already exist in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem(MenuItem item) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItems.add(item);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Replaces the given menu item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The item identity of {@code editedItem} must not be the same as another existing menu item in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItem(MenuItem target, MenuItem editedItem) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(editedItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItems.setMenuItem(target, editedItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Removes {@code key} from this {@code RestOrRant}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code key} must exist in the menu."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void removeMenuItem(MenuItem key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItems.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Given the menu item\u0027s {@code Code code}, returns the MenuItem with the corresponding code."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Optional\u003cMenuItem\u003e getItemFromCode(Code code) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Iterator\u003cMenuItem\u003e iterator \u003d menuItems.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": "            MenuItem menuItem \u003d iterator.next();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (menuItem.getCode().equals(code)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bava98"
        },
        "content": "                return Optional.of(menuItem);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Name getNameFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItem.getName();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Code getCodeFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItem.getCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Price getPriceFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItem.getPrice();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bava98"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Notifies listeners that the restOrRant has been modified."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void indicateModified() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bava98"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItems.asUnmodifiableObservableList().size() + \" menu items\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ObservableList\u003cMenuItem\u003e getMenuItemList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bava98"
        },
        "content": "                || (other instanceof Menu) // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 menuItems.equals(((Menu) other).menuItems);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuItems.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 163,
      "whyjayxp": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/MenuItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a MenuItem in the menu."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    private final Address address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //  private int quantity; TODO: update qty method (get from beatrice)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItem(Name name, Code code, Price price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(name, code, price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    public Address getAddress() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //        return address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if both menu items of the same name have both identity fields that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * This defines a weaker notion of equality between two menu items."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean isSameMenuItem(MenuItem otherItem) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return otherItem !\u003d null \u0026\u0026 otherItem.getName().equals(getName()) \u0026\u0026 (otherItem.getCode().equals(getCode()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if both menu items have the same identity and data fields."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!(other instanceof MenuItem)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem otherItem \u003d (MenuItem) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return otherItem.getName().equals(getName()) \u0026\u0026 otherItem.getCode().equals(getCode()) \u0026\u0026 otherItem.getPrice()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(getPrice());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return Objects.hash(name, code, price);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": "                .append(\" Code: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "                .append(getCode())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "                .append(getPrice());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 102,
      "whyjayxp": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a Menu Item\u0027s name in the menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \"Item names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The first character of the item name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public final String itemName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        itemName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 itemName.equals(((Name) other).itemName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 9,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/Price.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a Menu Item\u0027s price in the menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \"Item prices should be in the format \u003cinteger\u003e\u003c.\u003e\u003cdouble digit integer\u003e\" + \", and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The first character of the item code must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * None of the characters must contain alphabets or symbols (except the period)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * else is not a valid price input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\d+\\\\.\\\\d{2})\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public final String itemPrice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param price A valid code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        itemPrice \u003d price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemPrice;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 itemPrice.equals(((Price) other).itemPrice)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return itemPrice.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 59,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/ReadOnlyMenu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Unmodifiable view of Menu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "public interface ReadOnlyMenu extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns an unmodifiable view of the menu items list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    ObservableList\u003cMenuItem\u003e getMenuItemList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Optional\u003cMenuItem\u003e getItemFromCode(Code code);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Name getNameFromItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Code getCodeFromItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Price getPriceFromItem(MenuItem menuItem);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 24,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/UniqueMenuItemList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.exceptions.DuplicateMenuItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.exceptions.MenuItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": " * A list of menu items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": " * A menu item is considered unique by comparing using {@code MenuItem#isSameMenuItem(MenuItem)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " * As such, adding and updating of menu items uses MenuItem#isSameMenuItem(MenuItem) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": " * so as to ensure that the menu item being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": " * UniqueMenuItemList. However, the removal of a menu item uses MenuItem#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": " * @see MenuItem#isSameMenuItem(MenuItem)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class UniqueMenuItemList implements Iterable\u003cMenuItem\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final ObservableList\u003cMenuItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final ObservableList\u003cMenuItem\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean contains(MenuItem toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMenuItem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Adds a menu item to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The menu item must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void add(MenuItem toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new DuplicateMenuItemException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Replaces the menu item {@code target} in the list with {@code editedItem}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The menu item identity of {@code editedItem} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItem(MenuItem target, MenuItem editedItem) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(target, editedItem);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new MenuItemNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!target.isSameMenuItem(editedItem) \u0026\u0026 contains(editedItem)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new DuplicateMenuItemException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "        internalList.set(index, editedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Removes the equivalent menu item from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * The menu item must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void remove(MenuItem toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new MenuItemNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItems(UniqueMenuItemList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Replaces the contents of this list with {@code items}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * {@code items} must not contain duplicate persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setMenuItems(List\u003cMenuItem\u003e items) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(items);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!menuItemsAreUnique(items)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new DuplicateMenuItemException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": "        internalList.setAll(items);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ObservableList\u003cMenuItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Iterator\u003cMenuItem\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bava98"
        },
        "content": "                || (other instanceof UniqueMenuItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMenuItemList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns true if {@code items} contains only unique menu items."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private boolean menuItemsAreUnique(List\u003cMenuItem\u003e items) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bava98"
        },
        "content": "            for (int j \u003d i + 1; j \u003c items.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "                if (items.get(i).isSameMenuItem(items.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 129,
      "whyjayxp": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/exceptions/DuplicateMenuItemException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Signals that the operation will result in duplicate OrderItems (OrderItems are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class DuplicateMenuItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public DuplicateMenuItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(\"Operation would result in duplicate menu items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/menu/exceptions/MenuItemNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Signals that the operation is unable to find the specified menu item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Represents an order item in an Order from the RestOrRant."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItem {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final TableNumber tableNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Code menuItemCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final int quantityOrdered; // TODO: implement ItemStatus and change type, quantity part of status"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * TODO: create constructor with default status as unserved"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItem(TableNumber tableNumber, Code menuItemCode, int quantityOrdered) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(tableNumber, menuItemCode, quantityOrdered);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.menuItemCode \u003d menuItemCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.quantityOrdered \u003d quantityOrdered;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableNumber getTableNumber() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Code getMenuItemCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return menuItemCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    } // TODO: get the individual menu item details by calling from model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return quantityOrdered;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if both order items have the same menu item code and table number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * This defines a weaker notion of equality between two order items."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean isSameOrderItem(OrderItem otherOrderItem) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (otherOrderItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return otherOrderItem !\u003d null \u0026\u0026 otherOrderItem.getTableNumber().equals(getTableNumber()) \u0026\u0026 otherOrderItem"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .getMenuItemCode().equals(getMenuItemCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if both order items have the same table number, menu item code and quantity ordered."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * This defines a stronger notion of equality between two order items."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!(other instanceof OrderItem)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem otherOrderItem \u003d (OrderItem) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return isSameOrderItem(otherOrderItem) \u0026\u0026 otherOrderItem.getQuantity() \u003d\u003d getQuantity();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Objects.hash(tableNumber, menuItemCode, String.valueOf(quantityOrdered));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        builder.append(\"[Table \").append(getTableNumber()).append(\"] \").append(getMenuItemCode())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .append(\" | Qty Ordered: \").append(getQuantity());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Orders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Wraps all order-related data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Duplicates are not allowed (by .isSameOrderItem comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class Orders implements ReadOnlyOrders {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final UniqueOrderItemList orderItems;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Orders() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Creates a new instance of RestOrRant orders using the order items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Orders(ReadOnlyOrders toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces the contents of the order item list with {@code orderItems}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code orderItems} must not contain duplicate order items."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.orderItems.setOrderItems(orderItems);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Resets the existing data of this RestOrRant\u0027s {@code Orders} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData(ReadOnlyOrders newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setOrderItems(newData.getOrderItemList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //// order item-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if a order item with the same identity as {@code orderItem} exists in the RestOrRant orders."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(orderItem);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orderItems.contains(orderItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds an order item to the RestOrRant\u0027s orders."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item must not already exist in the orders."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(orderItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces the given order item {@code target} in the list with {@code editedOrderItem}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code target} must exist in the RestOrRant\u0027s orders."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item identity of {@code editedOrderItem} must not be the same as another existing order item in orders."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(editedOrderItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.setOrderItem(target, editedOrderItem);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Removes {@code key} from this RestOrRant\u0027s {@code Orders}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code key} must exist in the orders."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void removeOrderItem(OrderItem key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Notifies listeners that the orders have been modified."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void indicateModified() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orderItems.asUnmodifiableObservableList().size() + \" order items\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e getOrderItemList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orderItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof Orders // instanceof handles nulls"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 orderItems.equals(((Orders) other).orderItems));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orderItems.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/ReadOnlyOrders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Unmodifiable view of RestOrRant\u0027s orders"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public interface ReadOnlyOrders extends Observable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the order items list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ObservableList\u003cOrderItem\u003e getOrderItemList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueOrderItemList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A list of order items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * An order item is considered unique by comparing using {@code OrderItem#isSameOrderItem(OrderItem)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * adding and updating of order items uses OrderItem#isSameOrderItem(OrderItem) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * the order item being added or updated is unique in terms of identity in the UniqueOrderItemList. However, the removal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * of an order item uses OrderItem#equals so as to ensure that the order item with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * @see OrderItem#isSameOrderItem(OrderItem)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class UniqueOrderItemList implements Iterable\u003cOrderItem\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final ObservableList\u003cOrderItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final ObservableList\u003cOrderItem\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if the list contains an equivalent order item as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean contains(OrderItem toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrderItem);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds an order item to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void add(OrderItem toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces the order item {@code target} in the list with {@code editedOrderItem}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item identity of {@code editedOrderItem} must not be the same as another existing order item"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(target, editedOrderItem);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!target.isSameOrderItem(editedOrderItem) \u0026\u0026 contains(editedOrderItem)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        internalList.set(index, editedOrderItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Removes the equivalent order item from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * The order item must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void remove(OrderItem toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems(UniqueOrderItemList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Replaces the contents of this list with {@code orderItems}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code orderItems} must not contain duplicate order items."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireAllNonNull(orderItems);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!orderItemsAreUnique(orderItems)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        internalList.setAll(orderItems);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ObservableList\u003cOrderItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Iterator\u003cOrderItem\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                || (other instanceof UniqueOrderItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderItemList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if {@code orderItems} contains only unique order items."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private boolean orderItemsAreUnique(List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 0; i \u003c orderItems.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orderItems.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                if (orderItems.get(i).isSameOrderItem(orderItems.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderItemException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Signals that the operation will result in duplicate OrderItems (OrderItems are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class DuplicateOrderItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public DuplicateOrderItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        super(\"Operation would result in duplicate order items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/OrderItemNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Signals that the operation is unable to find the specified order item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Bill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Represents a Bill from a UniqueOrderItemList from the RestOrRant."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class Bill {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final TableNumber tableNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private float totalBill;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private String receipt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill(TableNumber tableNumber, float totalBill, String receipt) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(tableNumber, totalBill, receipt);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalBill \u003d totalBill;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        date \u003d new Date();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String dateParser \u003d getFormattedDate();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day \u003d new Day(dateParser.substring(0, 2));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month \u003d new Month(dateParser.substring(3, 5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year \u003d new Year(dateParser.substring(6, 10));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructor for StatisticBuilder for testing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill(Day day, Month month, Year year, TableNumber tableNumber, float totalBill, String receipt) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(day, month, year, tableNumber, totalBill, receipt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalBill \u003d totalBill;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        date \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Formats the current date and time and returns it as a String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String getFormattedDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"dd.MM.yyyy \u0027at\u0027 hh:mm:ss a zzz\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return dateFormatter.format(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the day."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the month."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the year."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the tableNumber."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public TableNumber getTableNumber() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the totalBill."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public float getTotalBill() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return totalBill;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the receipt."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String getReceipt() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        StringBuilder newReceipt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        newReceipt.append(receipt).append(getFormattedDate());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return newReceipt.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return Objects.hash(tableNumber, date, totalBill);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        builder.append(\"Total bill for Table \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .append(getTableNumber())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(\": $\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(String.format(\"%.2f\", getTotalBill()))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(\" [Date: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .append(getFormattedDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .append(\"] \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 121,
      "whyjayxp": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/DailyRevenue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Daily Revenue which contains the day, month year and total revenue earned on that specific day."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyRevenue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private float totalDailyRevenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public DailyRevenue(Day day, Month month, Year year, float totalDailyRevenue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(day, month, year, totalDailyRevenue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalDailyRevenue \u003d totalDailyRevenue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Adds the bill\u0027s total bill into the revenue."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void addToRevenue(Bill bill) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue +\u003d bill.getTotalBill();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the month."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Month getMonth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the year."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Gets the total revenue for the day."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public float getTotalDailyRevenue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return totalDailyRevenue;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if both dailyRevenue have the same day, month and year."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * This defines a weaker notion of equality between two dailyRevenue."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean isSameDailyRevenue(DailyRevenue otherDailyRevenue) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (otherDailyRevenue \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return otherDailyRevenue !\u003d null \u0026\u0026 otherDailyRevenue.getDay().equals(getDay()) \u0026\u0026 otherDailyRevenue"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .getMonth().equals(getMonth()) \u0026\u0026 otherDailyRevenue.getYear().equals(getYear());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if both dailyRevenue have the same day, month, year and totalRevenue."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * This defines a stronger notion of equality between two order items."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!(other instanceof DailyRevenue)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue otherDailyRevenue \u003d (DailyRevenue) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return isSameDailyRevenue(otherDailyRevenue)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 otherDailyRevenue.getTotalDailyRevenue() \u003d\u003d getTotalDailyRevenue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return Objects.hash(day, month, year, totalDailyRevenue);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        builder.append(\"Total Revenue for \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(getDay())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(\".\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(getMonth())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(\".\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(\" : $\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .append(getTotalDailyRevenue());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/DailyRevenueList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.exception.DailyRevenueNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * A list of daily revenues."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyRevenueList implements Iterable\u003cDailyRevenue\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final ObservableList\u003cDailyRevenue\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final ObservableList\u003cDailyRevenue\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if the list contains an equivalent DailyRevenue as the given argument."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean contains(DailyRevenue toCheck) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDailyRevenue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Adds a DailyRevenue for the day to the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void add(DailyRevenue toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the revenue {@code target} in the list with {@code editedDailyRevenue}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The order item identity of {@code editedDailyRevenue} must not be the same as another existing order item"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue(DailyRevenue target, DailyRevenue editedDailyRevenue) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(target, editedDailyRevenue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new DailyRevenueNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        internalList.set(index, editedDailyRevenue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the Observable\u003c\u0027DailyRevenue\u0027\u003e {@code internalList} with another DailyRevenueList {@code replacement}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue(DailyRevenueList replacement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Removes the equivalent daily revenue from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The daily revenue must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void remove(DailyRevenue toRemove) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new DailyRevenueNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the contents of this list with {@code dailyRevenueList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenueList(List\u003cDailyRevenue\u003e dailyRevenueList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireAllNonNull(dailyRevenueList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        internalList.setAll(dailyRevenueList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ObservableList\u003cDailyRevenue\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Iterator\u003cDailyRevenue\u003e iterator() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof DailyRevenueList // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 internalList.equals(((DailyRevenueList) other).internalList));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Day.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Day of the stored statistics (mostly for calculation for total revenue)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Day has to be limited to digits 1 to 31"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \"Day should be in the format \u003cdouble digit integer\u003e, it should not be blank and should be a valid day\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The first character of the item code must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9][0-9]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static boolean isInvalid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public final String day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code Day}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param day A valid code."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Day(String day) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static boolean isValidDay(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (Integer.parseInt(test) \u003c 1 || Integer.parseInt(test) \u003e 31) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return isInvalid;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 day.equals(((Day) other).day)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 62,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Month of the stored statistics (mostly for calculation for total revenue)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Month has to be limited to digits 1 to 12"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \"Month should be in the format \u003cdouble digit integer\u003e, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The first character of the item code must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9][0-9]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static boolean isInvalid \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public final String month;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param month A valid code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        checkArgument(isValidMonth(month), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (Integer.parseInt(test) \u003c 1 || Integer.parseInt(test) \u003e 12) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return isInvalid;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 month.equals(((Month) other).month)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return month.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 63,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/ReadOnlyStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Unmodifiable view of statistics"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public interface ReadOnlyStatistics extends Observable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns an unmodifiable view of the DailyRevenue list for the statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    ObservableList\u003cDailyRevenue\u003e getDailyRevenueList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 13,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Wraps all statistics-related data"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class Statistics implements ReadOnlyStatistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final DailyRevenueList dailyRevenueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Creates a Statistics"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Creates a Statistics using the Bill in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Statistics(ReadOnlyStatistics toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the contents of the daily revenue list with {@code dailyRevenueList}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenues(List\u003cDailyRevenue\u003e dailyRevenueList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.dailyRevenueList.setDailyRevenueList(dailyRevenueList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Resets the existing data of this RestOrRant\u0027s {@code statistics} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void resetData(ReadOnlyStatistics newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        setDailyRevenues(newData.getDailyRevenueList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //// order item-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if a daily revenue with the same identity as {@code daily Revenue} exists in the RestOrRant"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Statistics."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(dailyRevenue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return dailyRevenueList.contains(dailyRevenue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Adds an daily revenue to the RestOrRant\u0027s statistics."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The daily revenue must not already exist in the Statistics."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(dailyRevenue);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Replaces the given daily revenue {@code target} in the list with {@code editedDailyRevenue}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * {@code target} must exist in the RestOrRant\u0027s statistics."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The daily revenue identity of {@code editedODailyRevenue} must not be the same as another existing daily revenue"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * in Statistics."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue(DailyRevenue target, DailyRevenue editedDailyRevenue) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(editedDailyRevenue);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(target, editedDailyRevenue);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Removes {@code dailyRevenue} from this RestOrRant\u0027s {@code DailyRevenueList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * {@code dailyRevenue} must exist in the Statistics."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void removeDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.remove(dailyRevenue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Notifies listeners that the statistics has been modified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void indicateModified() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return dailyRevenueList.asUnmodifiableObservableList().size() + \" order items\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return dailyRevenueList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 dailyRevenueList.equals(((Statistics) other).dailyRevenueList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return dailyRevenueList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 142,
      "whyjayxp": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Year of the stored statistics (mostly for calculation for total revenue)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Year has to be 4 digits and must not be more than the current year."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \"Year should be in the format \u003cfour digit integer\u003e, it should not be blank or larger than current year\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * The first character of the item code must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9][0-9][0-9][0-9]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static boolean isInvalid \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param year A valid code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (Integer.parseInt(test) \u003e calendar.get(Calendar.YEAR)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return isInvalid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 year.equals(((Year) other).year)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return year.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 67,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/exception/BillNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.statistics.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Signals that the operation is unable to find the specified bill."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class BillNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 4,
      "whyjayxp": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/exception/DailyRevenueNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Signals that the operation is unable to find the specified daily revenue."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyRevenueNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/ReadOnlyTables.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of the RestOrRant\u0027s Tables."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public interface ReadOnlyTables extends Observable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns an unmodifiable view of the tables list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    ObservableList\u003cTable\u003e getTableList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a table with the same identity as {@code table} exists in the UniqueTableList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasTable(Table table);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a table to the UniqueTableList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table must not already exist in the UniqueTableList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTable(Table table);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a table to the UniqueTableList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table must not already exist in the UniqueTableList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    TableNumber addTable(TableStatus tableStatus);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Takes in a TableNumber and returns the Optional of a Table if table exists, else an empty Optional."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Optional\u003cTable\u003e getTableFromNumber(TableNumber tableNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the table list with {@code tableList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code tableList} must not contain duplicate tables."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setTables(List\u003cTable\u003e tableList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setTable(Table target, Table editedTable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code RestOrRant}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void removeTable(Table key);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the table with {@code tableNumber} has at least one seat taken."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isOccupied(TableNumber tableNumber) throws CommandException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 16,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/Table.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a table in RestOrRant."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Table {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TableNumber tableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TableStatus tableStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Table(String tableNumber, String numberOfSeats) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableStatus \u003d new TableStatus(numberOfSeats);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Table(TableNumber tableNumber, TableStatus tableStatus) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableStatus \u003d tableStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableStatus getTableStatus() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableNumber getTableNumber() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOccupied() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableStatus.isOccupied();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if the current table is the same as table provided"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param otherTable other table  to be checked against"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if tables have the same TableNumber; false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTable(Table otherTable) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTable \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (otherTable !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTable.getTableNumber().equals(this.getTableNumber()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.getTableNumber().equals(((Table) other).getTableNumber())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.getTableStatus().equals(((Table) other).getTableStatus()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/TableNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Table\u0027s table number in the RestOrRant."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTableNumber(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TableNumber {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Table Number should only contain Integers greater than zero.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public final String tableNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code TableNumber}/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tableNumber A valid tableNumber."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableNumber(String tableNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTableNumber(tableNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid table number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTableNumber(String tableNumber) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableNumber.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getTableNumber() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return other \u003d\u003d this || (other instanceof TableNumber \u0026\u0026 tableNumber"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(((TableNumber) other).getTableNumber()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableNumber.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 8,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/TableStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the current status of a {@code Table}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TableStatus {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Table status should only contain numbers\\nand the number of seats taken is less than number of seats.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_NUMBER_OF_CUSTOMERS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Table unable to accommodate number of customers provided.\\nNumber of seats table has is: %1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEATS_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_VALIDATION_REGEX \u003d \"\\\\d+/\\\\d+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String numberOfSeats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String numberOfTakenSeats;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code TableStatus}/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tableStatus A valid tableStatus."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableStatus(String tableStatus) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tableStatus);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTableStatus(tableStatus), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfSeats \u003d tableStatus.substring(2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfTakenSeats \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Changes the number of seats taken in the {@code TableStatus}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void changeOccupancy(String numberOfTakenSeats) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(numberOfTakenSeats);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidNumberOfSeats(numberOfTakenSeats));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Integer.parseInt(numberOfTakenSeats) \u003e Integer.parseInt(numberOfSeats)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_NUMBER_OF_CUSTOMERS, numberOfSeats));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfTakenSeats \u003d numberOfTakenSeats;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if table is occupied."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if table is occupied, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOccupied() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(numberOfTakenSeats) \u003e 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid table status."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTableStatus(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(STATUS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid number of seats."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidNumberOfSeats(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(SEATS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if two TableStatus objects are equal."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(TableStatus otherTableStatus) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return numberOfSeats.equals(otherTableStatus.numberOfSeats) \u0026\u0026 numberOfTakenSeats"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .equals(otherTableStatus.numberOfTakenSeats);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return numberOfTakenSeats + \"/\" + numberOfSeats;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/Tables.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all table-related data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed by (.isSameTable method)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tables implements ReadOnlyTables {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_INVALID_TABLE \u003d \"Table %1$s does not exist\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTableList tableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private int nextTableNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList \u003d new UniqueTableList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        nextTableNumber \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Tables() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Tables using the tableList in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tables(ReadOnlyTables toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTables(List\u003cTable\u003e tableList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableList.setTables(tableList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        nextTableNumber \u003d this.tableList.getSize() + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code Tables} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyTables newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        setTables(newData.getTableList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasTable(Table table) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(table);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableList.contains(table);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTable(Table table) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList.add(table);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableNumber addTable(TableStatus tableStatus) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList.add(new Table(new TableNumber(String.valueOf(nextTableNumber)), tableStatus));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        nextTableNumber++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TableNumber(String.valueOf(nextTableNumber - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTable(Table target, Table editedTable) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedTable);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList.setTable(target, editedTable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTable(Table key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cTable\u003e getTableFromNumber(TableNumber tableNumber) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Optional.ofNullable(tableList.getTable(tableNumber));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isOccupied(TableNumber tableNumber) throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tableList.getTable(tableNumber) \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_TABLE, tableNumber));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return tableList.getTable(tableNumber).isOccupied();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the RestOrRant has been modified."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void indicateModified() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTable\u003e getTableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tables // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tableList.equals(((Tables) other).tableList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableList.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 12,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/UniqueTableList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.exceptions.DuplicateTableException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.exceptions.TableNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tables that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An table is considered unique by comparing using {@code Table#isSameTable(Table)}. As such,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * adding and updating of table uses Table#isSameTable(Table) for equality so as to ensure that"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * the table being added or updated is unique in terms of identity in the UniqueOrderTableList. However, the removal"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * of a table uses Table#isSameTable(Table) so as to ensure that the table with exactly the same"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * fields will be removed. TODO: this is quite pointless now, may use the same function for both."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Table#isSameTable(Table)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTableList implements Iterable\u003cTable\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTable\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final ObservableList\u003cTable\u003e internalUnmodifiableList \u003d FXCollections"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            .unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent table as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Table toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTable);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns table if table exists in UniqueTableList and is occupied."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Table getTable(TableNumber tableNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FilteredList\u003cTable\u003e filteredList \u003d internalList.filtered(table -\u003e tableNumber.equals(table.getTableNumber()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filteredList.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredList.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a table item to the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Table toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTableException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the table {@code target} in the list with {@code editedTable}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * The table identity of {@code editedOrderItem} must not be the same as another existing table"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTable(Table target, Table editedTable) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTable);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TableNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameTable(editedTable) \u0026\u0026 contains(editedTable)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTableException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedTable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent order item from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order item must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Table toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new OrderItemNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTables(UniqueTableList replacement) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code tables}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code tables} must not contain duplicate tables."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTables(List\u003cTable\u003e tables) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tables);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tablesAreUnique(tables)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateOrderItemException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tables);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of tables in the UniqueTableList"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTable\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTable\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueTableList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTableList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code orderItems} contains only unique order items."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean tablesAreUnique(List\u003cTable\u003e tables) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tables.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tables.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tables.get(i).isSameTable(tables.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/model/table/exceptions/InsufficientSeatsException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.table.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that there are too many customers for this table."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class InsufficientSeatsException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Contains utility methods for populating {@code RestOrRant} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Table[] getSampleTables() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new Table[]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new Table(\"1\", \"4/4\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new Table(\"2\", \"4/5\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new Table(\"3\", \"0/4\")};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static MenuItem[] getSampleMenuItems() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new MenuItem[]{new MenuItem(new Name(\"Chicken Wings\"), new Code(\"W09\"), new Price(\"3.99\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new MenuItem(new Name(\"French Fries\"), new Code(\"W12\"), new Price(\"2.20\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new MenuItem(new Name(\"Salad\"), new Code(\"A05\"), new Price(\"5.50\"))};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static OrderItem[] getSampleOrderItems() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new OrderItem[]{new OrderItem(new TableNumber(\"1\"), new Code(\"W09\"), 3),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItem(new TableNumber(\"1\"), new Code(\"W12\"), 2),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItem(new TableNumber(\"2\"), new Code(\"A05\"), 1)};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static DailyRevenue[] getSampleDailyReveue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new DailyRevenue[]{new DailyRevenue(new Day(\"14\"), new Month(\"6\"), new Year(\"1997\"), (float) 123.45)};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static ReadOnlyRestOrRant getSampleRestOrRant() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant sampleRestOrRant \u003d new RestOrRant();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (Table sampleTable : getSampleTables()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            sampleRestOrRant.getTables().addTable(sampleTable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (MenuItem sampleMenuItem : getSampleMenuItems()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            sampleRestOrRant.getMenu().addMenuItem(sampleMenuItem);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (OrderItem sampleOrderItem : getSampleOrderItems()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            sampleRestOrRant.getOrders().addOrderItem(sampleOrderItem);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (DailyRevenue sampleDailyRevenue : getSampleDailyReveue()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            sampleRestOrRant.getStatistics().addDailyRevenue(sampleDailyRevenue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return sampleRestOrRant;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 48,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBill.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Jackson-friendly version of {@link Statistics}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "class JsonAdaptedBill {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Bill item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String tableNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String totalBill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String receipt;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code JsonAdaptedBill} with the given bill details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonAdaptedBill(@JsonProperty(\"tableNumber\") String tableNumber,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            @JsonProperty(\"totalBill\") String totalBill,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            @JsonProperty(\"receipt\") String receipt) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalBill \u003d totalBill;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts a given {@code Bill} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonAdaptedBill(Bill source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber \u003d String.valueOf(source.getTableNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalBill \u003d String.valueOf(source.getTotalBill());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt \u003d String.valueOf(source.getReceipt());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts this Jackson-friendly adapted bill object into the model\u0027s {@code Bill} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order item."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (tableNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"tableNumber\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!TableNumber.isValidTableNumber(tableNumber)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(TableNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final TableNumber modelTableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final float modelBill \u003d Float.parseFloat(totalBill);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Bill(modelTableNumber, modelBill, receipt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 62,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDailyRevenue.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Jackson-friendly version of {@link Statistics}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "class JsonAdaptedDailyRevenue {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Daily Revenue item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String month;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final String totalDailyRevenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code JsonAdaptedDailyRevenue} with the given daily revenue details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonAdaptedDailyRevenue(@JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                   @JsonProperty(\"month\") String month,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                   @JsonProperty(\"year\") String year,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                   @JsonProperty(\"totalDailyRevenue\") String totalDailyRevenue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalDailyRevenue \u003d totalDailyRevenue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts a given {@code Bill} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonAdaptedDailyRevenue(DailyRevenue source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day \u003d String.valueOf(source.getDay());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month \u003d String.valueOf(source.getMonth());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year \u003d String.valueOf(source.getYear());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue \u003d String.valueOf(source.getTotalDailyRevenue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts this Jackson-friendly adapted daily revenue object into the model\u0027s {@code DailyRevenue} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted daily revenue."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public DailyRevenue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (day \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"day\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Day.isValidDay(day)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (month \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"month\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Month.isValidMonth(month)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(Month.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (year \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"year\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!Year.isValidYear(year)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new IllegalValueException(Year.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final Day modelDay \u003d new Day(day);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final Month modelMonth \u003d new Month(month);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final Year modelYear \u003d new Year(year);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final float modelTotalDailyRevenue \u003d Float.parseFloat(totalDailyRevenue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new DailyRevenue(modelDay, modelMonth, modelYear, modelTotalDailyRevenue);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMenu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Jackson-friendly version of {@link MenuItem}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "class JsonAdaptedMenu {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Menu Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Constructs a {@code JsonAdaptedMenu} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public JsonAdaptedMenu(@JsonProperty(\"name\") String name, @JsonProperty(\"code\") String code,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "            @JsonProperty(\"price\") String price) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Converts a given {@code MenuItem} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public JsonAdaptedMenu(MenuItem item) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        name \u003d item.getName().itemName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        code \u003d item.getCode().itemCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        price \u003d item.getPrice().itemPrice;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!Code.isValidCode(code)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        final Code modelCode \u003d new Code(code);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new MenuItem(modelName, modelCode, modelPrice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 75,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOrderItem.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Jackson-friendly version of {@link OrderItem}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "class JsonAdaptedOrderItem {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final String tableNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final String menuItemCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final String quantityOrdered;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final String quantityUnserved;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrderItem} with the given order item details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonAdaptedOrderItem(@JsonProperty(\"tableNumber\") String tableNumber,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "            @JsonProperty(\"menuItemCode\") String menuItem, @JsonProperty(\"ordered\") String quantityOrdered,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            @JsonProperty(\"unserved\") String quantityUnserved) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.menuItemCode \u003d menuItem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.quantityOrdered \u003d quantityOrdered;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.quantityUnserved \u003d quantityUnserved;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts a given {@code OrderItem} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonAdaptedOrderItem(OrderItem source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d source.getTableNumber().getTableNumber();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItemCode \u003d source.getMenuItemCode().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantityOrdered \u003d String.valueOf(source.getQuantity());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantityUnserved \u003d String.valueOf(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts this Jackson-friendly adapted order item object into the model\u0027s {@code OrderItem} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (tableNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"tableNumber\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // TODO: check if table number is valid"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //    throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final TableNumber modelTableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (menuItemCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"menuItemCode\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // TODO: check if menu item code is legal"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //    throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final Code modelMenuItemCode \u003d new Code(menuItemCode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (quantityOrdered \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"ordered\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final int modelQuantityOrdered \u003d Integer.parseInt(quantityOrdered); // TODO: handle NumberFormatException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (quantityUnserved \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"unserved\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new OrderItem(modelTableNumber, modelMenuItemCode, modelQuantityOrdered);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 1,
      "whyjayxp": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link seedu.address.model.table.Table}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Table\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tableNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tableStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTable(@JsonProperty(\"tableNumber\") String tableNumber,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                            @JsonProperty(\"tableStatus\") String tableStatus) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableStatus \u003d tableStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code MenuItem} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTable(Table table) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d table.getTableNumber().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tableStatus \u003d table.getTableStatus().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Table toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tableNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    TableNumber.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TableNumber.isValidTableNumber(tableNumber)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(TableNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final TableNumber modelTableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tableStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(TableStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TableStatus.isValidTableStatus(tableStatus)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(TableStatus.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final TableStatus modelTableStatus \u003d new TableStatus(tableStatus);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            modelTableStatus.changeOccupancy(tableStatus.split(\"/\")[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(\"Invalid table status.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Table(modelTableNumber, modelTableStatus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMenuStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": " * A class to access RestOrRant data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class JsonMenuStorage implements MenuStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public JsonMenuStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return readMenu(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Similar to {@link #readMenu()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cJsonSerializableMenu\u003e jsonMenu \u003d JsonUtil.readJsonFile(filePath, JsonSerializableMenu.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!jsonMenu.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return Optional.of(jsonMenu.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        saveMenu(menu, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Similar to {@link #saveMenu(ReadOnlyMenu)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "        requireAllNonNull(menu, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMenu(menu), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void backupMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "        saveMenu(menu, backupFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 86,
      "whyjayxp": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonOrdersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A class to access order data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class JsonOrdersStorage implements OrdersStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrdersStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonOrdersStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Optional\u003cReadOnlyOrders\u003e readOrders() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return readOrders(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Similar to {@link #readOrders()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Optional\u003cReadOnlyOrders\u003e readOrders(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cJsonSerializableOrders\u003e jsonOrders \u003d JsonUtil.readJsonFile(filePath, JsonSerializableOrders.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!jsonOrders.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return Optional.of(jsonOrders.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders(ReadOnlyOrders orders) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        saveOrders(orders, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Similar to {@link #saveOrders(ReadOnlyOrders)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders(ReadOnlyOrders orders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(orders);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableOrders(orders), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void backupOrders(ReadOnlyOrders orders) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        saveOrders(orders, backupFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMenu.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " * An Immutable RestOrRant that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "@JsonRootName(value \u003d \"menuItems\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "class JsonSerializableMenu {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Menu list contains duplicate items(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final List\u003cJsonAdaptedMenu\u003e menuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Constructs a {@code JsonSerializableMenu} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonSerializableMenu(@JsonProperty(\"menuItems\") List\u003cJsonAdaptedMenu\u003e menuItems) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.menuItems.addAll(menuItems);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Converts a given {@code ReadOnlyRestOrRant} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMenu}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public JsonSerializableMenu(ReadOnlyMenu source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItems.addAll(source.getMenuItemList().stream().map(JsonAdaptedMenu::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RestOrRant} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Menu toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (JsonAdaptedMenu jsonAdaptedMenu : menuItems) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "            MenuItem item \u003d jsonAdaptedMenu.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (menu.hasMenuItem(item)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menu.addMenuItem(item);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 53,
      "whyjayxp": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableOrders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * An Immutable order list that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "@JsonRootName(value \u003d \"orderItems\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "class JsonSerializableOrders {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER_ITEMS \u003d \"Order list contains duplicate order item(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final List\u003cJsonAdaptedOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Constructs a {@code JsonSerializableOrders} with the given order items."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonSerializableOrders(@JsonProperty(\"orderItems\") List\u003cJsonAdaptedOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.orderItems.addAll(orderItems);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts a given {@code ReadOnlyOrders} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrders}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public JsonSerializableOrders(ReadOnlyOrders source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .addAll(source.getOrderItemList().stream().map(JsonAdaptedOrderItem::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts this order list into the model\u0027s {@code Orders} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Orders toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Orders orders \u003d new Orders();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (JsonAdaptedOrderItem jsonAdaptedOrderItem : orderItems) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            OrderItem orderItem \u003d jsonAdaptedOrderItem.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (orders.hasOrderItem(orderItem)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER_ITEMS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            orders.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * An Immutable RestOrRant that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "@JsonRootName(value \u003d \"statisticsList\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "class JsonSerializableStatistics {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Statistics list contains duplicate daily revenue(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final List\u003cJsonAdaptedDailyRevenue\u003e statisticsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Constructs a {@code JsonSerializableRestOrRant} with the given daily revenue."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonSerializableStatistics(@JsonProperty(\"statisticsList\") List\u003cJsonAdaptedDailyRevenue\u003e statsList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.statisticsList.addAll(statsList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts a given {@code ReadOnlyStatistics} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRestOrRant}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonSerializableStatistics(ReadOnlyStatistics source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsList.addAll(source.getDailyRevenueList().stream().map(JsonAdaptedDailyRevenue::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Converts this address book into the model\u0027s {@code RestOrRant} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Statistics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        for (JsonAdaptedDailyRevenue jsonAdaptedDailyRevenue : statisticsList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            DailyRevenue dailyRevenue \u003d jsonAdaptedDailyRevenue.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (statistics.hasDailyRevenue(dailyRevenue)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            statistics.addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 58,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTables.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Tables;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable Tables that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "@JsonRootName(value \u003d \"tableList\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableTables {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TABLE \u003d \"Table list contains duplicate table(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTable\u003e tableList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Constructs a {@code JsonSerializableRestOrRant} with the given tables."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableTables(@JsonProperty(\"tableList\") List\u003cJsonAdaptedTable\u003e tableList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tableList.addAll(tableList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts a given {@code ReadOnlyTables} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTables}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableTables(ReadOnlyTables source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tableList.addAll(source.getTableList().stream().map(JsonAdaptedTable::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Converts this RestOrRant tables into the model\u0027s {@code Tables} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tables toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Tables tables \u003d new Tables();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTable jsonAdaptedTable : this.tableList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Table table \u003d jsonAdaptedTable.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tables.hasTable(table)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TABLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            tables.addTable(table);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return tables;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 10,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * A class to access RestOrRant data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class JsonStatisticsStorage implements StatisticsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStatisticsStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public JsonStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return readStatistics(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Similar to {@link #readStatistics()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cJsonSerializableStatistics\u003e jsonStats \u003d JsonUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .readJsonFile(filePath, JsonSerializableStatistics.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!jsonStats.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return Optional.of(jsonStats.get().toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics stats) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        saveStatistics(stats, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Similar to {@link #saveStatistics(ReadOnlyStatistics)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics stats, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(stats);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(stats), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void backupStatistics(ReadOnlyStatistics stats) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        saveStatistics(stats, backupFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 85,
      "whyjayxp": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTablesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access RestOrRant data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonTablesStorage implements TablesStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Path backupFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonTablesStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTableFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTables\u003e readTables() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return readTables(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readTables()}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTables\u003e readTables(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cJsonSerializableTables\u003e jsonTables \u003d JsonUtil.readJsonFile(filePath, JsonSerializableTables.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonTables.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonTables.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTables(ReadOnlyTables tables) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        saveTables(tables, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveTables(ReadOnlyTables)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTables(ReadOnlyTables tables, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tables);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTables(tables), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void backupTables(ReadOnlyTables tables) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        saveTables(tables, backupFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MenuStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a storage for {@link Menu}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "public interface MenuStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns RestOrRant data as a {@link ReadOnlyMenu}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @see #getMenuFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Saves the given {@link ReadOnlyMenu} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @param menu cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @see #saveMenu(ReadOnlyMenu)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void backupMenu(ReadOnlyMenu menu) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 48,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrdersStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Represents a storage for RestOrRant\u0027s {@link Orders}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public interface OrdersStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getOrdersFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns order data as part of a {@link ReadOnlyOrders}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Optional\u003cReadOnlyOrders\u003e readOrders() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see #getOrdersFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Optional\u003cReadOnlyOrders\u003e readOrders(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Saves the given {@link ReadOnlyOrders} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @param orders cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void saveOrders(ReadOnlyOrders orders) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see #saveOrders(ReadOnlyOrders)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void saveOrders(ReadOnlyOrders orders, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void backupOrders(ReadOnlyOrders orders) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a storage for {@link Statistics}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public interface StatisticsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns RestOrRant data as a {@link ReadOnlyStatistics}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see #getStatisticsFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Saves the given {@link ReadOnlyStatistics} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @param stats cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics stats) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see #saveStatistics(ReadOnlyStatistics)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics stats, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    void backupStatistics(ReadOnlyStatistics stats) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 45,
      "bava98": 2,
      "whyjayxp": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public interface Storage extends UserPrefsStorage, OrdersStorage, MenuStorage, TablesStorage, StatisticsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Path getOrdersFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    Optional\u003cReadOnlyOrders\u003e readOrders() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void saveOrders(ReadOnlyOrders orders) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTableFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyTables\u003e readTables() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveTables(ReadOnlyTables tables) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void backupTables(ReadOnlyTables tables) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1,
      "bava98": 7,
      "whyjayxp": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Manages storage of RestOrRant data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private MenuStorage menuStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private OrdersStorage ordersStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TablesStorage tablesStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private StatisticsStorage statsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage, OrdersStorage ordersStorage, MenuStorage menuStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            StatisticsStorage statsStorage, TablesStorage tablesStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.menuStorage \u003d menuStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.ordersStorage \u003d ordersStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.statsStorage \u003d statsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tablesStorage \u003d tablesStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuStorage.getMenuFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return readMenu(menuStorage.getMenuFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuStorage.readMenu(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "        saveMenu(menu, menuStorage.getMenuFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuStorage.saveMenu(menu, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void backupMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuStorage.backupMenu(menu);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Orders methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return ordersStorage.getOrdersFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Optional\u003cReadOnlyOrders\u003e readOrders() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return readOrders(ordersStorage.getOrdersFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Optional\u003cReadOnlyOrders\u003e readOrders(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return ordersStorage.readOrders(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders(ReadOnlyOrders orders) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        saveOrders(orders, ordersStorage.getOrdersFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders(ReadOnlyOrders orders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ordersStorage.saveOrders(orders, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void backupOrders(ReadOnlyOrders orders) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ordersStorage.backupOrders(orders);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tables methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTableFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return tablesStorage.getTableFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTables\u003e readTables() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return readTables(tablesStorage.getTableFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyTables\u003e readTables(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read fata from file: \" + filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return tablesStorage.readTables(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTables(ReadOnlyTables tables) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        saveTables(tables, tablesStorage.getTableFilePath());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveTables(ReadOnlyTables tables, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        tablesStorage.saveTables(tables, filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void backupTables(ReadOnlyTables tables) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        tablesStorage.backupTables(tables);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d statistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return statsStorage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return readStatistics(statsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return statsStorage.readStatistics(filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics stats) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        saveStatistics(stats, statsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics stats, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statsStorage.saveStatistics(stats, filePath);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void backupStatistics(ReadOnlyStatistics stats) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statsStorage.backupStatistics(stats);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 37,
      "bava98": 18,
      "whyjayxp": 33,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TablesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a storage for {@link Table}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface TablesStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getTableFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns Tables data as a {@link ReadOnlyTables}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyTables\u003e readTables() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getTableFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyTables\u003e readTables(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyRestOrRant} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tables cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveTables(ReadOnlyTables tables) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveTables(ReadOnlyTables)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveTables(ReadOnlyTables tables, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void backupTables(ReadOnlyTables tables) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 2,
      "whyjayxp": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 1,
      "whyjayxp": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BillBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * The Browser Panel for the bill."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String FXML \u003d \"BillBrowserPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private ListView\u003cBill\u003e receiptView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label tableNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private TextArea receipt;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public BillBrowserPanel(Bill bill, ObservableValue\u003cBill\u003e selectedBill, Consumer\u003cBill\u003e onSelectedBillChange) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(bill);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber.setText(\"TABLE NUMBER \" + bill.getTableNumber().tableNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //TODO: Find out why the text aren\u0027t printing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt \u003d new TextArea(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.setWrapText(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.setText(bill.getReceipt());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.appendText(bill.getReceipt());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //receiptView.setCellFactory(listView -\u003e new BillBrowserPanel.BillCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //receiptView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //    logger.fine(\"Selection in list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //    onSelectedBillChange.accept(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //});"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //selectedBill.addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //    logger.fine(\"Selected item changed to: \" + newValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            // Don\u0027t modify selection if we are already selecting the selected item,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            if (Objects.equals(receiptView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //                return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //                receiptView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //                int index \u003d receiptView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //                receiptView.scrollTo(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //                receiptView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //        }));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //    class BillCell extends ListCell\u003cBill\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //        protected void updateItem(Bill item, boolean empty) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //                setGraphic(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //                setText(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //                setGraphic(new BillCard(bill));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BillCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * The Receipt to be added in the BillBrowserPanel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String FXML \u003d \"BillBrowserPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Bill bill;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label tableNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private TextArea receipt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public BillCard(Bill bill) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        requireNonNull(bill);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.bill \u003d bill;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber.setText(\"TABLE NUMBER \" + bill.getTableNumber().tableNumber);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //TODO: Find out why there will be nullpointer exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt.setText(bill.getReceipt());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        System.out.println(\"Hello\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    // TODO: constructors for different modes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    public BillBrowserPanel(ObservableValue\u003cBill\u003e selectedBill) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        // Load person page when selected person changes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        selectedBill.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//                loadDefaultText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//                return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//            loadBillReceipt(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    public BillBrowserPanel() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        loadDefaultText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//     * Loads the actual receipt."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    private void loadBillReceipt(Bill bill) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        requireNonNull(bill);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        text \u003d new Text(bill.getReceipt());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        receipt.getChildren().addAll(text);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        tableNumber.setText(bill.getTableNumber().tableNumber);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//     * Loads a default receipt."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    private void loadDefaultText() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        text \u003d new Text(\"No Bill Found\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//        receipt.getChildren().addAll(text);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DailyStatisticsCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * An UI component that displays information of a {@code Monthly Statistics}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyStatisticsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String FXML \u003d \"DailyStatisticsCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestOrRant level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public final DailyRevenue dailyRevenue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label month;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label year;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Label totalDailyRevenue;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public DailyStatisticsCard(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.dailyRevenue \u003d dailyRevenue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day.setText(\"\" + this.dailyRevenue.getDay());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month.setText(\"\" + this.dailyRevenue.getMonth());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year.setText(\"\" + this.dailyRevenue.getYear());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue.setText(\"\" + this.dailyRevenue.getTotalDailyRevenue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (!(other instanceof DailyStatisticsCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyStatisticsCard card \u003d (DailyStatisticsCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return day.equals(card.day) \u0026\u0026 month.equals(card.month) \u0026\u0026 year.equals(card.year)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u0026\u0026 totalDailyRevenue.equals(card.totalDailyRevenue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private MenuListPanel menuListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private OrderItemListPanel orderItemListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private BillBrowserPanel billBrowserPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private TableFlowPanel tableFlowPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private MenuItemFlowPanel menuItemFlowPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private StatisticsFlowPanel statisticsFlowPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        tableFlowPanel \u003d new TableFlowPanel(logic.getRestOrRant().getTables().getTableList(), scrollPane);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().addAll(tableFlowPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItemListPanel \u003d new OrderItemListPanel(logic.getFilteredOrderItemList(), logic.selectedOrderItemProperty(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                logic::setSelectedOrderItem);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        listPanelPlaceholder.getChildren().add(orderItemListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(\"Restaurant Mode\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuListPanel getMenuListPanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return menuListPanel;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Changes application mode."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleChangeMode(Mode mode) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        browserPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bava98"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case RESTAURANT_MODE:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            tableFlowPanel \u003d new TableFlowPanel(logic.getFilteredTableList(), scrollPane);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            browserPlaceholder.getChildren().add(tableFlowPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            orderItemListPanel \u003d new OrderItemListPanel(logic.getFilteredOrderItemList(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.selectedOrderItemProperty(), logic::setSelectedOrderItem);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            listPanelPlaceholder.getChildren().add(orderItemListPanel.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            statusBarFooter.updateMode(\"Restaurant Mode\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bava98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case TABLE_MODE:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: actual menuBrowserPanel"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuItemFlowPanel \u003d new MenuItemFlowPanel(logic.getFilteredMenuItemList(), scrollPane);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bava98"
        },
        "content": "            browserPlaceholder.getChildren().add(menuItemFlowPanel.getRoot());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            orderItemListPanel \u003d new OrderItemListPanel(logic.getFilteredOrderItemList(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    logic.selectedOrderItemProperty(), logic::setSelectedOrderItem);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            listPanelPlaceholder.getChildren().add(orderItemListPanel.getRoot());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            statusBarFooter.updateMode(\"Table Mode\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bava98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bava98"
        },
        "content": "        case MENU_MODE:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bava98"
        },
        "content": "            // TODO: change to browser panel to app logo in future versions (for now keep the tables?)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            tableFlowPanel \u003d new TableFlowPanel(logic.getFilteredTableList(), scrollPane);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            browserPlaceholder.getChildren().add(tableFlowPanel.getRoot());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuListPanel \u003d new MenuListPanel(logic.getFilteredMenuItemList(), logic.selectedMenuItemProperty(),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    logic::setSelectedMenuItem);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bava98"
        },
        "content": "            listPanelPlaceholder.getChildren().add(menuListPanel.getRoot());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            statusBarFooter.updateMode(\"Menu Mode\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bava98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        case BILL_MODE:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            billBrowserPanel \u003d new BillBrowserPanel(logic.getRecentBill(), logic.recentBillProperty(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    logic::setRecentBill);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            browserPlaceholder.getChildren().add(billBrowserPanel.getRoot());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            statusBarFooter.updateMode(\"Bill Mode\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        case STATISTICS_MODE:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            //TODO: add different cases for the monthly, yearly statistics"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            statisticsFlowPanel \u003d new StatisticsFlowPanel(logic.getFilteredDailyRevenueList(), scrollPane, true,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            browserPlaceholder.getChildren().add(statisticsFlowPanel.getRoot());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            menuListPanel \u003d new MenuListPanel(logic.getFilteredMenuItemList(), logic.selectedMenuItemProperty(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    logic::setSelectedMenuItem);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            listPanelPlaceholder.getChildren().add(menuListPanel.getRoot());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            statusBarFooter.updateMode(\"Statistics Mode\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bava98"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bava98"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bava98"
        },
        "content": "            Mode newMode \u003d commandResult.newModeStatus();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (newMode !\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bava98"
        },
        "content": "                handleChangeMode(newMode);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 23,
      "bava98": 38,
      "whyjayxp": 19,
      "-": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MenuItemCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": " * An UI component that displays information of a {@code MenuItem}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String FXML \u003d \"MenuItemCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestOrRant level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public final MenuItem item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private HBox menuItemCardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemCard(MenuItem item, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        name.setText(item.getName().itemName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        code.setText(item.getCode().itemCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "        price.setText(item.getPrice().itemPrice);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemCard(MenuItem item) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        name.setText(item.getName().itemName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "        code.setText(\"Code: \" + item.getCode().itemCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        price.setText(\"Price: \" + item.getPrice().itemPrice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        if (!(other instanceof MenuItemCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItemCard card \u003d (MenuItemCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 70,
      "whyjayxp": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MenuItemFlowPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": " * The Browser Panel for the menu."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItemFlowPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String FXML \u003d \"MenuItemFlowPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MenuItemFlowPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private FlowPane menuItemFlowPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemFlowPanel(ObservableList\u003cMenuItem\u003e menuItemObservableList, ScrollPane scrollPane) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // To prevent triggering events for typing inside the loaded FlowPane."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemFlowPane.setHgap(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemFlowPane.setVgap(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemFlowPane.prefWidthProperty().bind(scrollPane.widthProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemFlowPane.prefHeightProperty().bind(scrollPane.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // Creates a TableCard for each Table and adds to FlowPane"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        for (MenuItem menuItem : menuItemObservableList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuItemFlowPane.getChildren().add(new MenuItemCard(menuItem).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemObservableList.addListener((ListChangeListener\u003cMenuItem\u003e) c -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuItemFlowPane.getChildren().clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "            for (MenuItem menuItem : menuItemObservableList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "                menuItemFlowPane.getChildren().add(new MenuItemCard(menuItem).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MenuListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": " * Panel containing the list of menu items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String FXML \u003d \"MenuListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MenuListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private ListView\u003cMenuItem\u003e menuItemListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuListPanel(ObservableList\u003cMenuItem\u003e menuItemList, ObservableValue\u003cMenuItem\u003e selectedMenuItem,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "                         Consumer\u003cMenuItem\u003e onSelectedMenuItemChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemListView.setItems(menuItemList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemListView.setCellFactory(listView -\u003e new MenuItemListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menuItemListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "            logger.fine(\"Selection in list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "            onSelectedMenuItemChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        selectedMenuItem.addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "            logger.fine(\"Selected item changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected item,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (Objects.equals(menuItemListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "                menuItemListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "                int index \u003d menuItemListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "                menuItemListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "                menuItemListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    class MenuItemListViewCell extends ListCell\u003cMenuItem\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        protected void updateItem(MenuItem item, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "                setGraphic(new MenuItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderItemCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code OrderItem}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String FXML \u003d \"OrderItemListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestOrRant level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public final OrderItem item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Label tableNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Label menuItemCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemCard(OrderItem item, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber.setText(\"Table \" + item.getTableNumber().tableNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItemCode.setText(item.getMenuItemCode().itemCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantity.setText(\"Qty: \" + item.getQuantity());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!(other instanceof OrderItemCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCard card \u003d (OrderItemCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 62,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderItemListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Panel containing the list of menu items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String FXML \u003d \"OrderItemListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderItemListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private ListView\u003cOrderItem\u003e orderItemListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemListPanel(ObservableList\u003cOrderItem\u003e orderItemList, ObservableValue\u003cOrderItem\u003e selectedOrderItem,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                              Consumer\u003cOrderItem\u003e onSelectedOrderItemChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItemListView.setItems(orderItemList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItemListView.setCellFactory(listView -\u003e new OrderItemListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItemListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.fine(\"Selection in list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            onSelectedOrderItemChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        selectedOrderItem.addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            logger.fine(\"Selected item changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected item,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (Objects.equals(orderItemListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                orderItemListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                int index \u003d orderItemListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                orderItemListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                orderItemListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code ItemCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    class OrderItemListViewCell extends ListCell\u003cOrderItem\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        protected void updateItem(OrderItem item, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                setGraphic(new OrderItemCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsFlowPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * The Browser Panel for the statistics."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class StatisticsFlowPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String FXML \u003d \"StatisticsFlowPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsFlowPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final boolean isDaily;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final boolean isMonthly;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final boolean isYearly;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private FlowPane statisticsFlowPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsFlowPanel(ObservableList\u003cDailyRevenue\u003e dailyRevenueObservableList, ScrollPane scrollPane,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                               boolean isDaily, boolean isMonthly, boolean isYearly) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.isDaily \u003d isDaily;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.isMonthly \u003d isMonthly;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.isYearly \u003d isYearly;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // To prevent triggering events for typing inside the loaded FlowPane."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsFlowPane.setHgap(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsFlowPane.setVgap(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsFlowPane.prefWidthProperty().bind(scrollPane.widthProperty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statisticsFlowPane.prefHeightProperty().bind(scrollPane.heightProperty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        if (isDaily) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            // Creates a DailyStatisticsCard for each DailyStatisticsCard and adds to FlowPane"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            for (DailyRevenue dailyRevenue : dailyRevenueObservableList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                statisticsFlowPane.getChildren().add(new DailyStatisticsCard(dailyRevenue).getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            dailyRevenueObservableList.addListener((ListChangeListener\u003cDailyRevenue\u003e) c -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                while (c.next()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    if (c.wasUpdated()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        logger.info(\"The List has been updated but not rendered\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        } else if (isMonthly) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            //TODO: Creates a single MonthlyStatisticsCard for DailyStatisticsCard of the same month and adds to Flow"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            // Pane"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        } else if (isYearly) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        //TODO: Creates a single YearlyStatisticsCard for DailyStatisticsCard of the same year and adds to the Flow Pane"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatsBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * The Browser Panel for the stats."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class StatsBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    // TODO: constructors for different modes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatsBrowserPanel(ObservableValue\u003cBill\u003e selectedBill) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Load person page when selected person changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        selectedBill.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            loadBillPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatsBrowserPanel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    // TODO: methods for different modes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private void loadBillPage(Bill bill) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + bill.getTableNumber() + bill.getTotalBill());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 17,
      "whyjayxp": 1,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Label currentMode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public StatusBarFooter(String mode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        currentMode.setText(mode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //restOrRant.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Updates the current mode display to the specified mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void updateMode(String newMode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        currentMode.setText(newMode);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 4,
      "whyjayxp": 16,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TableCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Table}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"TableCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RestOrRant level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Table table;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label tableNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label tableStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TableCard(Table table) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.table \u003d table;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tableNumber.setText(\"Table \" + this.table.getTableNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tableStatus.setText(\"Status: \" + this.table.getTableStatus());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof TableCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TableCard card \u003d (TableCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 table.equals(card.table);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    String changeMode(Mode mode);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 2,
      "whyjayxp": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 20,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 16,
      "-": 77
    }
  },
  {
    "path": "src/main/resources/view/BillBrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003cVBox maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"400\" minWidth\u003d\"600\" style\u003d\"-fx-background-color: #F9F8D4;\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cLabel fx:id\u003d\"receiptLabel\" styleClass\u003d\"receipt_big_label\" text\u003d\"RECEIPT\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cLabel fx:id\u003d\"tableNumber\" styleClass\u003d\"receipt_big_label\" text\u003d\"\\$tableNumber\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cTextArea id\u003d\"receipt\" editable\u003d\"false\" styleClass\u003d\"receipt_text\" text\u003d\"Receipt\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 27
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DailyStatisticsCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003cHBox id\u003d\"dailyStatisticsCardPane\" fx:id\u003d\"dailyStatisticsCardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003cVBox id\u003d\"dailyStatisticsCard\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" minWidth\u003d\"100\" maxWidth\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"15\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cLabel fx:id\u003d\"totalDailyRevenue\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$totalDailyRevenue\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$day.\\$month.\\$year\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 17
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#scrollPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#tableCardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3c3e3f;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-scale-shape: false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bava98"
        },
        "content": "#menuItemCardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-border-color: #3c3e3f;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-scale-shape: false;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#tableCard .label {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bava98"
        },
        "content": "#menuItemCard .label {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#tableFlowPane {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bava98"
        },
        "content": "#menuItemFlowPane {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bava98"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ".receipt_text {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-font-family: \"Courier New\", Courier, monospace;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-text-fill: #585858;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ".receipt_big_label {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-font-family: \"Courier New\", Courier, monospace;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    -fx-text-fill: #585858;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 13,
      "bava98": 14,
      "-": 367
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "         title\u003d\"RestOrRant\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "                  \u003cVBox fx:id\u003d\"itemList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"flowPanel\" minWidth\u003d\"442\" prefWidth\u003d\"442\" SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"scrollPane\" \u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"browserPlaceholder\" SplitPane.resizableWithParent\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bava98": 2,
      "whyjayxp": 4,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/MenuItemCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"menuItemCardPane\" fx:id\u003d\"menuItemCardPane\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "        \u003cVBox id\u003d\"menuItemCard\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" textFill\u003d\"white\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$code\" textFill\u003d\"white\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" textFill\u003d\"white\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bava98": 34
    }
  },
  {
    "path": "src/main/resources/view/MenuItemFlowPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003cFlowPane fx:id\u003d\"menuItemFlowPane\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "bava98": 5
    }
  },
  {
    "path": "src/main/resources/view/MenuListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"menuItemListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "bava98": 5,
      "whyjayxp": 1,
      "-": 1
    }
  },
  {
    "path": "src/main/resources/view/OrderItemListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                \u003cLabel fx:id\u003d\"menuItemCode\" text\u003d\"\\$menuItemCode\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            \u003cLabel fx:id\u003d\"tableNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$tableNumber\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 34
    }
  },
  {
    "path": "src/main/resources/view/OrderItemListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003cListView fx:id\u003d\"orderItemListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatisticsFlowPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "\u003cFlowPane fx:id\u003d\"StatisticsFlowPanel\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 5
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003cLabel fx:id\u003d\"currentMode\" GridPane.columnIndex\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \u003clink href\u003d\"DarkTheme.css\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/JsonMenuStorageTest/invalidAndValidMenuItem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"menu\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Chicken Nuggets\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W06\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"3.40\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"French Fries\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"Invalid1234\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"2.20\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 11
    }
  },
  {
    "path": "src/test/data/JsonMenuStorageTest/invalidMenuItem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"menu\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Invalid Name!@\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W06\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"3.40\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 7
    }
  },
  {
    "path": "src/test/data/JsonMenuStorageTest/notJsonFormatMenu.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "bava98": 1
    }
  },
  {
    "path": "src/test/data/JsonOrdersStorageTest/InvalidOrderItemOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"orderItems\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"Abc\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 8
    }
  },
  {
    "path": "src/test/data/JsonOrdersStorageTest/invalidAndValidOrderItemOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"orderItems\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"Abc\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"C02\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"2\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 13
    }
  },
  {
    "path": "src/test/data/JsonOrdersStorageTest/notJsonFormatOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuTest/duplicateMenuItem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"menu\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Chicken Nuggets\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W06\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"3.40\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Chicken Nuggets\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W06\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"2.30\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 11
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuTest/invalidMenuItem.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"_comment\": \"Menu item has invalid price\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"menu\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Chicken Nuggets\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W06\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"3.405\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableMenuTest/typicalMenuItems.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"_comment\": \"Menu save file which contains the same Menu item values as in TypicalRestOrRant#getTypicalMenuItems()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "  \"menu\": [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Chicken Wings\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W09\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"3.99\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"French Fries\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"W12\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"2.20\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Salad\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"A05\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"5.50\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Cheese Nachos\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"M17\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"7.23\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Shrimp Fried Rice\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"C02\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"8.90\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Mee Soi\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"T01\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"4.99\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Kimchi Fried Rice\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"K12\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"5.50\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"name\": \"Crepes\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"code\": \"F11\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    \"price\": \"7.50\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 36
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrdersTest/duplicateOrderItemOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"orderItems\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"5\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrdersTest/invalidOrderItemOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"orderItems\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"Abc\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableOrdersTest/typicalOrderItemsOrders.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"_comment\": \"Orders save file which contains the same OrderItem values as in TypicalRestOrRant#getTypicalOrderItems()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"orderItems\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"2\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W12\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"2\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"A05\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"M17\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"2\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"C02\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"2\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"4\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"T01\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"3\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"7\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"F11\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"4\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"K12\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"tableNumber\" : \"8\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"menuItemCode\" : \"W09\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityOrdered\" : \"3\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    \"quantityUnserved\" : \"0\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 49
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatisticsTest/invalidDailyRevenue.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"statisticsList\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\": \"32\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\": \"13\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\": \"2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\": \"32.00\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatisticsTest/typicalDailyRevenue.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"_comment\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"DailyRevenueList save file which contains same DailyRevenue values as inTypicalRestOrRant#getTypicalDailyRevenue()\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"statisticsList\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"16\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"03\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"18.60\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"17\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"03\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"24.50\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"18\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"03\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"200.10\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"31\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"03\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"240.20\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"01\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"04\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"70.30\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"02\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"04\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"77.30\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"03\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"04\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"2019\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"340.50\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"11\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"01\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"1998\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"240.00\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\" : \"11\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\" : \"03\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\" : \"1998\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\" : \"400.50\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 50
    }
  },
  {
    "path": "src/test/data/JsonStatisticsStorageTest/invalidAndValidDailyRevenue.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"statisticsList\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"day\": \"16\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"month\": \"03\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"year\": \"2019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"totalDailyRevenue\": \"18.60\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"day\": \"10\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"month\": \"02\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"year\": \"3003\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "      \"totalDailyRevenue\": \"24.50\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 15
    }
  },
  {
    "path": "src/test/data/JsonStatisticsStorageTest/invalidDailyRevenue.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  \"statisticsList\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"day\": \"32\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"month\": \"13\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"year\": \"2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    \"totalDailyRevenue\": \"32.00\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 8
    }
  },
  {
    "path": "src/test/data/JsonStatisticsStorageTest/notJsonFormatStatistics.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"menuFilePath\" : \"data/menu.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"ordersFilePath\" : \"data/orders.json\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"tablesFilePath\" : \"data/tables.json\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"statisticsFilePath\" : \"data/statistics.json\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"menuFilePath\" : \"data/menu.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"ordersFilePath\" : \"data/orders.json\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"tablesFilePath\" : \"data/tables.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "  \"statisticsFilePath\" : \"data/statistics.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BillBrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " * Provides a handle for {@code BillBrowserPanel}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillBrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String BILL_BROWSER_ID \u003d \"#billBrowser\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String TITLE_FEILD_ID \u003d \"#title\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String TABLE_NUMBER_FIELD_ID \u003d \"#tableNumber\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String RECEIPT_FIELD_ID \u003d \"#receipt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Label titleLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final Label tableNumberLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final TextArea receiptLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public BillBrowserPanelHandle(Node node) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(node);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        titleLabel \u003d getChildNode(TITLE_FEILD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumberLabel \u003d getChildNode(TABLE_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receiptLabel \u003d getChildNode(RECEIPT_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return titleLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String getTableNumber() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return tableNumberLabel.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public String getReceipt() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return receiptLabel.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns true if this handle contains {@code bill}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public boolean equals(Bill bill) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return getTableNumber().equals(bill.getTableNumber().tableNumber) \u0026\u0026 getReceipt().equals(bill.getReceipt());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 47,
      "-": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final OrderItemListPanelHandle orderItemListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final BillBrowserPanelHandle billBrowserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        orderItemListPanel \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                new OrderItemListPanelHandle(getChildNode(OrderItemListPanelHandle.ORDER_ITEM_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        billBrowserPanel \u003d new BillBrowserPanelHandle(getChildNode(BillBrowserPanelHandle.BILL_BROWSER_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemListPanelHandle getOrderItemListPanel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return orderItemListPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public BillBrowserPanelHandle getBillBrowserPanel() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return billBrowserPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 6,
      "whyjayxp": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderItemCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String TABLE_NUMBER_FIELD_ID \u003d \"#tableNumber\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String CODE_FIELD_ID \u003d \"#menuItemCode\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String QUANTITY_FIELD_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Label tableNumberLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Label menuItemCodeLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Label quantityLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumberLabel \u003d getChildNode(TABLE_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItemCodeLabel \u003d getChildNode(CODE_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantityLabel \u003d getChildNode(QUANTITY_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getTableNumber() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return tableNumberLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getMenuItemCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return menuItemCodeLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return quantityLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if this handle contains {@code orderItem}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean equals(OrderItem orderItem) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getTableNumber().equals(orderItem.getTableNumber().tableNumber) \u0026\u0026 getMenuItemCode().equals("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                orderItem.getMenuItemCode().itemCode) \u0026\u0026 getQuantity().equals("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                Integer.toString(orderItem.getQuantity()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 54
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderItemListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Provides a handle for {@code OrderItemListPanel} containing the list of {@code OrderItemCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemListPanelHandle extends NodeHandle\u003cListView\u003cOrderItem\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String ORDER_ITEM_LIST_VIEW_ID \u003d \"#orderItemListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Optional\u003cOrderItem\u003e lastRememberedSelectedOrderItemCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemListPanelHandle(ListView\u003cOrderItem\u003e orderItemListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        super(orderItemListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a handle to the selected {@code OrderItemCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e selectedOrderItemList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (selectedOrderItemList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"OrderItem list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .map(OrderItemCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedOrderItemList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Navigates the listview to display {@code orderItem}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void navigateToCard(OrderItem orderItem) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (!getRootNode().getItems().contains(orderItem)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalArgumentException(\"OrderItem does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            getRootNode().scrollTo(orderItem);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Selects the {@code OrderItemCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the orderItem card handle of a orderItem associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemCardHandle getOrderItemCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .map(OrderItemCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .filter(handle -\u003e handle.equals(getOrderItem(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private OrderItem getOrderItem(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Remembers the selected {@code OrderItemCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void rememberSelectedOrderItemCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            lastRememberedSelectedOrderItemCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            lastRememberedSelectedOrderItemCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if the selected {@code OrderItemCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code rememberSelectedOrderItemCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean isSelectedOrderItemCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return lastRememberedSelectedOrderItemCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return !lastRememberedSelectedOrderItemCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    || !lastRememberedSelectedOrderItemCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String CURRENT_MODE_ID \u003d \"#currentMode\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final Labeled currentModeNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private String lastRememberedCurrentMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        currentModeNode \u003d getChildNode(CURRENT_MODE_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the text of the \u0027current mode\u0027 portion of the status bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public String getCurrentMode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return currentModeNode.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Remembers the content of the \u0027current mode\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void rememberCurrentMode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        lastRememberedCurrentMode \u003d getCurrentMode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns true if the current content of the \u0027current mode\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * recent {@code rememberCurrentMode()} call."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public boolean isCurrentModeChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return !lastRememberedCurrentMode.equals(getCurrentMode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 14,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonMenuStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonOrdersStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.storage.JsonTablesStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Path TABLES_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleTables.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Path ORDERS_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleOrders.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Path MENU_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleMenu.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Path STATS_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleStats.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Supplier\u003cReadOnlyRestOrRant\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path tablesFileLocation \u003d TABLES_FOR_TESTING;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path ordersFileLocation \u003d ORDERS_FOR_TESTING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path menuFileLocation \u003d MENU_FOR_TESTING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path statsFileLocation \u003d STATS_FOR_TESTING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyRestOrRant\u003e initialDataSupplier, Path tablesFileLocation,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                   Path ordersFileLocation, Path menuFileLocation, Path statsFileLocation) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tablesFileLocation \u003d tablesFileLocation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.ordersFileLocation \u003d ordersFileLocation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.menuFileLocation \u003d menuFileLocation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.statsFileLocation \u003d statsFileLocation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            JsonTablesStorage jsonTablesStorage \u003d new JsonTablesStorage(tablesFileLocation);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            JsonOrdersStorage jsonOrdersStorage \u003d new JsonOrdersStorage(ordersFileLocation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            JsonMenuStorage jsonMenuStorage \u003d new JsonMenuStorage(menuFileLocation);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            JsonStatisticsStorage jsonStatsStorage \u003d new JsonStatisticsStorage(statsFileLocation);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                ReadOnlyRestOrRant restOrRant \u003d initialDataSupplier.get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                jsonTablesStorage.saveTables(restOrRant.getTables());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                jsonOrdersStorage.saveOrders(restOrRant.getOrders());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                jsonMenuStorage.saveMenu(restOrRant.getMenu());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                jsonStatsStorage.saveStatistics(restOrRant.getStatistics());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setTablesFilePath(tablesFileLocation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setOrdersFilePath(ordersFileLocation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setMenuFilePath(menuFileLocation);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setStatisticsFilePath(statsFileLocation);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a defensive copy of the RestOrRant data stored inside the storage files."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRant readStorageRestOrRant() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new RestOrRant(storage.readOrders().get(), storage.readMenu().get(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    storage.readTables().get(), storage.readStatistics().get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"Data is not in the RestOrRant format.\", dce);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the file path of the tables storage file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getTableStorageLocation() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return storage.getTableFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the file path of the orders storage file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getOrdersStorageLocation() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return storage.getOrdersFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the file path of the menu storage file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getMenuStorageLocation() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return storage.getMenuFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the file path of the statistics storage file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Path getStatisticsStorageLocation() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return storage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Model copy \u003d new ModelManager((model.getRestOrRant()), new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelHelper.setOrderItemFilteredList(copy, model.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelHelper.setMenuItemFilteredList(copy, model.getFilteredMenuItemList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelHelper.setTableFilteredList(copy, model.getFilteredTableList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        ModelHelper.setDailyRevenueFilteredList(copy, model.getFilteredDailyRevenueList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1,
      "whyjayxp": 67,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTableCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonMenuStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonOrdersStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonTablesStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TableBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTablesStorage jsonTablesStorage \u003d new JsonTablesStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonOrdersStorage jsonOrdersStorage \u003d new JsonOrdersStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonMenuStorage jsonMenuStorage \u003d new JsonMenuStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, jsonOrdersStorage, jsonMenuStorage,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonStatisticsStorage, jsonTablesStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addTableCommand \u003d AddTableCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(addTableCommand, AddTableCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addTableCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Setup LogicManager with JsonRestOrRantIoExceptionThrowingStub"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        //        JsonRestOrRantStorage jsonRestOrRantStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //                new JsonRestOrRantIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonOrdersStorage jsonOrdersStorage \u003d new JsonOrdersIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonMenuStorage jsonMenuStorage \u003d new JsonMenuIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonStatisticsIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTablesStorage jsonTablesStorage \u003d new JsonTablesIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, jsonOrdersStorage, jsonMenuStorage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                jsonStatisticsStorage, jsonTablesStorage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //        expectedModel.updateMode();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        //        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute addTable command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String addTableCommand \u003d AddTableCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Table expectedTable \u003d new TableBuilder().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItem expectedOrderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        MenuItem expectedMenuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        DailyRevenue expectedDailyRevenue \u003d new StatisticsBuilder().build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addTable(expectedTable);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addOrderItem(expectedOrderItem);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addMenuItem(expectedMenuItem);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addDailyRevenue(expectedDailyRevenue);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addTableCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addTableCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void getFilteredPersonsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //        logic.getFilteredPersonsList().remove(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredOrderItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredOrderItemList().remove(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredMenuItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredMenuItemList().remove(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredTableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredTableList().remove(0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredDailyRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredDailyRevenueList().remove(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static class JsonRestOrRantIoExceptionThrowingStub extends JsonRestOrRantStorage {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    //        private JsonRestOrRantIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    //            super(filePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    //        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    //        public void saveRestOrRant(ReadOnlyRestOrRant restOrRant, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    //            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonOrdersIoExceptionThrowingStub extends JsonOrdersStorage {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonOrdersIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveOrders(ReadOnlyOrders orders, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonMenuIoExceptionThrowingStub extends JsonMenuStorage {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonMenuIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonStatisticsIoExceptionThrowingStub extends JsonStatisticsStorage {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonStatisticsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonTablesIoExceptionThrowingStub extends JsonTablesStorage {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonTablesIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveTables(ReadOnlyTables tables, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 2,
      "-": 296
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToMenuCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class AddToMenuCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "        model \u003d new ModelManager(getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void execute_newMenuItem_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem validMenuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        expectedModel.addMenuItem(validMenuItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        expectedModel.updateMode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertCommandSuccess(Mode.MENU_MODE, new AddToMenuCommand(validMenuItem), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "                String.format(AddToMenuCommand.MESSAGE_SUCCESS, validMenuItem), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void execute_duplicateMenuItem_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem menuItemInList \u003d model.getRestOrRant().getMenu().getMenuItemList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertCommandFailure(Mode.MENU_MODE, new AddToMenuCommand(menuItemInList), model, commandHistory,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "                AddToMenuCommand.MESSAGE_DUPLICATE_MENU_ITEM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 3,
      "bava98": 40,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToMenuCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class AddToMenuCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_nullMenuItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        new AddToMenuCommand(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void execute_menuItemAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommandTest.ModelStubAcceptingMenuItemAdded modelStub \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "                new AddToMenuCommandTest.ModelStubAcceptingMenuItemAdded();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem validMenuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        CommandResult commandResult \u003d new AddToMenuCommand(validMenuItem).execute("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "                Mode.MENU_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(String.format(AddToMenuCommand.MESSAGE_SUCCESS, validMenuItem),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(Arrays.asList(validMenuItem), modelStub.menuItemsAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void execute_duplicateMenuItem_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem validMenuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommand addToMenuCommand \u003d new AddToMenuCommand(validMenuItem);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommandTest.ModelStub modelStub \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "                new AddToMenuCommandTest.ModelStubWithMenuItem(validMenuItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expectMessage(AddToMenuCommand.MESSAGE_DUPLICATE_MENU_ITEM);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "        addToMenuCommand.execute(Mode.MENU_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem burger \u003d new MenuItemBuilder().withName(\"Burger\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem sandwich \u003d new MenuItemBuilder().withName(\"Sandwich\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommand addBurgerCommand \u003d new AddToMenuCommand(burger);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommand addSandwichCommand \u003d new AddToMenuCommand(sandwich);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(addBurgerCommand.equals(addBurgerCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommand addBurgerCommandCopy \u003d new AddToMenuCommand(burger);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(addBurgerCommand.equals(addBurgerCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(addBurgerCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(addBurgerCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(addBurgerCommand.equals(addSandwichCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setOrdersFilePath(Path ordersFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setTablesFilePath(Path tablesFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setStatisticsFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setRestOrRant(ReadOnlyRestOrRant newData) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateMode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void deleteMenuItem(MenuItem target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setMenuItem(MenuItem target, MenuItem editedItem) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cMenuItem\u003e getFilteredMenuItemList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateFilteredMenuItemList(Predicate\u003cMenuItem\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public MenuItem getSelectedMenuItem() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setSelectedMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateMenu() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void deleteOrderItem(OrderItem target) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setOrderItem(OrderItem target, OrderItem editedItem) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateFilteredOrderItemList(Predicate\u003cOrderItem\u003e predicate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public OrderItem getSelectedOrderItem() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setSelectedOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateOrders() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasTable(Table table) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addTable(Table table) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public TableNumber addTable(TableStatus tableStatus) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void deleteTable(Table target) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setTable(Table target, Table editedItem) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cTable\u003e getFilteredTableList() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateFilteredTableList(Predicate\u003cTable\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyProperty\u003cTable\u003e selectedTableProperty() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Table getSelectedTable() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setSelectedTable(Table table) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateTables() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setRecentBill(Bill target) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setDailyRevenue(DailyRevenue target, DailyRevenue editedRevenue) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Bill getRecentBill() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateFilteredDailyRevenueList(Predicate\u003cDailyRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyProperty\u003cBill\u003e recentBillProperty() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public DailyRevenue getSelectedDailyRevenue() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void setSelectedDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void deleteDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateStatistics() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private class ModelStubWithMenuItem extends AddToMenuCommandTest.ModelStub {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "bava98"
        },
        "content": "        private final MenuItem menuItem;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ModelStubWithMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "bava98"
        },
        "content": "            requireNonNull(menuItem);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "bava98"
        },
        "content": "            this.menuItem \u003d menuItem;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "bava98"
        },
        "content": "            requireNonNull(menuItem);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return this.menuItem.isSameMenuItem(menuItem);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private class ModelStubAcceptingMenuItemAdded extends AddToMenuCommandTest.ModelStub {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "bava98"
        },
        "content": "        final ArrayList\u003cMenuItem\u003e menuItemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "bava98"
        },
        "content": "            requireNonNull(menuItem);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return menuItemsAdded.stream().anyMatch(menuItem::isSameMenuItem);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "bava98"
        },
        "content": "            requireNonNull(menuItem);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menuItemsAdded.add(menuItem);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void updateMode() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "bava98"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return new RestOrRant();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 441,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToOrderCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CHICKEN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE8_W09;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE8_W12;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddToOrderCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class AddToOrderCommandIntegrationTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model \u003d new ModelManager(getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_newOrderItem_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemCodes.add(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemQuantities.add(3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(TABLE8_W09);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.addOrderItem(TABLE8_W09);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // expectedModel.updateMode(); TODO: Why?"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable(model.getRestOrRant().getTables().getTableFromNumber(new TableNumber(\"8\")).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandSuccess(Mode.TABLE_MODE, new AddToOrderCommand(itemCodes, itemQuantities), model, commandHistory,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                String.format(AddToOrderCommand.MESSAGE_SUCCESS, orderItems), expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_newOrderItems_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemCodes.add(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemCodes.add(new Code(VALID_CODE_FRIES));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemQuantities.add(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemQuantities.add(2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(TABLE8_W09);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(TABLE8_W12);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.addOrderItem(TABLE8_W09);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.addOrderItem(TABLE8_W12);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // expectedModel.updateMode(); TODO: Why?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable(model.getRestOrRant().getTables().getTableFromNumber(new TableNumber(\"8\")).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandSuccess(Mode.TABLE_MODE, new AddToOrderCommand(itemCodes, itemQuantities), model, commandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                String.format(AddToOrderCommand.MESSAGE_SUCCESS, orderItems), expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_invalidItemCode_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable(model.getRestOrRant().getTables().getTableFromNumber(new TableNumber(\"3\")).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandFailure(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new AddToOrderCommand(Collections.singletonList(new Code(\"B99\")), Collections.singletonList(5)), model,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                commandHistory, AddToOrderCommand.MESSAGE_INVALID_ITEM_CODE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_duplicateOrderItem_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem orderItemInList \u003d model.getRestOrRant().getOrders().getOrderItemList().get(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                model.getRestOrRant().getTables().getTableFromNumber(orderItemInList.getTableNumber()).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandFailure(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new AddToOrderCommand(Collections.singletonList(orderItemInList.getMenuItemCode()),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        Collections.singletonList(orderItemInList.getQuantity())), model, commandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                AddToOrderCommand.MESSAGE_DUPLICATE_ORDER_ITEM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddToOrderCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.TableBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class AddToOrderCommandTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void constructor_nullItemCodes_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        new AddToOrderCommand(null, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void constructor_nullItemQuantities_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        new AddToOrderCommand(new ArrayList\u003c\u003e(), null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_orderItemsAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelStubAcceptingOrderItemAdded modelStub \u003d new ModelStubAcceptingOrderItemAdded();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemCodes.add(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemQuantities.add(3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e orderItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(new OrderItemBuilder().build());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // adding single order item"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        CommandResult commandResult \u003d new AddToOrderCommand(itemCodes, itemQuantities).execute("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                Mode.TABLE_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(String.format(AddToOrderCommand.MESSAGE_SUCCESS, orderItems), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(orderItems, modelStub.orderItemsAdded);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // adding multiple order items"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemCodes.add(new Code(VALID_CODE_FRIES));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        itemQuantities.add(3);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItems.add(new OrderItemBuilder().withCode(VALID_CODE_FRIES).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        commandResult \u003d new AddToOrderCommand(itemCodes, itemQuantities).execute("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                Mode.TABLE_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(String.format(AddToOrderCommand.MESSAGE_SUCCESS, orderItems), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(orderItems, modelStub.orderItemsAdded);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_invalidItemCode_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d Collections.singletonList(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d Collections.singletonList(3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand addToOrderCommand \u003d new AddToOrderCommand(itemCodes, itemQuantities);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithoutItemCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expectMessage(AddToOrderCommand.MESSAGE_INVALID_ITEM_CODE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        addToOrderCommand.execute(Mode.TABLE_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_duplicateOrderItem_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e itemCodes \u003d Collections.singletonList(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e itemQuantities \u003d Collections.singletonList(3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem validOrderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand addCommand \u003d new AddToOrderCommand(itemCodes, itemQuantities);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithOrderItem(validOrderItem);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expectMessage(AddToOrderCommand.MESSAGE_DUPLICATE_ORDER_ITEM);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        addCommand.execute(Mode.TABLE_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e codeW09 \u003d Collections.singletonList(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e quantityW09 \u003d Collections.singletonList(2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e codeW12 \u003d Collections.singletonList(new Code(VALID_CODE_FRIES));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e quantityW12 \u003d Collections.singletonList(3);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand addW09Command \u003d new AddToOrderCommand(codeW09, quantityW09);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand addW12Command \u003d new AddToOrderCommand(codeW12, quantityW12);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(addW09Command.equals(addW09Command));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand addW09CommandCopy \u003d new AddToOrderCommand(codeW09, quantityW09);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(addW09Command.equals(addW09CommandCopy));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(addW09Command.equals(1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(addW09Command.equals(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different orderItem -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(addW09Command.equals(addW12Command));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A default model stub that have all of the methods failing, except getSelectedTable() which returns table 1."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * This model stub assumes that the program is in Table Mode for table 1."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        private final Table table \u003d new TableBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setTablesFilePath(Path tablesFilePath) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setOrdersFilePath(Path ordersFilePath) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setStatisticsFilePath(Path statisticsFilePath) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setRestOrRant(ReadOnlyRestOrRant restOrRant) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateMode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void deleteOrderItem(OrderItem target) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setOrderItem(OrderItem target, OrderItem editedOrderItem) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateFilteredOrderItemList(Predicate\u003cOrderItem\u003e predicate) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public OrderItem getSelectedOrderItem() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setSelectedOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateOrders() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void deleteDailyRevenue(DailyRevenue target) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addTable(Table table) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public TableNumber addTable(TableStatus tableStatus) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasTable(Table table) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void deleteTable(Table target) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setTable(Table target, Table editedTable) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cTable\u003e getFilteredTableList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateFilteredTableList(Predicate\u003cTable\u003e predicate) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyProperty\u003cTable\u003e selectedTableProperty() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Table getSelectedTable() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return table;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setSelectedTable(Table table) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateTables() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void deleteMenuItem(MenuItem target) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setMenuItem(MenuItem target, MenuItem editedMenuItem) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cMenuItem\u003e getFilteredMenuItemList() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateFilteredMenuItemList(Predicate\u003cMenuItem\u003e predicate) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public MenuItem getSelectedMenuItem() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setSelectedMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateMenu() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setDailyRevenue(DailyRevenue target, DailyRevenue editedDailyRevenue) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateFilteredDailyRevenueList(Predicate\u003cDailyRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public DailyRevenue getSelectedDailyRevenue() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setSelectedDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyProperty\u003cBill\u003e recentBillProperty() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Bill getRecentBill() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void setRecentBill(Bill bill) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateStatistics() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A default menu stub that has all methods failing, except getItemFromCode() which returns an empty Optional."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class MenuStub implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cMenuItem\u003e getMenuItemList() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Optional\u003cMenuItem\u003e getItemFromCode(Code code) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Name getNameFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Code getCodeFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Price getPriceFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A menu stub that always returns an item for any given code."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class MenuStubWithItemCodes extends MenuStub {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public Optional\u003cMenuItem\u003e getItemFromCode(Code code) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return Optional.of(new MenuItemBuilder().build());"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A default RestOrRant stub that has all of the methods failing, except getMenu() which returns an empty menu."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class RestOrRantStub implements ReadOnlyRestOrRant {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new MenuStub();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyOrders getOrders() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyStatistics getStatistics() {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyTables getTables() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A RestOrRant stub whose menu will return an item for any given code."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class RestOrRantStubWithItemCodes extends RestOrRantStub {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new MenuStubWithItemCodes();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A Model stub that does not contain any menu items (and thus all codes are invalid)."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class ModelStubWithoutItemCode extends ModelStub {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new RestOrRantStub();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A Model stub that contains a single orderItem."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class ModelStubWithOrderItem extends ModelStub {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        private final OrderItem orderItem;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelStubWithOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            requireNonNull(orderItem);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            this.orderItem \u003d orderItem;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new RestOrRantStubWithItemCodes();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            requireNonNull(orderItem);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return this.orderItem.isSameOrderItem(orderItem);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A Model stub that always accept the orderItem being added."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private class ModelStubAcceptingOrderItemAdded extends ModelStub {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final ArrayList\u003cOrderItem\u003e orderItemsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return new RestOrRantStubWithItemCodes();"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            requireNonNull(orderItem);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return orderItemsAdded.stream().anyMatch(orderItem::isSameOrderItem);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            requireNonNull(orderItem);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            orderItemsAdded.add(orderItem);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void updateOrders() {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            // called by {@code AddToOrderCommand#execute()}"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 617
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BillCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        model \u003d new ModelManager(getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void execute_newDailyRevenue_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue validDailyRevenue \u003d new StatisticsBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill bill \u003d new StatisticsBuilder().buildBill();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedModel.addDailyRevenue(validDailyRevenue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertCommandSuccess(Mode.BILL_MODE, new BillCommand(bill), model, commandHistory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                String.format(BillCommand.MESSAGE_SUCCESS, bill), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BillCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        new BillCommand(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_dailyRevenueAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        BillCommandTest.ModelStubAcceptingDailyRevenueAdded modelStub \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                new BillCommandTest.ModelStubAcceptingDailyRevenueAdded();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue validDailyRevenue \u003d new StatisticsBuilder().withTotalDailyRevenue(\"$300.50\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill validBill \u003d new StatisticsBuilder().buildBill();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        CommandResult commandResult \u003d new BillCommand(validBill).execute("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                Mode.MENU_MODE, modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        validBill \u003d modelStub.updateBill(validBill);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        modelStub.updateDailyRevenue(validBill);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(validBill, modelStub.getRecentBill());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(String.format(BillCommand.MESSAGE_SUCCESS, validBill),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(Arrays.asList(validDailyRevenue), modelStub.dailyRevenuesAdded);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill bill1 \u003d new StatisticsBuilder().withTotalBill(\"45.50\").buildBill();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill bill2 \u003d new StatisticsBuilder().withTotalBill(\"42.75\").buildBill();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        BillCommand addBill1Command \u003d new BillCommand(bill1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        BillCommand addBill2Command \u003d new BillCommand(bill2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(addBill1Command.equals(addBill1Command));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        BillCommand addBill1CommandCopy \u003d new BillCommand(bill1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(addBill1CommandCopy.equals(addBill1CommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(addBill1CommandCopy.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(addBill1CommandCopy.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different bill -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(addBill1CommandCopy.equals(addBill2Command));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Path getOrdersFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setOrdersFilePath(Path ordersFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Path getTablesFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setTablesFilePath(Path tablesFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setStatisticsFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setRestOrRant(ReadOnlyRestOrRant newData) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateMode() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public boolean hasMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void deleteMenuItem(MenuItem target) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setMenuItem(MenuItem target, MenuItem editedItem) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cMenuItem\u003e getFilteredMenuItemList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateFilteredMenuItemList(Predicate\u003cMenuItem\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyProperty\u003cMenuItem\u003e selectedMenuItemProperty() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public MenuItem getSelectedMenuItem() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setSelectedMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateMenu() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public boolean hasOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void deleteOrderItem(OrderItem target) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setOrderItem(OrderItem target, OrderItem editedItem) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cOrderItem\u003e getFilteredOrderItemList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateFilteredOrderItemList(Predicate\u003cOrderItem\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyProperty\u003cOrderItem\u003e selectedOrderItemProperty() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public OrderItem getSelectedOrderItem() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setSelectedOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateOrders() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public boolean hasTable(Table table) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addTable(Table table) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public TableNumber addTable(TableStatus tableStatus) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void deleteTable(Table target) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setTable(Table target, Table editedItem) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cTable\u003e getFilteredTableList() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateFilteredTableList(Predicate\u003cTable\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyProperty\u003cTable\u003e selectedTableProperty() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Table getSelectedTable() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setSelectedTable(Table table) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateTables() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setRecentBill(Bill target) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setDailyRevenue(DailyRevenue target, DailyRevenue editedRevenue) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Bill getRecentBill() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getFilteredDailyRevenueList() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateFilteredDailyRevenueList(Predicate\u003cDailyRevenue\u003e predicate) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyProperty\u003cDailyRevenue\u003e selectedDailyRevenueProperty() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyProperty\u003cBill\u003e recentBillProperty() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public DailyRevenue getSelectedDailyRevenue() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void setSelectedDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void deleteDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateStatistics() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * A Model stub that always accept the daily revenue being added."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private class ModelStubAcceptingDailyRevenueAdded extends BillCommandTest.ModelStub {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        final ArrayList\u003cDailyRevenue\u003e dailyRevenuesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "         * Updates the total daily revenue when a bill is calculated."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateDailyRevenue(Bill bill) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            DailyRevenue dailyRevenue \u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    new DailyRevenue(bill.getDay(), bill.getMonth(), bill.getYear(), bill.getTotalBill());"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            if (hasDailyRevenue(dailyRevenue)) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                setDailyRevenue(dailyRevenue, new DailyRevenue(bill.getDay(), bill.getMonth(), bill.getYear(),"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        dailyRevenue.getTotalDailyRevenue() + bill.getTotalBill()));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "         * Updates the total price of the bill."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public Bill updateBill(Bill bill) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            final StringBuilder receipt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            receipt.append(\"Table \").append(getSelectedTable().getTableNumber()).append(\"\\n\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            float totalBill \u003d 0;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            for (OrderItem orderItem : getFilteredOrderItemList()) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                MenuItem menuItem \u003d getRestOrRant().getMenu().getItemFromCode(orderItem.getMenuItemCode()).get();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                receipt.append(menuItem.getCode().itemCode)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"  \")"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(menuItem.getName().itemName)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"\\n $\")"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(menuItem.getPrice().itemPrice)"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"   x \")"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(orderItem.getQuantity())"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"\\n\")"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"Total Bill: $ \")"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(bill.getTotalBill())"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                        .append(\"\\n\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                totalBill +\u003d Float.parseFloat(menuItem.getPrice().toString()) * orderItem.getQuantity();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return new Bill(bill.getDay(), bill.getMonth(), bill.getYear(), bill.getTableNumber(),"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                    totalBill, bill.getReceipt());"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public boolean hasDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            requireNonNull(dailyRevenue);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return dailyRevenuesAdded.stream().anyMatch(dailyRevenue::isSameDailyRevenue);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            requireNonNull(dailyRevenue);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            dailyRevenuesAdded.add(dailyRevenue);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void updateMode() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ReadOnlyRestOrRant getRestOrRant() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return new RestOrRant();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 466,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalRestOrRant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.updateMode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(Mode.RESTAURANT_MODE, new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(TypicalRestOrRant.getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(TypicalRestOrRant.getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.setRestOrRant(new RestOrRant());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.updateMode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(Mode.RESTAURANT_MODE, new ClearCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addr"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_CHICKEN \u003d \"Chicken Wings\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_FRIES \u003d \"French Fries\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CODE_CHICKEN \u003d \"W09\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CODE_FRIES \u003d \"W12\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PRICE_CHICKEN \u003d \"4.50\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PRICE_FRIES \u003d \"3.70\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TABLE_NUMBER_1 \u003d \"1\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TABLE_NUMBER_2 \u003d \"2\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TABLE_STATUS_1 \u003d \"0/4\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TABLE_STATUS_2 \u003d \"3/5\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_QUANTITY_3 \u003d \"3\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_QUANTITY_2 \u003d \"2\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_DAY_1 \u003d \"01\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_DAY_31 \u003d \"31\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_MONTH_1 \u003d \"1\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_MONTH_12 \u003d \"12\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_YEAR_2019 \u003d \"2019\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String VALID_YEAR_1998 \u003d \"1998\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_CHICKEN \u003d \" \" + PREFIX_NAME + VALID_NAME_CHICKEN;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_FRIES \u003d \" \" + PREFIX_NAME + VALID_NAME_FRIES;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CODE_DESC_CHICKEN \u003d \" \" + PREFIX_CODE + VALID_CODE_CHICKEN;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CODE_DESC_FRIES \u003d \" \" + PREFIX_CODE + VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PRICE_DESC_CHICKEN \u003d \" \" + PREFIX_PRICE + VALID_PRICE_CHICKEN;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PRICE_DESC_FRIES \u003d \" \" + PREFIX_PRICE + VALID_PRICE_FRIES;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_DESC_2_CHICKEN \u003d \" \" + VALID_CODE_CHICKEN + \" \" + VALID_QUANTITY_2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ORDER_DESC_3_FRIES \u003d \" \" + VALID_CODE_FRIES + \" \" + VALID_QUANTITY_3;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DATE_DESC_1_JAN_2019 \u003d \" \" + VALID_DAY_1 + \".\" + VALID_MONTH_1 + \".\" + VALID_YEAR_2019;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DATE_DESC_31_DEC_1998 \u003d \" \" + VALID_DAY_31 + \".\" + VALID_MONTH_12 + \".\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            + VALID_YEAR_1998;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \" Chicken Wings\"; // \u0027 \u0027 not allowed in front"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_CODE_DESC \u003d \" \" + PREFIX_CODE + \"31A\"; // first character should be a letter"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"a.50\"; // \u0027a\u0027 not allowed in price"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String INVALID_ORDER_CODE_DESC \u003d \" \" + \"31A\" + \" \" + VALID_QUANTITY_2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String INVALID_ORDER_QUANTITY_DESC \u003d \" \" + VALID_CODE_CHICKEN + \" \" + \"A\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String INVALID_ORDER_DESC \u003d \" \" + VALID_QUANTITY_2 + \" \" + VALID_CODE_CHICKEN; // order swapped"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + VALID_DAY_1 + \".\" + VALID_MONTH_1 + \".2020\"; //Future date"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: Can remove if all future commands and tests do not use it."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertCommandSuccess(Mode mode, Command command, Model actualModel,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandHistory actualCommandHistory, CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(mode, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Mode mode, Command, Model, CommandHistory, CommandResult,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Model)} that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertCommandSuccess(Mode mode, Command command, Model actualModel,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandHistory actualCommandHistory, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(mode, command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * - the RestOrRant, filtered order item list, filtered menu item list, filtered dailyRevenue list, filtered"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - table list \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - and selected order item, selected menu item, selected dailyRevenue, selected table \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - in {@code actualModel} remain unchanged {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Mode mode, Command command, Model actualModel,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandHistory actualCommandHistory, String expectedMessage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonsList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        //        Person expectedSelectedPerson \u003d actualModel.getSelectedPerson();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant expectedRestOrRant \u003d new RestOrRant(actualModel.getRestOrRant());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cOrderItem\u003e expectedFilteredOrderItemList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cMenuItem\u003e expectedFilteredMenuItemList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMenuItemList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cDailyRevenue\u003e expectedFilteredDailyRevenueList \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new ArrayList\u003c\u003e(actualModel.getFilteredDailyRevenueList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTable\u003e expectedFilteredTableList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTableList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItem expectedSelectedOrderItem \u003d actualModel.getSelectedOrderItem();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        MenuItem expectedSelectedMenuItem \u003d actualModel.getSelectedMenuItem();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Table expectedSelectedTable \u003d actualModel.getSelectedTable();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        DailyRevenue expectedSelectedDailyRevenue \u003d actualModel.getSelectedDailyRevenue();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            command.execute(mode, actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            assertEquals(expectedRestOrRant, actualModel.getRestOrRant());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            //            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            //            assertEquals(expectedSelectedPerson, actualModel.getSelectedPerson());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredOrderItemList, actualModel.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredMenuItemList, actualModel.getFilteredMenuItemList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredTableList, actualModel.getFilteredTableList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredDailyRevenueList, actualModel.getFilteredDailyRevenueList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedOrderItem, actualModel.getSelectedOrderItem());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedMenuItem, actualModel.getSelectedMenuItem());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedTable, actualModel.getSelectedTable());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedSelectedDailyRevenue, actualModel.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    //        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    //        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the order item at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showOrderItemAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredOrderItemList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItem orderItem \u003d model.getFilteredOrderItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        final TableNumber tableNumber \u003d orderItem.getTableNumber();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        final Code menuItemCode \u003d orderItem.getMenuItemCode();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredOrderItemList("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            item -\u003e tableNumber.equals(item.getTableNumber()) \u0026\u0026 menuItemCode.equals(item.getMenuItemCode()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredOrderItemList().size());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the menu item at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showMenuItemAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMenuItemList().size());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        MenuItem menuItem \u003d model.getFilteredMenuItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        final Code code \u003d menuItem.getCode();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredMenuItemList(item -\u003e code.equals(item.getCode()));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredMenuItemList().size());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the table at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showTableAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTableList().size());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        Table table \u003d model.getFilteredTableList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        final TableNumber tableNumber \u003d table.getTableNumber();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredTableList(item -\u003e tableNumber.equals(table.getTableNumber()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredTableList().size());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the dailyRevenue at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showDailyRevenueAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDailyRevenueList().size());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        DailyRevenue dailyRevenue \u003d model.getFilteredDailyRevenueList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        final Day day \u003d dailyRevenue.getDay();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        final Month month \u003d dailyRevenue.getMonth();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        final Year year \u003d dailyRevenue.getYear();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredDailyRevenueList(item -\u003e day.equals(item.getDay()) \u0026\u0026 month.equals(item.getMonth())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 year.equals(item.getYear()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredDailyRevenueList().size());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    //        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    //        model.updateMode();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first order item in {@code model}\u0027s filtered list from {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstOrderItem(Model model) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItem firstOrderItem \u003d model.getFilteredOrderItemList().get(0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteOrderItem(firstOrderItem);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first menu item in {@code model}\u0027s filtered list from {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstMenuItem(Model model) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        MenuItem firstMenuItem \u003d model.getFilteredMenuItemList().get(0);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteMenuItem(firstMenuItem);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first table in {@code model}\u0027s filtered list from {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstTable(Model model) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        Table firstTable \u003d model.getFilteredTableList().get(0);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteTable(firstTable);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first dailyRevenue in {@code model}\u0027s filtered list from {@code model}\u0027s restaurant."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstDailyRevenue(Model model) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        DailyRevenue firstDailyRevenue \u003d model.getFilteredDailyRevenueList().get(0);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteDailyRevenue(firstDailyRevenue);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 11,
      "whyjayxp": 15,
      "Qing-Yuan": 1,
      "-": 284
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TableModeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE_CHANGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TABLE_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.TableModeCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code TableModeCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class TableModeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRestOrRant(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void constructor_nullTableNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        new TableModeCommand(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_validTableNumber_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableNumber tableNumber \u003d new TableNumber(\"1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand tableModeCommand \u003d new TableModeCommand(tableNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.updateFilteredTableList(Model.PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.setSelectedTable(model.getRestOrRant().getTables().getTableFromNumber(tableNumber).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedModel.updateFilteredOrderItemList(orderItem -\u003e orderItem.getTableNumber().equals(tableNumber));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        CommandResult expectedResult \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new CommandResult(String.format(MESSAGE_SUCCESS, tableNumber), false, false, Mode.TABLE_MODE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandSuccess(Mode.RESTAURANT_MODE, tableModeCommand, model, commandHistory, expectedResult,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_invalidModeChange_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand tableModeCommand \u003d new TableModeCommand(new TableNumber(\"1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.setSelectedTable(model.getRestOrRant().getTables().getTableFromNumber(new TableNumber(\"1\")).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandFailure(Mode.TABLE_MODE, tableModeCommand, model, commandHistory, MESSAGE_INVALID_MODE_CHANGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void execute_invalidTableNumber_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand tableModeCommand \u003d new TableModeCommand(new TableNumber(\"10\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCommandFailure(Mode.RESTAURANT_MODE, tableModeCommand, model, commandHistory,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                MESSAGE_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand firstCommand \u003d new TableModeCommand(new TableNumber(\"1\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand secondCommand \u003d new TableModeCommand(new TableNumber(\"2\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        TableModeCommand firstCommandCopy \u003d new TableModeCommand(new TableNumber(\"1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddToMenuCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CODE_DESC_FRIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CODE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_FRIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_FRIES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FRIES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_FRIES;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.commands.AddToMenuCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class AddToMenuCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private AddToMenuCommandParser parser \u003d new AddToMenuCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem expectedMenuItem \u003d new MenuItemBuilder(FRENCH_FRIES).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_FRIES + CODE_DESC_FRIES + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "                new AddToMenuCommand(expectedMenuItem));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN + NAME_DESC_FRIES + CODE_DESC_FRIES + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "                new AddToMenuCommand(expectedMenuItem));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // multiple codes - last code accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FRIES + CODE_DESC_CHICKEN + CODE_DESC_FRIES + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "                new AddToMenuCommand(expectedMenuItem));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // multiple prices - last price accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_FRIES + CODE_DESC_FRIES + PRICE_DESC_CHICKEN + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddToMenuCommand(expectedMenuItem));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToMenuCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FRIES + CODE_DESC_FRIES + PRICE_DESC_FRIES, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // missing code prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FRIES + VALID_CODE_FRIES + PRICE_DESC_FRIES, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // missing price prefix"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FRIES + CODE_DESC_FRIES + VALID_PRICE_FRIES, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_FRIES + VALID_CODE_FRIES + VALID_PRICE_FRIES, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CODE_DESC_FRIES + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FRIES + INVALID_CODE_DESC + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "                Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_FRIES + CODE_DESC_FRIES + INVALID_PRICE_DESC,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "                Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CODE_DESC_FRIES + INVALID_PRICE_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_FRIES + CODE_DESC_FRIES + PRICE_DESC_FRIES,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToMenuCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 73,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddToOrderCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_CODE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_QUANTITY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_2_CHICKEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORDER_DESC_3_FRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.AddToOrderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class AddToOrderCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private AddToOrderCommandParser parser \u003d new AddToOrderCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cCode\u003e expectedCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedCodes.add(new Code(VALID_CODE_CHICKEN));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cInteger\u003e expectedQuantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedQuantities.add(2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ORDER_DESC_2_CHICKEN,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new AddToOrderCommand(expectedCodes, expectedQuantities));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedCodes.add(new Code(VALID_CODE_FRIES));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedQuantities.add(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // multiple order items"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseSuccess(parser, ORDER_DESC_2_CHICKEN + ORDER_DESC_3_FRIES,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new AddToOrderCommand(expectedCodes, expectedQuantities));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToOrderCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // missing quantity"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CHICKEN, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // missing code"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, VALID_QUANTITY_2, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // odd number of inputs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, VALID_CODE_CHICKEN + VALID_QUANTITY_2 + VALID_CODE_FRIES, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, INVALID_ORDER_CODE_DESC, Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, INVALID_ORDER_QUANTITY_DESC, ParserUtil.MESSAGE_INVALID_QUANTITY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, INVALID_ORDER_DESC, Code.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ORDER_DESC_2_CHICKEN,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    //    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \" McSpicy\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_CODE \u003d \"09W\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"1.3a\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_DAY \u003d \"35\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"13\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"2103\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TABLE_NUMBER \u003d \"abc\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"McSpicy Burger\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_CODE \u003d \"A11\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PRICE \u003d \"4.70\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_DAY \u003d \"29\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_MONTH \u003d \"10\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TABLE_NUMBER \u003d \"4\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    //        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    //        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    //        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    //        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    //        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode(null));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_CODE));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCode_validValueWithoutWhiteSpace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Code expectedCode \u003d new Code(VALID_CODE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseCode(VALID_CODE));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCode_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        String codeWithWhitespace \u003d WHITESPACE + VALID_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Code expectedCode \u003d new Code(VALID_CODE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCode, ParserUtil.parseCode(codeWithWhitespace));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePrice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode(null));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePrice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_PRICE));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePrice_validValueWithoutWhiteSpace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parseCode(VALID_PRICE));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePrice_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_CODE);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parseCode(priceWithWhitespace));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode(null));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseDay_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_DAY));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseDay_validValueWithoutWhiteSpace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        Day expectedDay \u003d new Day(VALID_DAY);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseCode(VALID_DAY));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseDay_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String dayWithWhitespace \u003d WHITESPACE + VALID_DAY + WHITESPACE;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        Day expectedDay \u003d new Day(VALID_DAY);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseCode(dayWithWhitespace));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseMonth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode(null));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseMonth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_MONTH));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseMonth_validValueWithoutWhiteSpace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        Month expectedMonth \u003d new Month(VALID_MONTH);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMonth, ParserUtil.parseCode(VALID_MONTH));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseMonth_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        String monthWithWhitespace \u003d WHITESPACE + VALID_MONTH + WHITESPACE;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        Month expectedMonth \u003d new Month(VALID_MONTH);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMonth, ParserUtil.parseCode(monthWithWhitespace));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTableNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCode(null));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTableNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCode(INVALID_TABLE_NUMBER));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTableNumber_validValueWithoutWhiteSpace_returnsCode() throws Exception {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        TableNumber expectedTableNumber \u003d new TableNumber(VALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTableNumber, ParserUtil.parseCode(VALID_TABLE_NUMBER));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTableNumber_validValueWithWhitespace_returnsTrimmedCode() throws Exception {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        String tableNumberWithWhitespace \u003d WHITESPACE + VALID_TABLE_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        TableNumber expectedTableNumber \u003d new TableNumber(VALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTableNumber, ParserUtil.parseCode(tableNumberWithWhitespace));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 330
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RestOrRantParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODE_CHANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "import seedu.address.logic.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTableCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.logic.commands.AddToMenuCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.AddToOrderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RestaurantModeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.RestOrRantUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TableBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class RestOrRantParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final RestOrRantParser parser \u003d new RestOrRantParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //        AddCommand command \u003d (AddCommand) parser.parseCommand(Mode.RESTAURANT_MODE, RestOrRantUtil"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //                .getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //        command \u003d (AddCommand) parser.parseCommand(Mode.RESTAURANT_MODE, RestOrRantUtil.getAddAlias(person));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addTable() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Table table \u003d new TableBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddTableCommand command \u003d (AddTableCommand) parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                RestOrRantUtil.getTableDetails(table));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTableStatus\u003e tableStatuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tableStatuses.add(table.getTableStatus());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddTableCommand(tableStatuses), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.TABLE_MODE, RestOrRantUtil.getTableDetails(table));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.MENU_MODE, RestOrRantUtil.getTableDetails(table));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parseCommand_addToOrder() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItem orderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        AddToOrderCommand command \u003d (AddToOrderCommand) parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                RestOrRantUtil.getOrderItemDetails(orderItem));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCode\u003e codes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cInteger\u003e quantities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        codes.add(orderItem.getMenuItemCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        quantities.add(orderItem.getQuantity());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(new AddToOrderCommand(codes, quantities), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, RestOrRantUtil.getOrderItemDetails(orderItem));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.MENU_MODE, RestOrRantUtil.getOrderItemDetails(orderItem));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addMenuItem() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        MenuItem menuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "        AddToMenuCommand command \u003d (AddToMenuCommand) parser.parseCommand(Mode.MENU_MODE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                RestOrRantUtil.getMenuItemDetails(menuItem));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(new AddToMenuCommand(menuItem), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.TABLE_MODE, RestOrRantUtil.getMenuItemDetails(menuItem));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, RestOrRantUtil.getMenuItemDetails(menuItem));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE, pe.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: keep for future use"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    //                Mode.RESTAURANT_MODE, DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    //        command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //                Mode.RESTAURANT_MODE, DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //        EditCommand command \u003d (EditCommand) parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //                EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    //                + RestOrRantUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //        command \u003d (EditCommand) parser.parseCommand(Mode.RESTAURANT_MODE, EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    //                + INDEX_FIRST_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //                + RestOrRantUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    //        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    //        FindCommand command \u003d (FindCommand) parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    //        command \u003d (FindCommand) parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "                HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE, HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE, HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, \"histories\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, \"hists\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_restaurantMode() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, RestaurantModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.RESTAURANT_MODE, RestaurantModeCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_tableMode() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.MENU_MODE,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.TABLE_MODE, RestaurantModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.TABLE_MODE, RestaurantModeCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_menuMode() throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS + \" 3\") instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_WORD) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(Mode.TABLE_MODE,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                RestaurantModeCommand.COMMAND_ALIAS) instanceof RestaurantModeCommand);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.MENU_MODE, RestaurantModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(Mode.MENU_MODE, RestaurantModeCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_INVALID_MODE_CHANGE, pe.getMessage());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    //                ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE, ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertTrue(parser.parseCommand(Mode.RESTAURANT_MODE,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    //                ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    //        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    //                Mode.RESTAURANT_MODE, SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    //        command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    //                Mode.RESTAURANT_MODE, SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        parser.parseCommand(Mode.RESTAURANT_MODE, \"\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Qing-Yuan"
        },
        "content": "        parser.parseCommand(Mode.RESTAURANT_MODE, \"unknownCommand\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 3,
      "whyjayxp": 6,
      "Qing-Yuan": 35,
      "-": 302
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TableModeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.TableModeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * outside of the TableModeCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * same path through the TableModeCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class TableModeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private TableModeCommandParser parser \u003d new TableModeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parse_validTableNumber_returnsTableModeCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseSuccess(parser, \"1\", new TableModeCommand(new TableNumber(\"1\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void parse_invalidTableNumber_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TableModeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TABLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.CHICKEN_WINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W12;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.exceptions.MenuItemNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.exception.DailyRevenueNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.exceptions.TableNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.RestOrRantBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.TableBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(new RestOrRant(), new RestOrRant(modelManager.getRestOrRant()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedOrderItem());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMenuItem());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTable());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getRecentBill());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setTablesFilePath(Paths.get(\"tables/file/path\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setOrdersFilePath(Paths.get(\"orders/file/path\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"menu/file/path\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setStatisticsFilePath(Paths.get(\"statistics/file/path\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setTablesFilePath(Paths.get(\"new/tables/file/path\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setOrdersFilePath(Paths.get(\"new/orders/file/path\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"new/menu/file/path\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        userPrefs.setStatisticsFilePath(Paths.get(\"new/statistics/file/path\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setTablesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setTablesFilePath(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setTablesFilePath_validPath_setsTablesFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Path path \u003d Paths.get(\"tables/file/path\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setTablesFilePath(path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(path, modelManager.getTablesFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrdersFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setOrdersFilePath(null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrdersFilePath_validPath_setsOrdersFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Path path \u003d Paths.get(\"orders/file/path\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setOrdersFilePath(path);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(path, modelManager.getOrdersFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setMenuFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setMenuFilePath(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setMenuFilePath_validPath_setsMenuFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Path path \u003d Paths.get(\"menu/file/path\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setMenuFilePath(path);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(path, modelManager.getMenuFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setStatisticsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setStatisticsFilePath(null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setStatisticsFilePath_validPath_setsStatisticsFilePath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Path path \u003d Paths.get(\"statistics/file/path\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setStatisticsFilePath(path);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(path, modelManager.getStatisticsFilePath());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasTable_nullTable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.hasTable(null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasTable_tableNotInTables_returnsFalse() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.hasTable(TABLE1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasTable_tableInTables_returnsTrue() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(modelManager.hasTable(TABLE1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteTable_tableIsSelectedAndFirstTableInFilteredTablesList_selectionCleared() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedTable(TABLE1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteTable(TABLE1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedTable());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteTable_tableIsSelectedAndSecondTableInFilteredTablesList_firstTableSelected() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Arrays.asList(TABLE1, TABLE2), modelManager.getFilteredTableList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedTable(TABLE2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteTable(TABLE2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(TABLE1, modelManager.getSelectedTable());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setTable_tableIsSelected_selectedTableUpdated() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedTable(TABLE1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Table updatedTable \u003d new TableBuilder(TABLE1).withTableStatus(\"2/4\").build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setTable(TABLE1, updatedTable);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(updatedTable, modelManager.getSelectedTable());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void getFilteredTableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.getFilteredTableList().remove(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedTable_tableNotInFilteredTableList_throwsTableNotFoundException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(TableNotFoundException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedTable(TABLE1);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedTable_tableInFilteredTableList_setsSelectedTable() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addTable(TABLE1);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Collections.singletonList(TABLE1), modelManager.getFilteredTableList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedTable(TABLE1);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(TABLE1, modelManager.getSelectedTable());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.hasOrderItem(null);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_orderItemNotInOrderItems_returnsFalse() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.hasOrderItem(TABLE1_W09));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_orderItemInOrderItems_returnsTrue() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(modelManager.hasOrderItem(TABLE1_W09));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteOrderItem_orderItemIsSelectedAndFirstOrderItemInFilteredOrderItemsList_selectionCleared() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedOrderItem());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteOrderItem_orderItemIsSelectedAndSecondOrderItemInFilteredOrderItemsList_firstOrderItemSelected() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W12);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Arrays.asList(TABLE1_W09, TABLE1_W12), modelManager.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedOrderItem(TABLE1_W12);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteOrderItem(TABLE1_W12);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(TABLE1_W09, modelManager.getSelectedOrderItem());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_orderItemIsSelected_selectedOrderItemUpdated() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem updatedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setOrderItem(TABLE1_W09, updatedOrderItem);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(updatedOrderItem, modelManager.getSelectedOrderItem());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void getFilteredOrderItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.getFilteredOrderItemList().remove(0);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedOrderItem_orderItemNotInFilteredOrderItemList_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(OrderItemNotFoundException.class);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedOrderItem_orderItemInFilteredOrderItemList_setsSelectedOrderItem() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Collections.singletonList(TABLE1_W09), modelManager.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(TABLE1_W09, modelManager.getSelectedOrderItem());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasMenuItem_nullMenuItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.hasMenuItem(null);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasMenuItem_menuItemNotInMenuItems_returnsFalse() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.hasMenuItem(CHICKEN_WINGS));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasMenuItem_menuItemInMenuItems_returnsTrue() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(modelManager.hasMenuItem(CHICKEN_WINGS));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteMenuItem_menuItemIsSelectedAndFirstMenuItemInFilteredMenuItemsList_selectionCleared() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMenuItem());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void deleteMenuItem_menuItemIsSelectedAndSecondMenuItemInFilteredMenuItemsList_firstMenuItemSelected() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Arrays.asList(CHICKEN_WINGS, FRENCH_FRIES), modelManager.getFilteredMenuItemList());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(CHICKEN_WINGS, modelManager.getSelectedMenuItem());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setMenuItem_menuItemIsSelected_selectedMenuItemUpdated() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        MenuItem updatedMenuItem \u003d new MenuItemBuilder(CHICKEN_WINGS).withPrice(\"12.99\").build();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setMenuItem(CHICKEN_WINGS, updatedMenuItem);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(updatedMenuItem, modelManager.getSelectedMenuItem());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void getFilteredMenuItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.getFilteredMenuItemList().remove(0);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedMenuItem_menuItemNotInFilteredMenuItemList_throwsMenuItemNotFoundException() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(MenuItemNotFoundException.class);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedMenuItem_menuItemInFilteredMenuItemList_setsSelectedMenuItem() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Collections.singletonList(CHICKEN_WINGS), modelManager.getFilteredMenuItemList());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(CHICKEN_WINGS, modelManager.getSelectedMenuItem());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasDailyRevenue_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.hasDailyRevenue(null);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasDailyRevenue_dailyRevenueNotInDailyRevenues_returnsFalse() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.hasDailyRevenue(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasDailyRevenue_dailyRevenueInDailyRevenues_returnsTrue() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(modelManager.hasDailyRevenue(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteDailyRevenue_firstDailyRevenueIsSelectedInFilteredDailyRevenueList_selectionCleared() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(null, modelManager.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteDailyRevenue_secondDailyRevenueIsSelectedInFilteredDailyRevenueList_firstDailyRevenueSelected() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Arrays.asList(DAILY_REVENUE1, DAILY_REVENUE2), modelManager.getFilteredDailyRevenueList());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedDailyRevenue(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.deleteDailyRevenue(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(DAILY_REVENUE1, modelManager.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setDailyRevenue_dailyRevenueIsSelected_selectedDailyRevenueUpdated() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        DailyRevenue updatedDailyRevenue \u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"150.60\").build();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setDailyRevenue(DAILY_REVENUE1, updatedDailyRevenue);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(updatedDailyRevenue, modelManager.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void getFilteredDailyRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.getFilteredDailyRevenueList().remove(0);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedDailyRevenue_dailyRevenueNotInFilteredList_throwsDailyRevenueNotFoundException() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DailyRevenueNotFoundException.class);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setSelectedDailyRevenue_dailyRevenueInFilteredDailyRevenueList_setsSelectedDailyRevenue() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Collections.singletonList(DAILY_REVENUE1), modelManager.getFilteredDailyRevenueList());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.setSelectedDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(DAILY_REVENUE1, modelManager.getSelectedDailyRevenue());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant restOrRant \u003d new RestOrRantBuilder().withTable(TABLE1)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .withTable(TABLE2)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .withMenuItem(CHICKEN_WINGS)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .withOrderItem(TABLE1_W09)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .withDailyRevenue(DAILY_REVENUE1)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant differentRestOrRant \u003d new RestOrRant();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager \u003d new ModelManager(restOrRant, userPrefs);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(restOrRant, userPrefs);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different restOrRant -\u003e returns false"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRestOrRant, userPrefs)));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.updateFilteredTableList(table -\u003e table.getTableNumber().equals(new TableNumber(\"1\")));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(restOrRant, userPrefs)));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        modelManager.updateFilteredTableList(PREDICATE_SHOW_ALL_TABLES);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        differentUserPrefs.setTablesFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(restOrRant, differentUserPrefs)));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 1,
      "whyjayxp": 297,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/model/RestOrRantTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class RestOrRantTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final RestOrRant restOrRant \u003d new RestOrRant();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertNotNull(restOrRant.getMenu());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertNotNull(restOrRant.getOrders());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertNotNull(restOrRant.getTables());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertNotNull(restOrRant.getStatistics());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.resetData(null, null, null, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData_withValidReadOnlyRestOrRant_replacesData() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        RestOrRant newData \u003d getTypicalRestOrRant();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.resetData(newData.getOrders(), newData.getMenu(), newData.getTables(), newData.getStatistics());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(newData, restOrRant);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.addListener(listener);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.indicateModified();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.addListener(listener);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.removeListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.indicateModified();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 18,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setMenuFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setMenuFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrdersFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setOrdersFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setTablesFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setTablesFilePath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setStatisticsFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setStatisticsFilePath(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 20,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/CodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class CodeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_invalidCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String invalidCode \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidCode));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void isValidCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Code.isValidCode(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"crepes*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"abcde\")); // only alphabetic characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"1234\")); // only numeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"abcde1234\")); // \u003e 1 alphabet, \u003e 2 numeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"ab1\")); // \u003e 1 alphabet, \u003c 2 numeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Code.isValidCode(\"w09\")); // non-capital alphabet"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"A12\")); // of specified format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 39,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/MenuItemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CODE_FRIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_FRIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.SALAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem menuItem \u003d new MenuItemBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void isSameMenuItem() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(SALAD.isSameMenuItem(SALAD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.isSameMenuItem(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem editedSalad \u003d new MenuItemBuilder(SALAD).withCode(VALID_CODE_FRIES).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.isSameMenuItem(editedSalad));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        editedSalad \u003d new MenuItemBuilder(SALAD).withName(VALID_NAME_FRIES).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.isSameMenuItem(editedSalad));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same name, same code, different price -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "        editedSalad \u003d new MenuItemBuilder(SALAD).withPrice(VALID_PRICE_FRIES).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(SALAD.isSameMenuItem(editedSalad));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem saladCopy \u003d new MenuItemBuilder(SALAD).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(SALAD.equals(saladCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(SALAD.equals(SALAD));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different menu item -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(FRENCH_FRIES));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem editedSalad \u003d new MenuItemBuilder(SALAD).withName(VALID_NAME_FRIES).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(editedSalad));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        editedSalad \u003d new MenuItemBuilder(SALAD).withCode(VALID_CODE_FRIES).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(editedSalad));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        editedSalad \u003d new MenuItemBuilder(SALAD).withPrice(VALID_PRICE_FRIES).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(SALAD.equals(editedSalad));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 73,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/MenuTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.CHEESE_NACHOS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.CHICKEN_WINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.CREPES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.SALAD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.SHRIMP_FRIED_RICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalMenuItems;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.exceptions.DuplicateMenuItemException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.MenuItemBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private final Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(Collections.emptyList(), menu.getMenuItemList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.resetData(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void resetData_withValidReadOnlyMenu_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "        List\u003cMenuItem\u003e newData \u003d getTypicalMenuItems();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.setMenuItems(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(newData, menu);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void resetData_withDuplicateMenuItems_throwsDuplicateMenuItemException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // Two order items with the same identity fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem editedMenuItem \u003d new MenuItemBuilder(FRENCH_FRIES).withName(FRENCH_FRIES.getName().itemName)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                          .withCode(FRENCH_FRIES.getCode().itemCode)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                          .withPrice(FRENCH_FRIES.getPrice().itemPrice).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "        List\u003cMenuItem\u003e newMenuItems \u003d Arrays.asList(FRENCH_FRIES, editedMenuItem);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuTest.MenuStub newData \u003d new MenuTest.MenuStub(newMenuItems);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DuplicateMenuItemException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.resetData(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void hasMenuItem_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.hasMenuItem(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void hasMenuItem_menuItemNotInMenu_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(menu.hasMenuItem(CHEESE_NACHOS));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void hasMenuItem_menuItemInMenu_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(CHICKEN_WINGS));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void hasMenuItem_menuItemWithSameIdentityFieldsInMenu_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CREPES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem editedMenuItem \u003d new MenuItemBuilder(CREPES).withName(CREPES.getName().itemName)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                          .withCode(CREPES.getCode().itemCode).withPrice(CREPES.getPrice().itemPrice)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                          .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(editedMenuItem));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_menuItemInMenu_throwsDuplicateMenuItemException() { // 0 0 0"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DuplicateMenuItemException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_sameNameAndCodeDifferentPrice_throwsDuplicateMenuItemException() { // 0 0 1"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem newItem \u003d new MenuItemBuilder(CHICKEN_WINGS).withPrice(FRENCH_FRIES.getPrice().itemPrice).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DuplicateMenuItemException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(newItem);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_sameNameDifferentCodeSamePrice_returnsTrue() { // 0 1 0"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem newItem \u003d new MenuItemBuilder(CHICKEN_WINGS).withCode(FRENCH_FRIES.getCode().itemCode).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(newItem);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(newItem));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_differentNameSameCodeAndPrice_returnsTrue() { // 1 0 0"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem newItem \u003d new MenuItemBuilder(CHICKEN_WINGS).withName(FRENCH_FRIES.getName().itemName).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(newItem);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(newItem));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_differentNameAndCodeSamePrice_returnsTrue() { // 1 1 0"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuItem newItem \u003d new MenuItemBuilder(FRENCH_FRIES).withPrice(CHICKEN_WINGS.getPrice().itemPrice).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(newItem);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(newItem));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addMenuItem_newItem_returnTrue() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(CHICKEN_WINGS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(menu.hasMenuItem(FRENCH_FRIES));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void getMenuItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.getMenuItemList().remove(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bava98"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bava98"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addListener(listener);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(SHRIMP_FRIED_RICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bava98"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bava98"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addListener(listener);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.removeListener(listener);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "bava98"
        },
        "content": "        menu.addMenuItem(SALAD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * A stub ReadOnlyOrders whose order item list can violate interface constraints."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static class MenuStub implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bava98"
        },
        "content": "        private final ObservableList\u003cMenuItem\u003e menuItems \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bava98"
        },
        "content": "        MenuStub(Collection\u003cMenuItem\u003e menuItems) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bava98"
        },
        "content": "            this.menuItems.setAll(menuItems);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public ObservableList\u003cMenuItem\u003e getMenuItemList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bava98"
        },
        "content": "            return menuItems;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Optional\u003cMenuItem\u003e getItemFromCode(Code code) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Name getNameFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Code getCodeFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public Price getPriceFromItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "bava98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "bava98"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 187,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Name.isValidName(\"crepes*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"kimchi fried rice\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"1800\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"3 olives\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"Shrimp Fried Rice\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"Braised Leeks with Mozzarella and a Fried Egg\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 38,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/menu/PriceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.model.menu;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"abcd\")); // only alphabetic characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"abcd*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12345\")); // no decimal digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.345\")); // \u003e 2 decimal digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.3\")); // \u003c 2 decimal digits"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Price.isValidPrice(\"0.34\")); // cheap"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Price.isValidPrice(\"12.34\")); // average"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Price.isValidPrice(\"123.45\")); // expensive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertTrue(Name.isValidName(\"1234567890.23\")); // very expensive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 41,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderItemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W12;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void isSameOrderItem() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(TABLE1_W09.isSameOrderItem(TABLE1_W09));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.isSameOrderItem(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withCode(\"A05\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.isSameOrderItem(editedOrderItem));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different table number -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withTableNumber(\"2\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.isSameOrderItem(editedOrderItem));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same table number and code, different quantity -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(TABLE1_W09.isSameOrderItem(editedOrderItem));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem orderItemCopy \u003d new OrderItemBuilder(TABLE1_W09).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(TABLE1_W09.equals(orderItemCopy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(TABLE1_W09.equals(TABLE1_W09));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different order -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(TABLE1_W12));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different table number -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withTableNumber(\"2\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(editedOrderItem));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withCode(\"A05\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(editedOrderItem));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(TABLE1_W09.equals(editedOrderItem));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrdersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalOrderItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrdersTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Orders orders \u003d new Orders();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Collections.emptyList(), orders.getOrderItemList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData_withValidReadOnlyOrders_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Orders newData \u003d new Orders();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (OrderItem orderItem : getTypicalOrderItems()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            newData.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(newData, orders);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void resetData_withDuplicateOrderItems_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Two order items with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e newOrderItems \u003d Arrays.asList(TABLE1_W09, editedOrderItem);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrdersStub newData \u003d new OrdersStub(newOrderItems);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DuplicateOrderItemException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.hasOrderItem(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_orderItemNotInOrders_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(orders.hasOrderItem(TABLE1_W09));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_orderItemInOrders_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(orders.hasOrderItem(TABLE1_W09));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void hasOrderItem_orderItemWithSameIdentityFieldsInOrders_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(orders.hasOrderItem(editedOrderItem));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void getOrderItemList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.getOrderItemList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addListener(listener);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.removeListener(listener);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orders.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * A stub ReadOnlyOrders whose order item list can violate interface constraints."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static class OrdersStub implements ReadOnlyOrders {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        private final ObservableList\u003cOrderItem\u003e orderItems \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrdersStub(Collection\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            this.orderItems.setAll(orderItems);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public ObservableList\u003cOrderItem\u003e getOrderItemList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            return orderItems;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 137,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/UniqueOrderItemListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W12;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderItemException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.exceptions.OrderItemNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class UniqueOrderItemListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final UniqueOrderItemList uniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void contains_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.contains(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void contains_orderItemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(uniqueOrderItemList.contains(TABLE1_W09));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void contains_orderItemInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(uniqueOrderItemList.contains(TABLE1_W09));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void contains_orderItemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(uniqueOrderItemList.contains(editedOrderItem));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void add_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void add_duplicateOrderItem_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DuplicateOrderItemException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_nullTargetOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(null, TABLE1_W09);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_nullEditedOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_targetOrderItemNotInList_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(OrderItemNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, TABLE1_W09);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_editedOrderItemIsSameOrderItem_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, TABLE1_W09);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedUniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_editedOrderItemHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem editedOrderItem \u003d new OrderItemBuilder(TABLE1_W09).withQuantity(5)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, editedOrderItem);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedUniqueOrderItemList.add(editedOrderItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_editedOrderItemHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, TABLE1_W12);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedUniqueOrderItemList.add(TABLE1_W12);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItem_editedOrderItemHasNonUniqueIdentity_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W12);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DuplicateOrderItemException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItem(TABLE1_W09, TABLE1_W12);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void remove_nullOrderItem_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.remove(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void remove_orderItemDoesNotExist_throwsOrderItemNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(OrderItemNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.remove(TABLE1_W09);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void remove_existingOrderItem_removesOrderItem() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.remove(TABLE1_W09);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems_nullUniqueOrderItemList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItems((UniqueOrderItemList) null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems_uniqueOrderItemList_replacesOwnListWithProvidedUniqueOrderItemList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedUniqueOrderItemList.add(TABLE1_W12);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItems(expectedUniqueOrderItemList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItems((List\u003cOrderItem\u003e) null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.add(TABLE1_W09);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e orderItemList \u003d Collections.singletonList(TABLE1_W12);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItems(orderItemList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        UniqueOrderItemList expectedUniqueOrderItemList \u003d new UniqueOrderItemList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        expectedUniqueOrderItemList.add(TABLE1_W12);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedUniqueOrderItemList, uniqueOrderItemList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void setOrderItems_listWithDuplicateOrderItems_throwsDuplicateOrderItemException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        List\u003cOrderItem\u003e listWithDuplicateOrderItems \u003d Arrays.asList(TABLE1_W09, TABLE1_W09);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DuplicateOrderItemException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.setOrderItems(listWithDuplicateOrderItems);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uniqueOrderItemList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/BillTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.BILL1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.BILL2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class BillTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill billCopy \u003d new StatisticsBuilder(BILL1).buildBill();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(BILL1.equals(billCopy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(BILL1.equals(BILL1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(5));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(BILL2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different table number -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Bill editedBill \u003d new StatisticsBuilder(BILL1).withTableNumber(\"4\").buildBill();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedBill \u003d new StatisticsBuilder(BILL1).withDay(\"4\").buildBill();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different month -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedBill \u003d new StatisticsBuilder(BILL1).withMonth(\"4\").buildBill();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedBill \u003d new StatisticsBuilder(BILL1).withYear(\"2014\").buildBill();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different total bill -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedBill \u003d new StatisticsBuilder(BILL1).withTotalBill(\"4025.36\").buildBill();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different receipt -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedBill \u003d new StatisticsBuilder(BILL1).withReceipt(\"4asdnfcerfn\").buildBill();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(BILL1.equals(editedBill));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/DailyRevenueListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.exception.DailyRevenueNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyRevenueListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private final DailyRevenueList dailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void contains_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.contains(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void contains_dailyRevenueNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(dailyRevenueList.contains(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void contains_dailyRevenueInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(dailyRevenueList.contains(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void contains_dailyRevenueWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(dailyRevenueList.contains(editedDailyRevenue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void add_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_nullTargetDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(null, DAILY_REVENUE1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_nullEditedDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(DAILY_REVENUE1, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_targetDailyRevenueNotInList_throwsDailyRevenueNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(DailyRevenueNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(DAILY_REVENUE1, DAILY_REVENUE1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_editedDailyRevenueIsSameDailyRevenue_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(DAILY_REVENUE1, DAILY_REVENUE1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedDailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, dailyRevenueList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_editedDailyRevenueHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(DAILY_REVENUE1, editedDailyRevenue);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedDailyRevenueList.add(editedDailyRevenue);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, dailyRevenueList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_editedDailyRevenueHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(DAILY_REVENUE1, DAILY_REVENUE2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedDailyRevenueList.add(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, dailyRevenueList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void remove_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.remove(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void remove_dailyRevenueDoesNotExist_throwsDailyRevenueNotFoundException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(DailyRevenueNotFoundException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.remove(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void remove_existingDailyRevenue_removesDailyRevenue() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.remove(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, dailyRevenueList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_nullUniqueDailyRevenueList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue((DailyRevenueList) null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_dailyRevenueList_replacesOwnListWithProvidedDailyRevenueList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedDailyRevenueList.add(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenue(expectedDailyRevenueList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, dailyRevenueList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.setDailyRevenueList((List\u003cDailyRevenue\u003e) null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void setDailyRevenue_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.add(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        List\u003cDailyRevenue\u003e dailyRevenueList \u003d Collections.singletonList(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.dailyRevenueList.setDailyRevenueList(dailyRevenueList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenueList expectedDailyRevenueList \u003d new DailyRevenueList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        expectedDailyRevenueList.add(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(expectedDailyRevenueList, this.dailyRevenueList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dailyRevenueList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/DailyRevenueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DailyRevenueTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void isSameOrderItem() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(DAILY_REVENUE1.isSameDailyRevenue(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.isSameDailyRevenue(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withDay(\"10\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.isSameDailyRevenue(editedDailyRevenue));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different month -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withMonth(\"4\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.isSameDailyRevenue(editedDailyRevenue));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withYear(\"2010\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.isSameDailyRevenue(editedDailyRevenue));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same day, month, year, different totalDailyRevenue -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(DAILY_REVENUE1.isSameDailyRevenue(editedDailyRevenue));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue orderItemCopy \u003d new StatisticsBuilder(DAILY_REVENUE1).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(DAILY_REVENUE1.equals(orderItemCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(DAILY_REVENUE1.equals(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different daily revenue -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(DAILY_REVENUE2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withDay(\"10\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(editedDailyRevenue));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different month -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withMonth(\"4\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(editedDailyRevenue));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withYear(\"2010\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(DAILY_REVENUE1.equals(editedDailyRevenue));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // same day, month, year, different totalDailyRevenue -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(DAILY_REVENUE1.equals(editedDailyRevenue));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/DayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_invalidDay_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String invalidDay \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Day(invalidDay));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"^\")); // only numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"pe\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"00\")); // less than 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"32\")); // more than 31"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Day.isValidDay(\"034\")); // More than 2 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Day.isValidDay(\"01\")); // Double digit number 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Day.isValidDay(\"7\")); // Single digit more than 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Day.isValidDay(\"31\")); // Number 31"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Day.isValidDay(\"20\")); // Double digits less than 31"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/MonthTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class MonthTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Month(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_invalidMonth_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String invalidMonth \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Month(invalidMonth));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void isValidMonth() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Month.isValidMonth(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"^\")); // only numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"pe\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"00\")); // less than 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"13\")); // more than 12"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Month.isValidMonth(\"012\")); // More than 2 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Month.isValidMonth(\"01\")); // Double digit number 1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Month.isValidMonth(\"7\")); // Single digit more than 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Month.isValidMonth(\"12\")); // Number 12"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Month.isValidMonth(\"10\")); // Double digits less than 12"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/StatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalDailyRevenue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.StatisticsBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(Collections.emptyList(), statistics.getDailyRevenueList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.resetData(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void resetData_withValidReadOnlyStatistics_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Statistics newData \u003d new Statistics();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        for (DailyRevenue dailyRevenue : getTypicalDailyRevenue()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            newData.addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(newData, statistics);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void hasDailyRevenue_nullDailyRevenue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.hasDailyRevenue(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void hasDailyRevenue_dailyRevenueNotInStatistics_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(statistics.hasDailyRevenue(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void hasDailyRevenue_dailyRevenueInStatistics_returnsTrue() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(statistics.hasDailyRevenue(DAILY_REVENUE1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void hasDailyRevenue_dailyRevenueWithSameIdentityFieldsInStatistics_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        DailyRevenue editedDailyRevenue \u003d new StatisticsBuilder(DAILY_REVENUE1).withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(statistics.hasDailyRevenue(editedDailyRevenue));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void getDailyRevenueList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.getDailyRevenueList().remove(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addListener(listener);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addListener(listener);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.removeListener(listener);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        statistics.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * A stub ReadOnlyStatistics whose daily revenue list can violate interface constraints."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static class StatisticsStub implements ReadOnlyStatistics {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        private final ObservableList\u003cDailyRevenue\u003e dailyRevenues \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        StatisticsStub(Collection\u003cDailyRevenue\u003e dailyRevenues) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            this.dailyRevenues.setAll(dailyRevenues);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public ObservableList\u003cDailyRevenue\u003e getDailyRevenueList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            return dailyRevenues;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 121,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/YearTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Year(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void constructor_invalidYear_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String invalidYear \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(invalidYear));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Year.isValidYear(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"^\")); // only numeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"pear\")); // contains non-numeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"00\")); // less than 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"01234\")); // more than 4 digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(Year.isValidYear(\"2020\")); // More than current year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Year.isValidYear(\"907\")); // less than 3 digits and the current year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Year.isValidYear(\"1998\")); // Years in the past"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertTrue(Year.isValidYear(\"2019\")); // Current Year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDailyRevenueTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDailyRevenue.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class JsonAdaptedDailyRevenueTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String INVALID_DAY \u003d \"@!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String INVALID_MONTH \u003d \"^.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String INVALID_YEAR \u003d \"2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String VALID_DAY \u003d DAILY_REVENUE1.getDay().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String VALID_MONTH \u003d DAILY_REVENUE1.getMonth().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String VALID_YEAR \u003d DAILY_REVENUE1.getYear().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final String VALID_TOTAL_DAILY_REVENUE \u003d Float.toString(DAILY_REVENUE1.getTotalDailyRevenue());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_validDailyRevenueDetails_returnsDailyRevenue() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(DAILY_REVENUE1, dailyRevenue.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_invalidDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(INVALID_DAY, VALID_MONTH, VALID_YEAR,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_nullDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(null, VALID_MONTH, VALID_YEAR,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_invalidMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(VALID_DAY, INVALID_MONTH, VALID_YEAR,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d Month.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_nullMonth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(VALID_DAY, null, VALID_YEAR,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Month.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_invalidYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(VALID_DAY, VALID_MONTH, INVALID_YEAR,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d Year.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_nullYear_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonAdaptedDailyRevenue dailyRevenue \u003d new JsonAdaptedDailyRevenue(VALID_DAY, VALID_MONTH, null,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                VALID_TOTAL_DAILY_REVENUE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Year.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, dailyRevenue::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 75,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedMenuItemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedMenu.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class JsonAdaptedMenuItemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@g1i0 01!0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String INVALID_CODE \u003d \"invalid1234\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"12.345\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String VALID_NAME \u003d FRENCH_FRIES.getName().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String VALID_CODE \u003d FRENCH_FRIES.getCode().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final String VALID_PRICE \u003d FRENCH_FRIES.getPrice().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_validMenuItemDetails_returnsMenuItem() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(FRENCH_FRIES);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(FRENCH_FRIES, menuItem.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(INVALID_NAME, VALID_CODE, VALID_PRICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(null, VALID_CODE, VALID_PRICE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(VALID_NAME, INVALID_CODE, VALID_PRICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d Code.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(VALID_NAME, null, VALID_PRICE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(VALID_NAME, VALID_CODE, INVALID_PRICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonAdaptedMenu menuItem \u003d new JsonAdaptedMenu(VALID_NAME, VALID_CODE, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, menuItem::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 67,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedOrderItemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.storage.JsonAdaptedOrderItem.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class JsonAdaptedOrderItemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String INVALID_TABLE_NUMBER \u003d \"Abc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String INVALID_CODE \u003d \"52\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    // TODO: ItemStatus"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String VALID_TABLE_NUMBER \u003d TABLE1_W09.getTableNumber().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String VALID_CODE \u003d TABLE1_W09.getMenuItemCode().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String VALID_QUANTITY_ORDERED \u003d \"4\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final String VALID_QUANTITY_UNSERVED \u003d \"4\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_validOrderItemDetails_returnsOrderItem() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(TABLE1_W09, orderItem.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_invalidTableNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedOrderItem(INVALID_TABLE_NUMBER, VALID_CODE, VALID_QUANTITY_ORDERED,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_QUANTITY_UNSERVED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String expectedMessage \u003d TableNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, orderItem::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_nullTableNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(null, VALID_CODE, VALID_QUANTITY_ORDERED,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_QUANTITY_UNSERVED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TableNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, orderItem::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedOrderItem(VALID_TABLE_NUMBER, INVALID_CODE, VALID_QUANTITY_ORDERED,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        VALID_QUANTITY_UNSERVED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String expectedMessage \u003d Code.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, orderItem::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedOrderItem orderItem \u003d new JsonAdaptedOrderItem(VALID_TABLE_NUMBER, null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_QUANTITY_ORDERED, VALID_QUANTITY_UNSERVED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Code.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, orderItem::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 56,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMenuStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.AGLIO_OLIO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.FRENCH_FRIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.HONEY_MILK_TEA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class JsonMenuStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMenuStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void readMenu_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readMenu(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMenu\u003e readMenu(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new JsonMenuStorage(Paths.get(filePath)).readMenu(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertFalse(readMenu(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readMenu(\"notJsonFormatMenu.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void readMenu_invalidMenuItem_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readMenu(\"invalidMenuItem.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void readMenu_invalidAndValidMenuItem_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readMenu(\"invalidAndValidMenuItem.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void readAndSaveMenu_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempMenu.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Menu original \u003d getTypicalRestOrRant().getMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonMenuStorage jsonMenuStorage \u003d new JsonMenuStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bava98"
        },
        "content": "        jsonMenuStorage.saveMenu(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ReadOnlyMenu readBack \u003d jsonMenuStorage.readMenu(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "        original.addMenuItem(HONEY_MILK_TEA);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "        original.removeMenuItem(FRENCH_FRIES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "        jsonMenuStorage.saveMenu(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readBack \u003d jsonMenuStorage.readMenu(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "        original.addMenuItem(AGLIO_OLIO);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "        jsonMenuStorage.saveMenu(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readBack \u003d jsonMenuStorage.readMenu().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bava98"
        },
        "content": "        jsonMenuStorage.backupMenu(original);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bava98"
        },
        "content": "        readBack \u003d jsonMenuStorage.readMenu().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu_nullMenu_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "        saveMenu(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Saves {@code restOrRant} at the specified {@code filePath}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private void saveMenu(ReadOnlyMenu menu, String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bava98"
        },
        "content": "            new JsonMenuStorage(Paths.get(filePath)).saveMenu(menu, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void saveMenu_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": "        saveMenu(new Menu(), null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 116,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonOrdersStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE1_W09;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.TABLE8_W09;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalOrderItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class JsonOrdersStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonOrdersStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readOrders_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readOrders(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private java.util.Optional\u003cReadOnlyOrders\u003e readOrders(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new JsonOrdersStorage(Paths.get(filePath)).readOrders(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readOrders_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(readOrders(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readOrders_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readOrders(\"notJsonFormatOrders.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readOrders_invalidOrderItemOrders_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readOrders(\"invalidOrderItemOrders.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readOrders_invalidAndValidOrderItemOrders_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readOrders(\"invalidAndValidOrderItemOrders.json\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void readAndSaveOrders_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempOrders.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Orders original \u003d new Orders();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (OrderItem orderItem : getTypicalOrderItems()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            original.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonOrdersStorage jsonOrdersStorage \u003d new JsonOrdersStorage(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        jsonOrdersStorage.saveOrders(original, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ReadOnlyOrders readBack \u003d jsonOrdersStorage.readOrders(filePath).get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(original, new Orders(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        original.addOrderItem(TABLE8_W09);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        original.removeOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        jsonOrdersStorage.saveOrders(original, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readBack \u003d jsonOrdersStorage.readOrders(filePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(original, new Orders(readBack));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        original.addOrderItem(TABLE1_W09);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        jsonOrdersStorage.saveOrders(original); // file path not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readBack \u003d jsonOrdersStorage.readOrders().get(); // file path not specified"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(original, new Orders(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        jsonOrdersStorage.backupOrders(original);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        readBack \u003d jsonOrdersStorage.readOrders().get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(original, new Orders(readBack));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders_nullOrders_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        saveOrders(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Saves {@code restOrRant} at the specified {@code filePath}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private void saveOrders(ReadOnlyOrders orders, String filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new JsonOrdersStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    .saveOrders(orders, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void saveOrders_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        saveOrders(new Orders(), null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableMenuTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.testutil.TypicalRestOrRant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class JsonSerializableMenuTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "            \"JsonSerializableMenuTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Path TYPICAL_MENU_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalMenuItems.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Path INVALID_MENU_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMenuItem.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private static final Path DUPLICATE_MENU_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMenuItemAddressBook.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_typicalMenuItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MENU_ITEMS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "                JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Menu menuFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Menu typicalMenuItems \u003d TypicalRestOrRant.getTypicalRestOrRant().getMenu();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(menuFromFile, typicalMenuItems);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_invalidMenuItemsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MENU_ITEM_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "                JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void toModelType_duplicateMenuItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MENU_ITEM_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "                JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "        thrown.expectMessage(JsonSerializableMenu.MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 48,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableOrdersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalOrderItems;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class JsonSerializableOrdersTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableOrdersTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Path TYPICAL_ORDER_ITEMS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalOrderItemsOrders.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Path INVALID_ORDER_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"InvalidOrderItemOrders.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Path DUPLICATE_ORDER_ITEM_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateOrderItemOrders.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_typicalOrderItemsFile_success() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonSerializableOrders dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ORDER_ITEMS_FILE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                JsonSerializableOrders.class).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Orders restOrRantFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Orders typicalOrderItemsOrders \u003d new Orders();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (OrderItem orderItem : getTypicalOrderItems()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            typicalOrderItemsOrders.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(restOrRantFromFile, typicalOrderItemsOrders);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_invalidOrderItemFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonSerializableOrders dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ORDER_ITEM_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                JsonSerializableOrders.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void toModelType_duplicateOrderItems_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        JsonSerializableOrders dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ORDER_ITEM_FILE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                JsonSerializableOrders.class).get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        thrown.expectMessage(JsonSerializableOrders.MESSAGE_DUPLICATE_ORDER_ITEMS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableStatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.TypicalRestOrRant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class JsonSerializableStatisticsTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            \"JsonSerializableStatisticsTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final Path TYPICAL_DAILY_REVENUE_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDailyRevenue.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static final Path INVALID_DAILY_REVENUE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDailyRevenue.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_typicalDailyRevenueFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonSerializableStatistics dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DAILY_REVENUE_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                JsonSerializableStatistics.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Statistics restOrRantFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Statistics typicalDailyRevenues \u003d TypicalRestOrRant.getTypicalRestOrRant().getStatistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(restOrRantFromFile, typicalDailyRevenues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void toModelType_invalidDailyRevenueFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonSerializableStatistics dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DAILY_REVENUE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                JsonSerializableStatistics.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonStatisticsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.DAILY_REVENUE3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "public class JsonStatisticsStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \"JsonStatisticsStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void readStatistics_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readStatistics(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStatistics\u003e readStatistics(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new JsonStatisticsStorage(Paths.get(filePath)).readStatistics(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder) : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertFalse(readStatistics(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readStatistics(\"notJsonFormatStatistics.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void readStatistics_invalidDailyRevenue_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readStatistics(\"invalidDailyRevenue.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void readStatistics_invalidAndValidDailyRevenue_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readStatistics(\"invalidAndValidDailyRevenue.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void readAndSaveStatistics_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempStatistics.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Statistics original \u003d getTypicalRestOrRant().getStatistics();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        ReadOnlyStatistics readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        original.addDailyRevenue(DAILY_REVENUE1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        original.removeDailyRevenue(DAILY_REVENUE2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        original.addDailyRevenue(DAILY_REVENUE3);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        jsonStatisticsStorage.backupStatistics(original);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics_nullStatistics_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        saveStatistics(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Saves {@code restOrRant} at the specified {@code filePath}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private void saveStatistics(ReadOnlyStatistics statistics, String filePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonStatisticsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveStatistics(statistics, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public void saveStatistics_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        saveStatistics(new Statistics(), null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 123,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"data/menu.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "        userPrefs.setOrdersFilePath(Paths.get(\"data/orders.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": "        userPrefs.setTablesFilePath(Paths.get(\"data/tables.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "        userPrefs.setStatisticsFilePath(Paths.get(\"data/statistics.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 4,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalRestOrRant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.ReadOnlyMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.order.ReadOnlyOrders;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.statistics.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.ReadOnlyTables;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonMenuStorage menuStorage \u003d new JsonMenuStorage(getTempFilePath(\"menu\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonOrdersStorage ordersStorage \u003d new JsonOrdersStorage(getTempFilePath(\"orders\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(getTempFilePath(\"stats\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "        JsonTablesStorage tablesStorage \u003d new JsonTablesStorage(getTempFilePath(\"tables\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "        //  JsonRestOrRantStorage restOrRantStorage \u003d new JsonRestOrRantStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, ordersStorage, menuStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "                statisticsStorage, tablesStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "        //  storageManager \u003d new StorageManager(restOrRantStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void restOrRantReadSave() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bava98"
        },
        "content": "         * {@link JsonMenuStorage}, {@link JsonOrdersStorage}, {@link JsonTablesStorage}, {@link JsonStatisticsStorage}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bava98"
        },
        "content": "         * classes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMenuStorageTest},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "         * {@link JsonOrdersStorageTest}, {@link JsonTablesStorageTest}, {@link JsonStatisticsStorageTest} classes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "        RestOrRant original \u003d getTypicalRestOrRant();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "        storageManager.saveMenu(original.getMenu());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "        storageManager.saveOrders(original.getOrders());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "        storageManager.saveTables(original.getTables());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "        storageManager.saveStatistics(original.getStatistics());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ReadOnlyMenu retrievedMenu \u003d storageManager.readMenu().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ReadOnlyOrders retrievedOrders \u003d storageManager.readOrders().get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ReadOnlyTables retrievedTables \u003d storageManager.readTables().get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bava98"
        },
        "content": "        ReadOnlyStatistics retrievedStatistics \u003d storageManager.readStatistics().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertEquals(original, new RestOrRant(retrievedOrders, retrievedMenu, retrievedTables, retrievedStatistics));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void getMenuFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertNotNull(storageManager.getMenuFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void getOrdersFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertNotNull(storageManager.getOrdersFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void getTableFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertNotNull(storageManager.getTableFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public void getStatisticsFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bava98"
        },
        "content": "        assertNotNull(storageManager.getStatisticsFilePath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 44,
      "whyjayxp": 1,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MenuItemBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Price;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building MenuItem objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class MenuItemBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Chicken Wings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"W09\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"3.99\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bava98"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "        code \u003d new Code(DEFAULT_CODE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemBuilder(MenuItem itemToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "        name \u003d itemToCopy.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "        code \u003d itemToCopy.getCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "        price \u003d itemToCopy.getPrice();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemBuilder withCode(String code) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.code \u003d new Code(code);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bava98"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItemBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bava98"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public MenuItem build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new MenuItem(name, code, price);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bava98": 61,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderItemBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A utility class to help with building OrderItem objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String DEFAULT_TABLE_NUMBER \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String DEFAULT_MENU_ITEM_CODE \u003d \"W09\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final int DEFAULT_QUANTITY \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private TableNumber tableNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private Code menuItemCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private int quantityOrdered;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d new TableNumber(DEFAULT_TABLE_NUMBER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItemCode \u003d new Code(DEFAULT_MENU_ITEM_CODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantityOrdered \u003d DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Initializes the OrderItemBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemBuilder(OrderItem toCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d toCopy.getTableNumber();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        menuItemCode \u003d toCopy.getMenuItemCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        quantityOrdered \u003d toCopy.getQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the {@code TableNumber} of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemBuilder withTableNumber(String tableNumber) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the {@code Code} of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemBuilder withCode(String menuItemCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.menuItemCode \u003d new Code(menuItemCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the quantity of the {@code OrderItem} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemBuilder withQuantity(int quantityOrdered) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.quantityOrdered \u003d quantityOrdered;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItem build() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new OrderItem(tableNumber, menuItemCode, quantityOrdered);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RestOrRantBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A utility class to help with building RestOrRant objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " *     {@code RestOrRant ab \u003d new RestOrRantBuilder().build();}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class RestOrRantBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private RestOrRant restOrRant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant \u003d new RestOrRant();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder(RestOrRant restOrRant) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.restOrRant \u003d restOrRant;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds a new {@code OrderItem} to the {@code RestOrRant} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder withOrderItem(OrderItem orderItem) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getOrders().addOrderItem(orderItem);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds a new {@code MenuItem} to the {@code RestOrRant} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder withMenuItem(MenuItem menuItem) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getMenu().addMenuItem(menuItem);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds a new {@code Table} to the {@code RestOrRant} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder withTable(Table table) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getTables().addTable(table);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Adds a new {@code DailyRevenue} to the {@code RestOrRant} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRantBuilder withDailyRevenue(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        restOrRant.getStatistics().addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public RestOrRant build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return restOrRant;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RestOrRantUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddTableCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.AddToMenuCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.logic.commands.AddToOrderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.logic.commands.BillCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class RestOrRantUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the (@code table)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddTableCommand(Table table) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddTableCommand.COMMAND_WORD + \" \" + getTableDetails(table);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code OrderItem}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static String getAddToOrderCommand(OrderItem orderItem) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return AddToOrderCommand.COMMAND_WORD + \" \" + getOrderItemDetails(orderItem);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code MenuItem}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddMenuCommand(MenuItem menuItem) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return AddToMenuCommand.COMMAND_WORD + \" \" + getMenuItemDetails(menuItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //TODO: Check if this method is relevant. Delete if it is not"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //TODO: Can I leave this here until I execute my totalRevenue command?"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns an add command string for adding the {@code Bill}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static String getBillCommand(Bill bill) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return BillCommand.COMMAND_WORD + \" \" + getBillDetails(bill);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static String getAddAlias(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    //        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    //        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return the part of command string for the given {@code table}\u0027s details."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getTableDetails(Table table) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(table.getTableStatus().numberOfSeats);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return the part of command string for the given {@code orderItem}\u0027s details."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getOrderItemDetails(OrderItem orderItem) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(orderItem.getMenuItemCode() + \" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(orderItem.getQuantity());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Return the part of command string for the given {@code menuItem}\u0027s details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getMenuItemDetails(MenuItem menuItem) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + menuItem.getName().toString() + \" \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_CODE + menuItem.getCode().toString() + \" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PRICE + menuItem.getPrice().toString() + \" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //TODO: Check if this method is relevant. Delete if it is not"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Return the part of command string for the given {@code dailyRevenue}\u0027s details."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static String getBillDetails(Bill bill) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_DAY + bill.getDay().toString() + \" \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_MONTH + bill.getMonth().toString() + \" \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_YEAR + bill.getYear().toString() + \" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(\"Total Bill: $\" + bill.getTotalBill() + \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(bill.getReceipt());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //TODO: Check if this method is relevant. Delete if it is not"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    //Can I leave this here until I execute my totalRevenue command?"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Return the part of command string for the given {@code dailyRevenue}\u0027s details."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static String getDailyRevenueDetails(DailyRevenue dailyRevenue) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_DAY + dailyRevenue.getDay().toString() + \" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_MONTH + dailyRevenue.getMonth().toString() + \" \");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(PREFIX_YEAR + dailyRevenue.getYear().toString() + \" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        sb.append(\"Total Revenue: $\" + dailyRevenue.getTotalDailyRevenue());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: figure out if we need this."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    //        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    //        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    //        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    //            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    //        return sb.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 45,
      "whyjayxp": 3,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/StatisticsBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Day;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Statistics objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bava98"
        },
        "content": "// TODO: do this class after storage is ok"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class StatisticsBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_DAY \u003d \"01\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_MONTH \u003d \"01\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_YEAR \u003d \"2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_DAILY_REVENUE \u003d \"0.00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_TOTAL_BILL \u003d \"0.00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_TABLE_NUMBER \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final String DEFAULT_RECEIPT \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Month month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private float totalDailyRevenue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private TableNumber tableNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private float totalBill;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private String receipt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day \u003d new Day(DEFAULT_DAY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month \u003d new Month(DEFAULT_MONTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue \u003d Float.parseFloat(DEFAULT_DAILY_REVENUE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber \u003d new TableNumber(DEFAULT_TABLE_NUMBER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalBill \u003d Float.parseFloat(DEFAULT_TOTAL_BILL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt \u003d DEFAULT_RECEIPT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Initializes the StatisticsBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder(DailyRevenue itemToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day \u003d itemToCopy.getDay();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month \u003d itemToCopy.getMonth();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year \u003d itemToCopy.getYear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue \u003d itemToCopy.getTotalDailyRevenue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalBill \u003d Float.parseFloat(DEFAULT_TOTAL_BILL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Initializes the StatisticsBuilder with the data of {@code itemToCopy}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder(Bill itemToCopy) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        day \u003d new Day(DEFAULT_DAY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        month \u003d new Month(DEFAULT_MONTH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalDailyRevenue \u003d Float.parseFloat(DEFAULT_DAILY_REVENUE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        tableNumber \u003d itemToCopy.getTableNumber();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        totalBill \u003d itemToCopy.getTotalBill();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        receipt \u003d itemToCopy.getReceipt();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the {@code Day} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withDay(String day) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.day \u003d new Day(day);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the {@code Month} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withMonth(String month) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.month \u003d new Month(month);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the {@code Year} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withYear(String year) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Sets the {@code totalDailyRevenue} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withTotalDailyRevenue(String totalDailyRevenue) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalDailyRevenue \u003d Float.parseFloat(totalDailyRevenue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code TableNumber} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withTableNumber(String tableNumber) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.tableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code totalBill} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withTotalBill(String totalBill) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.totalBill \u003d Float.parseFloat(totalBill);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code receipt} of the {@code DailyRevenue} that we are building."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public StatisticsBuilder withReceipt(String receipt) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        this.receipt \u003d receipt;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public DailyRevenue build() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new DailyRevenue(day, month, year, totalDailyRevenue);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public Bill buildBill() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new Bill(day, month, year, tableNumber, totalBill, receipt);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 115,
      "bava98": 5,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TableBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A utility class to help with building Table objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class TableBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String DEFAULT_TABLE_NUMBER \u003d \"1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final String DEFAULT_TABLE_STATUS \u003d \"0/4\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private TableNumber tableNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private TableStatus tableStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d new TableNumber(DEFAULT_TABLE_NUMBER);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableStatus \u003d new TableStatus(DEFAULT_TABLE_STATUS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Initializes the TableBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableBuilder(Table toCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableNumber \u003d toCopy.getTableNumber();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        tableStatus \u003d toCopy.getTableStatus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the {@code TableNumber} of the {@code Table} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableBuilder withTableNumber(String tableNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableNumber \u003d new TableNumber(tableNumber);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets the {@code TableStatus} of the {@code Table} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TableBuilder withTableStatus(String tableStatus) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        this.tableStatus \u003d new TableStatus(tableStatus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public Table build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new Table(tableNumber, tableStatus);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the middle index of the order item in the {@code model}\u0027s order item list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getOrderItemsMidIndex(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderItemList().size() / 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the last index of the order item in the {@code model}\u0027s order item list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getOrderItemsLastIndex(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderItemList().size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the order item in the {@code model}\u0027s order item list at {@code index}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static OrderItem getOrderItem(Model model, Index index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getFilteredOrderItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the middle index of the menu item in the {@code model}\u0027s menu item list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getMenuItemsMidIndex(Model model) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMenuItemList().size() / 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the last index of the menu item in the {@code model}\u0027s menu item list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getMenuItemsLastIndex(Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMenuItemList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the menu item in the {@code model}\u0027s menu item list at {@code index}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static MenuItem getMenuItem(Model model, Index index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getFilteredMenuItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the middle index of the table in the {@code model}\u0027s table list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getTableMidIndex(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTableList().size() / 2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the last index of the table in the {@code model}\u0027s table list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Index getTableLastIndex(Model model) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTableList().size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the table in the {@code model}\u0027s table list at {@code index}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static Table getTable(Model model, Index index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return model.getFilteredTableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the middle index of the daily revenue in the {@code model}\u0027s daily revenue list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static Index getDailyRevenueMidIndex(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDailyRevenueList().size() / 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the last index of the daily revenue in the {@code model}\u0027s daily revenue list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static Index getDailyRevenueLastIndex(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDailyRevenueList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns the daily revenue in the {@code model}\u0027s daily revenue list at {@code index}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static DailyRevenue getDailyRevenue(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return model.getFilteredDailyRevenueList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 21,
      "whyjayxp": 54,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRestOrRant.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bava98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.order.Orders;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.Bill;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bava98"
        },
        "content": "import seedu.address.model.table.Tables;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * This class provides a RestOrRant with all typical items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bava98"
        },
        "content": "public class TypicalRestOrRant {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Menu Items TODO: add quantity ordered"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem CHICKEN_WINGS \u003d new MenuItemBuilder().withName(\"Chicken Wings\").withCode(\"W09\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                         .withPrice(\"3.99\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem FRENCH_FRIES \u003d new MenuItemBuilder().withName(\"French Fries\").withCode(\"W12\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                        .withPrice(\"2.20\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem SALAD \u003d new MenuItemBuilder().withName(\"Salad\").withCode(\"A05\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                 .withPrice(\"5.50\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem CHEESE_NACHOS \u003d new MenuItemBuilder().withName(\"Cheese Nachos\").withCode(\"M17\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                         .withPrice(\"7.23\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem SHRIMP_FRIED_RICE \u003d new MenuItemBuilder().withName(\"Shrimp Fried Rice\").withCode(\"C02\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                             .withPrice(\"8.90\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem MEE_SUA \u003d new MenuItemBuilder().withName(\"Mee Soi\").withCode(\"T01\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                   .withPrice(\"4.99\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem KIMCHI_FRIED_RICE \u003d new MenuItemBuilder().withName(\"Kimchi Fried Rice\").withCode(\"K12\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                             .withPrice(\"5.50\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem CREPES \u003d new MenuItemBuilder().withName(\"Crepes\").withCode(\"F11\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                  .withPrice(\"7.50\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // manually added"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem HONEY_MILK_TEA \u003d new MenuItemBuilder().withName(\"Honey Milk Tea\").withCode(\"D01\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                          .withPrice(\"4.50\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final MenuItem AGLIO_OLIO \u003d new MenuItemBuilder().withName(\"Aglio Olio\").withCode(\"W14\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bava98"
        },
        "content": "                                                      .withPrice(\"7.56\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Order Items TODO: add item name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE1_W09 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"1\").withCode(\"W09\").withQuantity(2).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE1_W12 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"1\").withCode(\"W12\").withQuantity(2).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE2_A05 \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"2\").withCode(\"A05\").withQuantity(1).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE2_M17 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"2\").withCode(\"M17\").withQuantity(1).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE2_C02 \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"2\").withCode(\"C02\").withQuantity(2).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE4_T01 \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"4\").withCode(\"T01\").withQuantity(3).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE7_F11 \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"7\").withCode(\"F11\").withQuantity(4).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE8_K12 \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"1\").withCode(\"K12\").withQuantity(1).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE8_W09 \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"8\").withCode(\"W09\").withQuantity(3).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static final OrderItem TABLE8_W12 \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            new OrderItemBuilder().withTableNumber(\"8\").withCode(\"W12\").withQuantity(2).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Tables (table no and status)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE1 \u003d new TableBuilder().withTableNumber(\"1\").withTableStatus(\"4/4\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE2 \u003d new TableBuilder().withTableNumber(\"2\").withTableStatus(\"4/5\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE3 \u003d new TableBuilder().withTableNumber(\"3\").withTableStatus(\"0/4\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE4 \u003d new TableBuilder().withTableNumber(\"4\").withTableStatus(\"3/4\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE5 \u003d new TableBuilder().withTableNumber(\"5\").withTableStatus(\"0/5\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE6 \u003d new TableBuilder().withTableNumber(\"6\").withTableStatus(\"0/3\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE7 \u003d new TableBuilder().withTableNumber(\"7\").withTableStatus(\"4/4\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static final Table TABLE8 \u003d new TableBuilder().withTableNumber(\"8\").withTableStatus(\"1/4\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    // Statistics (day, month, year and total daily revenue)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE1 \u003d new StatisticsBuilder().withDay(\"1\").withMonth(\"3\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"700\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE2 \u003d new StatisticsBuilder().withDay(\"2\").withMonth(\"3\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"600\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE3 \u003d new StatisticsBuilder().withDay(\"3\").withMonth(\"3\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"500\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE4 \u003d new StatisticsBuilder().withDay(\"4\").withMonth(\"3\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"400\").build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE5 \u003d new StatisticsBuilder().withDay(\"5\").withMonth(\"3\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"300\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE6 \u003d new StatisticsBuilder().withDay(\"3\").withMonth(\"3\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"200\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final DailyRevenue DAILY_REVENUE7 \u003d new StatisticsBuilder().withDay(\"1\").withMonth(\"3\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                                                       .withYear(\"2019\").withTotalDailyRevenue(\"100\").build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Bill BILL1 \u003d new StatisticsBuilder().withTableNumber(\"1\").withDay(\"1\").withMonth(\"3\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            .withYear(\"2019\").withTotalBill(\"10\").withReceipt(\"\").buildBill();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Bill BILL2 \u003d new StatisticsBuilder().withTableNumber(\"2\").withDay(\"2\").withMonth(\"3\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            .withYear(\"2019\").withTotalBill(\"20\").withReceipt(\"\").buildBill();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static final Bill BILL3 \u003d new StatisticsBuilder().withTableNumber(\"3\").withDay(\"3\").withMonth(\"3\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            .withYear(\"2019\").withTotalBill(\"30\").withReceipt(\"\").buildBill();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bava98"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //                                             .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //                                             .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //                                             .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //                                             .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //                                             .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bava98"
        },
        "content": "    //  public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private TypicalRestOrRant() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bava98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code RestOrRant} with all the typical items."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bava98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static RestOrRant getTypicalRestOrRant() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bava98"
        },
        "content": "        RestOrRant restOrRant \u003d new RestOrRant();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Menu menu \u003d restOrRant.getMenu();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Orders orders \u003d restOrRant.getOrders();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Tables tables \u003d restOrRant.getTables();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bava98"
        },
        "content": "        Statistics statistics \u003d restOrRant.getStatistics();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bava98"
        },
        "content": "        for (MenuItem menuItem : getTypicalMenuItems()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bava98"
        },
        "content": "            menu.addMenuItem(menuItem);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bava98"
        },
        "content": "        for (OrderItem orderItem : getTypicalOrderItems()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bava98"
        },
        "content": "            orders.addOrderItem(orderItem);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bava98"
        },
        "content": "        for (Table table : getTypicalTables()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bava98"
        },
        "content": "            tables.addTable(table);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bava98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        for (DailyRevenue dailyRevenue : getTypicalDailyRevenue()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "            statistics.addDailyRevenue(dailyRevenue);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new RestOrRant(orders, menu, tables, statistics);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static List\u003cMenuItem\u003e getTypicalMenuItems() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHICKEN_WINGS, FRENCH_FRIES, SALAD, CHEESE_NACHOS, SHRIMP_FRIED_RICE,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "bava98"
        },
        "content": "                MEE_SUA, KIMCHI_FRIED_RICE, CREPES));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static List\u003cOrderItem\u003e getTypicalOrderItems() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                Arrays.asList(TABLE1_W09, TABLE1_W12, TABLE2_A05, TABLE2_M17, TABLE2_C02, TABLE4_T01, TABLE7_F11,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                        TABLE8_K12));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bava98"
        },
        "content": "    public static List\u003cTable\u003e getTypicalTables() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bava98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TABLE1, TABLE2, TABLE3, TABLE4, TABLE5, TABLE6, TABLE7, TABLE8));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bava98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bava98"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static List\u003cDailyRevenue\u003e getTypicalDailyRevenue() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DAILY_REVENUE1, DAILY_REVENUE2, DAILY_REVENUE3, DAILY_REVENUE4,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                DAILY_REVENUE5, DAILY_REVENUE6, DAILY_REVENUE7));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bava98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 32,
      "bava98": 93,
      "whyjayxp": 33,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A GUI unit test class for RestOrRant."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderItemCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.ui.testutil.OrdersGuiTestAssert.assertCardDisplaysOrderItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.testutil.OrderItemBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem orderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCard orderItemCard \u003d new OrderItemCard(orderItem, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uiPartRule.setUiPart(orderItemCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCardDisplay(orderItemCard, orderItem, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem orderItem \u003d new OrderItemBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCard orderItemCard \u003d new OrderItemCard(orderItem, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same orderItem, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCard copy \u003d new OrderItemCard(orderItem, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(orderItemCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTrue(orderItemCard.equals(orderItemCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(orderItemCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(orderItemCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // different orderItem, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem differentOrderItem \u003d new OrderItemBuilder().withTableNumber(\"2\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(orderItemCard.equals(new OrderItemCard(differentOrderItem, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // same orderItem, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(orderItemCard.equals(new OrderItemCard(orderItem, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts that {@code orderItemCard} displays the details of {@code expectedOrderItem} correctly and matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private void assertCardDisplay(OrderItemCard orderItemCard, OrderItem expectedOrderItem, int expectedId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCardHandle orderItemCardHandle \u003d new OrderItemCardHandle(orderItemCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", orderItemCardHandle.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // verify orderItem details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCardDisplaysOrderItem(expectedOrderItem, orderItemCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderItemListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.testutil.TypicalRestOrRant.getTypicalOrderItems;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.ui.testutil.OrdersGuiTestAssert.assertCardDisplaysOrderItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static seedu.address.ui.testutil.OrdersGuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.Code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.TableNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrderItemListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final ObservableList\u003cOrderItem\u003e TYPICAL_ORDER_ITEMS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            FXCollections.observableList(getTypicalOrderItems());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private final SimpleObjectProperty\u003cOrderItem\u003e selectedOrderItem \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private OrderItemListPanelHandle orderItemListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        initUi(TYPICAL_ORDER_ITEMS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ORDER_ITEMS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            orderItemListPanelHandle.navigateToCard(TYPICAL_ORDER_ITEMS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            OrderItem expectedOrderItem \u003d TYPICAL_ORDER_ITEMS.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            OrderItemCardHandle actualCard \u003d orderItemListPanelHandle.getOrderItemCardHandle(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            assertCardDisplaysOrderItem(expectedOrderItem, actualCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void selection_modelSelectedOrderItemChanged_selectionChanges() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        initUi(TYPICAL_ORDER_ITEMS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItem secondOrderItem \u003d TYPICAL_ORDER_ITEMS.get(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.interact(() -\u003e selectedOrderItem.set(secondOrderItem));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderItemCardHandle expectedOrderItem \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                orderItemListPanelHandle.getOrderItemCardHandle(INDEX_SECOND_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemCardHandle selectedOrderItem \u003d orderItemListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertCardEquals(expectedOrderItem, selectedOrderItem);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Verifies that creating and deleting large number of orderItems in {@code OrderItemListPanel} requires lesser than"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ObservableList\u003cOrderItem\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }, \"Creation and deletion of orderItem cards exceeded time limit\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a list of orderItems containing {@code orderItemCount} orderItems that is used to populate the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code OrderItemListPanel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private ObservableList\u003cOrderItem\u003e createBackingList(int orderItemCount) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        ObservableList\u003cOrderItem\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d orderItemCount; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            TableNumber tableNumber \u003d new TableNumber(i + \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            Code menuItemCode \u003d new Code(\"W09\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            int quantityOrdered \u003d 3;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            OrderItem orderItem \u003d new OrderItem(tableNumber, menuItemCode, quantityOrdered);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            backingList.add(orderItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Initializes {@code orderItemListPanelHandle} with a {@code OrderItemListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code OrderItemListPanel}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private void initUi(ObservableList\u003cOrderItem\u003e backingList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrderItemListPanel orderItemListPanel \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                new OrderItemListPanel(backingList, selectedOrderItem, selectedOrderItem::set);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        uiPartRule.setUiPart(orderItemListPanel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        orderItemListPanelHandle \u003d new OrderItemListPanelHandle(getChildNode(orderItemListPanel.getRoot(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                OrderItemListPanelHandle.ORDER_ITEM_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 98,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/OrdersGuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.TableCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class OrdersGuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertCardEquals(OrderItemCardHandle expectedCard, OrderItemCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedCard.getTableNumber(), actualCard.getTableNumber());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedCard.getMenuItemCode(), actualCard.getMenuItemCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedCard.getQuantity(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedOrderItem}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertCardDisplaysOrderItem(OrderItem expectedOrderItem, OrderItemCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedOrderItem.getTableNumber().tableNumber, actualCard.getTableNumber());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expectedOrderItem.getMenuItemCode().itemCode, actualCard.getMenuItemCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(Integer.toString(expectedOrderItem.getQuantity()), actualCard.getQuantity());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedOrderItem}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysTable(Table expecteedTable, TableCardHandle actualCard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expecteedTable.getTableNumber().toString(), actualCard.getTableNumber());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expecteedTable.getTableStatus().toString(), actualCard.getTableStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts that the list in {@code orderItemListPanelHandle} displays the details of {@code orderItems} correctly"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertListMatching(OrderItemListPanelHandle orderItemListPanelHandle, OrderItem... orderItems) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        for (int i \u003d 0; i \u003c orderItems.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            orderItemListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            assertCardDisplaysOrderItem(orderItems[i], orderItemListPanelHandle.getOrderItemCardHandle(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts that the list in {@code orderItemListPanelHandle} displays the details of {@code orderItems} correctly"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertListMatching(OrderItemListPanelHandle orderItemListPanelHandle,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                                          List\u003cOrderItem\u003e orderItems) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertListMatching(orderItemListPanelHandle, orderItems.toArray(new OrderItem[0]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts the size of the list in {@code orderItemListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertListSize(OrderItemListPanelHandle orderItemListPanelHandle, int size) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        int numberOfPeople \u003d orderItemListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 71,
      "-": 10
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class ClearCommandSystemTest extends RestOrRantSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "         * TODO: Update the tests below. The following tests no longer work due to the removal of undo/redo."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        //assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code RestOrRantSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see RestOrRantSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * {@code RestOrRantSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see RestOrRantSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 16,
      "-": 69
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.OrdersGuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RestaurantModeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.TableModeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class HelpCommandSystemTest extends RestOrRantSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getOrderItemListPanel().click();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(TableModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        //        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getOrderItemListPanel(), getModel().getFilteredOrderItemList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(RestaurantModeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 104
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.menu.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.order.OrderItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.model.statistics.DailyRevenue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.table.Table;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Predicate\u003cOrderItem\u003e PREDICATE_MATCHING_NO_ORDER_ITEMS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Predicate\u003cMenuItem\u003e PREDICATE_MATCHING_NO_MENU_ITEMS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Predicate\u003cTable\u003e PREDICATE_MATCHING_NO_TABLES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static final Predicate\u003cDailyRevenue\u003e PREDICATE_MATCHING_NO_DAILY_REVENUE \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Updates {@code model}\u0027s order item filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setOrderItemFilteredList(Model model, List\u003cOrderItem\u003e toDisplay) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cPredicate\u003cOrderItem\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getOrderItemPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredOrderItemList(predicate.orElse(PREDICATE_MATCHING_NO_ORDER_ITEMS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see ModelHelper#setOrderItemFilteredList(Model, List)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setOrderItemFilteredList(Model model, OrderItem... toDisplay) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setOrderItemFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code OrderItem} equals to {@code other}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static Predicate\u003cOrderItem\u003e getOrderItemPredicateMatching(OrderItem other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return item -\u003e item.equals(other);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Updates {@code model}\u0027s menu item filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setMenuItemFilteredList(Model model, List\u003cMenuItem\u003e toDisplay) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cPredicate\u003cMenuItem\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getMenuItemPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredMenuItemList(predicate.orElse(PREDICATE_MATCHING_NO_MENU_ITEMS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see ModelHelper#setMenuItemFilteredList(Model, List)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setMenuItemFilteredList(Model model, MenuItem... toDisplay) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setMenuItemFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code MenuItem} equals to {@code other}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static Predicate\u003cMenuItem\u003e getMenuItemPredicateMatching(MenuItem other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return item -\u003e item.equals(other);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Updates {@code model}\u0027s table filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setTableFilteredList(Model model, List\u003cTable\u003e toDisplay) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        Optional\u003cPredicate\u003cTable\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getTablePredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredTableList(predicate.orElse(PREDICATE_MATCHING_NO_TABLES));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * @see ModelHelper#setTableFilteredList(Model, List)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static void setTableFilteredList(Model model, Table... toDisplay) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        setTableFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Table} equals to {@code other}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    private static Predicate\u003cTable\u003e getTablePredicateMatching(Table other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return item -\u003e item.equals(other);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Updates {@code model}\u0027s daily revenue filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static void setDailyRevenueFilteredList(Model model, List\u003cDailyRevenue\u003e toDisplay) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        Optional\u003cPredicate\u003cDailyRevenue\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getDailyRevenuePredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        model.updateFilteredDailyRevenueList(predicate.orElse(PREDICATE_MATCHING_NO_DAILY_REVENUE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * @see ModelHelper#setDailyRevenueFilteredList(Model, List)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    public static void setDailyRevenueFilteredList(Model model, DailyRevenue... toDisplay) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        setDailyRevenueFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code DailyRevenue} equals to {@code other}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    private static Predicate\u003cDailyRevenue\u003e getDailyRevenuePredicateMatching(DailyRevenue other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return item -\u003e item.equals(other);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 24,
      "whyjayxp": 64,
      "-": 27
    }
  },
  {
    "path": "src/test/java/systemtests/RestOrRantSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import guitests.guihandles.OrderItemListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.RestOrRant;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "import seedu.address.testutil.TypicalRestOrRant;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.ui.testutil.OrdersGuiTestAssert;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": " * A system test class for RestOrRant, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public abstract class RestOrRantSystemTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getTablesFileLocation(), getOrdersFileLocation(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                getMenuFileLocation(), getStatsFileLocation());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Returns the data to be loaded into the given files."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected RestOrRant getInitialData() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return TypicalRestOrRant.getTypicalRestOrRant();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path getTablesFileLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return TestApp.TABLES_FOR_TESTING;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path getOrdersFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return TestApp.ORDERS_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path getMenuFileLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return TestApp.MENU_FOR_TESTING;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    protected Path getStatsFileLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Beesaycheese"
        },
        "content": "        return TestApp.STATS_FOR_TESTING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public OrderItemListPanelHandle getOrderItemListPanel() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return mainWindowHandle.getOrderItemListPanel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(getModel().getRestOrRant().getPersonList().size(), getModel().getFilteredPersonList().size"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        ());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getRestOrRant().getPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(0, getModel().getRestOrRant().getPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * and the order item list panel displays the order items in the model correctly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(new RestOrRant(expectedModel.getRestOrRant()), testApp.readStorageRestOrRant());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrdersGuiTestAssert.assertListMatching(getOrderItemListPanel(), expectedModel.getFilteredOrderItemList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // TODO: check for the other lists and panes too"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code OrderItemListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        getBrowserPanel().rememberUrl(); // TODO: update"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        statusBarFooterHandle.rememberCurrentMode();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        getOrderItemListPanel().rememberSelectedOrderItemCard();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * default page."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        URL expectedUrl;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(handle.isCurrentModeChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertFalse(handle.isCurrentModeChanged());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        OrdersGuiTestAssert.assertListMatching(getOrderItemListPanel(), getModel().getFilteredOrderItemList());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        // assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());TODO: what does browser panel show?"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        assertEquals(\"Restaurant Mode\", getStatusBarFooter().getCurrentMode());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Beesaycheese": 15,
      "whyjayxp": 101,
      "-": 177
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "public class SampleDataTest extends RestOrRantSystemTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    protected RestOrRant getInitialData() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        return filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 35,
      "-": 4
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "import seedu.address.model.ReadOnlyRestOrRant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyRestOrRant\u003e restOrRant, Path tablesFileLocation,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                                    Path ordersFileLocation, Path menuFileLocation, Path statsFileLocation) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                    new TestApp(restOrRant, tablesFileLocation, ordersFileLocation, menuFileLocation,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "                            statsFileLocation));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 18,
      "-": 59
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "whyjayxp"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "whyjayxp": 1,
      "-": 6
    }
  }
]
